
lab4_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000017c  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000210  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000968  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000033b  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ac  00000000  00000000  00000d23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000279  00000000  00000000  00000dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001048  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000075  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003b  00000000  00000000  000010f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e7       	ldi	r30, 0x7C	; 124
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a2 30       	cpi	r26, 0x02	; 2
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  c8:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <main>:
#include <avr/io.h>

int loop;

int main(void){
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
	DDRE = 0x04; // PE2 출력
  d8:	82 e2       	ldi	r24, 0x22	; 34
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	24 e0       	ldi	r18, 0x04	; 4
  de:	fc 01       	movw	r30, r24
  e0:	20 83       	st	Z, r18
	TCCR0 = 0b00000110; // normal 모드, OC0 차단(범용IO포트동작), 분주비 256
  e2:	83 e5       	ldi	r24, 0x53	; 83
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	26 e0       	ldi	r18, 0x06	; 6
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
	TCNT0 = 225; //31250개 카운트가 1초이므로 1000을 나누어 클럭 31개라고 
  ec:	82 e5       	ldi	r24, 0x52	; 82
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	21 ee       	ldi	r18, 0xE1	; 225
  f2:	fc 01       	movw	r30, r24
  f4:	20 83       	st	Z, r18
				//가정 후 100번 반복하여 100msec가 나오도록 함

	while(1){
		for(loop=1; loop<=100; loop++){ //31개 100번 반복 시 0.1초
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	90 93 01 01 	sts	0x0101, r25
  fe:	80 93 00 01 	sts	0x0100, r24
 102:	22 c0       	rjmp	.+68     	; 0x148 <main+0x78>
			while(!(TIFR & 0b00000001));
 104:	00 00       	nop
 106:	86 e5       	ldi	r24, 0x56	; 86
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	fc 01       	movw	r30, r24
 10c:	80 81       	ld	r24, Z
 10e:	88 2f       	mov	r24, r24
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	81 70       	andi	r24, 0x01	; 1
 114:	90 70       	andi	r25, 0x00	; 0
 116:	00 97       	sbiw	r24, 0x00	; 0
 118:	b1 f3       	breq	.-20     	; 0x106 <main+0x36>
			TIFR |= 0b00000001; //TOV0을 1로 라이트하여
 11a:	86 e5       	ldi	r24, 0x56	; 86
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	26 e5       	ldi	r18, 0x56	; 86
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	f9 01       	movw	r30, r18
 124:	20 81       	ld	r18, Z
 126:	21 60       	ori	r18, 0x01	; 1
 128:	fc 01       	movw	r30, r24
 12a:	20 83       	st	Z, r18
								//다음 번 오버플로우 체크 대비
			TCNT0 = 225; //256-225 = 31
 12c:	82 e5       	ldi	r24, 0x52	; 82
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	21 ee       	ldi	r18, 0xE1	; 225
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
	TCCR0 = 0b00000110; // normal 모드, OC0 차단(범용IO포트동작), 분주비 256
	TCNT0 = 225; //31250개 카운트가 1초이므로 1000을 나누어 클럭 31개라고 
				//가정 후 100번 반복하여 100msec가 나오도록 함

	while(1){
		for(loop=1; loop<=100; loop++){ //31개 100번 반복 시 0.1초
 136:	80 91 00 01 	lds	r24, 0x0100
 13a:	90 91 01 01 	lds	r25, 0x0101
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	90 93 01 01 	sts	0x0101, r25
 144:	80 93 00 01 	sts	0x0100, r24
 148:	80 91 00 01 	lds	r24, 0x0100
 14c:	90 91 01 01 	lds	r25, 0x0101
 150:	85 36       	cpi	r24, 0x65	; 101
 152:	91 05       	cpc	r25, r1
 154:	bc f2       	brlt	.-82     	; 0x104 <main+0x34>
			while(!(TIFR & 0b00000001));
			TIFR |= 0b00000001; //TOV0을 1로 라이트하여
								//다음 번 오버플로우 체크 대비
			TCNT0 = 225; //256-225 = 31
		}
		if(PORTE == 0x04) PORTE = 0x00; //점등 상태이면 소등
 156:	83 e2       	ldi	r24, 0x23	; 35
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	fc 01       	movw	r30, r24
 15c:	80 81       	ld	r24, Z
 15e:	84 30       	cpi	r24, 0x04	; 4
 160:	29 f4       	brne	.+10     	; 0x16c <main+0x9c>
 162:	83 e2       	ldi	r24, 0x23	; 35
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	fc 01       	movw	r30, r24
 168:	10 82       	st	Z, r1
		else //소등 상태이면 다시 점등
		PORTE = 0x04;
	}		
 16a:	c5 cf       	rjmp	.-118    	; 0xf6 <main+0x26>
								//다음 번 오버플로우 체크 대비
			TCNT0 = 225; //256-225 = 31
		}
		if(PORTE == 0x04) PORTE = 0x00; //점등 상태이면 소등
		else //소등 상태이면 다시 점등
		PORTE = 0x04;
 16c:	83 e2       	ldi	r24, 0x23	; 35
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	24 e0       	ldi	r18, 0x04	; 4
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
	}		
 176:	bf cf       	rjmp	.-130    	; 0xf6 <main+0x26>

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
