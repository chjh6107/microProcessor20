
lab8_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00002780  00002814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002780  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  0080014a  0080014a  0000285e  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00002860  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  000034e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002c0  00000000  00000000  000036a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003546  00000000  00000000  00003960  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001535  00000000  00000000  00006ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001635  00000000  00000000  000083db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000067c  00000000  00000000  00009a10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061a  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001916  00000000  00000000  0000a6a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000bfbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      14:	0c 94 ca 03 	jmp	0x794	; 0x794 <__vector_5>
      18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e8       	ldi	r30, 0x80	; 128
      a0:	f7 e2       	ldi	r31, 0x27	; 39
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 34       	cpi	r26, 0x4A	; 74
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
      b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
      b4:	11 e0       	ldi	r17, 0x01	; 1
      b6:	aa e4       	ldi	r26, 0x4A	; 74
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	a3 36       	cpi	r26, 0x63	; 99
      c0:	b1 07       	cpc	r27, r17
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
      c4:	0e 94 0a 09 	call	0x1214	; 0x1214 <main>
      c8:	0c 94 be 13 	jmp	0x277c	; 0x277c <_exit>

000000cc <__bad_interrupt>:
      cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <lcd_busy>:
	#define LCD_CS PORTB
	#define LCD_DATA PORTA
#endif

void lcd_busy(void)
{
      d0:	0f 93       	push	r16
      d2:	1f 93       	push	r17
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29
      d8:	cd b7       	in	r28, 0x3d	; 61
      da:	de b7       	in	r29, 0x3e	; 62
      dc:	2e 97       	sbiw	r28, 0x0e	; 14
      de:	0f b6       	in	r0, 0x3f	; 63
      e0:	f8 94       	cli
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	0f be       	out	0x3f, r0	; 63
      e6:	cd bf       	out	0x3d, r28	; 61
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	a8 e4       	ldi	r26, 0x48	; 72
      ee:	b2 e4       	ldi	r27, 0x42	; 66
      f0:	89 83       	std	Y+1, r24	; 0x01
      f2:	9a 83       	std	Y+2, r25	; 0x02
      f4:	ab 83       	std	Y+3, r26	; 0x03
      f6:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
      f8:	69 81       	ldd	r22, Y+1	; 0x01
      fa:	7a 81       	ldd	r23, Y+2	; 0x02
      fc:	8b 81       	ldd	r24, Y+3	; 0x03
      fe:	9c 81       	ldd	r25, Y+4	; 0x04
     100:	20 e0       	ldi	r18, 0x00	; 0
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	4a ef       	ldi	r20, 0xFA	; 250
     106:	54 e4       	ldi	r21, 0x44	; 68
     108:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     10c:	dc 01       	movw	r26, r24
     10e:	cb 01       	movw	r24, r22
     110:	8d 83       	std	Y+5, r24	; 0x05
     112:	9e 83       	std	Y+6, r25	; 0x06
     114:	af 83       	std	Y+7, r26	; 0x07
     116:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     118:	11 e0       	ldi	r17, 0x01	; 1
     11a:	6d 81       	ldd	r22, Y+5	; 0x05
     11c:	7e 81       	ldd	r23, Y+6	; 0x06
     11e:	8f 81       	ldd	r24, Y+7	; 0x07
     120:	98 85       	ldd	r25, Y+8	; 0x08
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	40 e8       	ldi	r20, 0x80	; 128
     128:	5f e3       	ldi	r21, 0x3F	; 63
     12a:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__ltsf2>
     12e:	88 23       	and	r24, r24
     130:	0c f0       	brlt	.+2      	; 0x134 <lcd_busy+0x64>
     132:	10 e0       	ldi	r17, 0x00	; 0
     134:	11 23       	and	r17, r17
     136:	29 f0       	breq	.+10     	; 0x142 <lcd_busy+0x72>
		__ticks = 1;
     138:	81 e0       	ldi	r24, 0x01	; 1
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	9a 87       	std	Y+10, r25	; 0x0a
     13e:	89 87       	std	Y+9, r24	; 0x09
     140:	46 c0       	rjmp	.+140    	; 0x1ce <lcd_busy+0xfe>
	else if (__tmp > 65535)
     142:	11 e0       	ldi	r17, 0x01	; 1
     144:	6d 81       	ldd	r22, Y+5	; 0x05
     146:	7e 81       	ldd	r23, Y+6	; 0x06
     148:	8f 81       	ldd	r24, Y+7	; 0x07
     14a:	98 85       	ldd	r25, Y+8	; 0x08
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	3f ef       	ldi	r19, 0xFF	; 255
     150:	4f e7       	ldi	r20, 0x7F	; 127
     152:	57 e4       	ldi	r21, 0x47	; 71
     154:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__gtsf2>
     158:	18 16       	cp	r1, r24
     15a:	0c f0       	brlt	.+2      	; 0x15e <lcd_busy+0x8e>
     15c:	10 e0       	ldi	r17, 0x00	; 0
     15e:	11 23       	and	r17, r17
     160:	61 f1       	breq	.+88     	; 0x1ba <lcd_busy+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     162:	69 81       	ldd	r22, Y+1	; 0x01
     164:	7a 81       	ldd	r23, Y+2	; 0x02
     166:	8b 81       	ldd	r24, Y+3	; 0x03
     168:	9c 81       	ldd	r25, Y+4	; 0x04
     16a:	20 e0       	ldi	r18, 0x00	; 0
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	40 e2       	ldi	r20, 0x20	; 32
     170:	51 e4       	ldi	r21, 0x41	; 65
     172:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     176:	dc 01       	movw	r26, r24
     178:	cb 01       	movw	r24, r22
     17a:	bc 01       	movw	r22, r24
     17c:	cd 01       	movw	r24, r26
     17e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__fixunssfsi>
     182:	dc 01       	movw	r26, r24
     184:	cb 01       	movw	r24, r22
     186:	9a 87       	std	Y+10, r25	; 0x0a
     188:	89 87       	std	Y+9, r24	; 0x09
     18a:	12 c0       	rjmp	.+36     	; 0x1b0 <lcd_busy+0xe0>
     18c:	88 ec       	ldi	r24, 0xC8	; 200
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	9c 87       	std	Y+12, r25	; 0x0c
     192:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     194:	8b 85       	ldd	r24, Y+11	; 0x0b
     196:	9c 85       	ldd	r25, Y+12	; 0x0c
     198:	8c 01       	movw	r16, r24
     19a:	c8 01       	movw	r24, r16
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_busy+0xcc>
     1a0:	8c 01       	movw	r16, r24
     1a2:	1c 87       	std	Y+12, r17	; 0x0c
     1a4:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1a6:	89 85       	ldd	r24, Y+9	; 0x09
     1a8:	9a 85       	ldd	r25, Y+10	; 0x0a
     1aa:	01 97       	sbiw	r24, 0x01	; 1
     1ac:	9a 87       	std	Y+10, r25	; 0x0a
     1ae:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1b0:	89 85       	ldd	r24, Y+9	; 0x09
     1b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     1b4:	00 97       	sbiw	r24, 0x00	; 0
     1b6:	51 f7       	brne	.-44     	; 0x18c <lcd_busy+0xbc>
     1b8:	17 c0       	rjmp	.+46     	; 0x1e8 <lcd_busy+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1ba:	6d 81       	ldd	r22, Y+5	; 0x05
     1bc:	7e 81       	ldd	r23, Y+6	; 0x06
     1be:	8f 81       	ldd	r24, Y+7	; 0x07
     1c0:	98 85       	ldd	r25, Y+8	; 0x08
     1c2:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__fixunssfsi>
     1c6:	dc 01       	movw	r26, r24
     1c8:	cb 01       	movw	r24, r22
     1ca:	9a 87       	std	Y+10, r25	; 0x0a
     1cc:	89 87       	std	Y+9, r24	; 0x09
     1ce:	89 85       	ldd	r24, Y+9	; 0x09
     1d0:	9a 85       	ldd	r25, Y+10	; 0x0a
     1d2:	9e 87       	std	Y+14, r25	; 0x0e
     1d4:	8d 87       	std	Y+13, r24	; 0x0d
     1d6:	8d 85       	ldd	r24, Y+13	; 0x0d
     1d8:	9e 85       	ldd	r25, Y+14	; 0x0e
     1da:	8c 01       	movw	r16, r24
     1dc:	c8 01       	movw	r24, r16
     1de:	01 97       	sbiw	r24, 0x01	; 1
     1e0:	f1 f7       	brne	.-4      	; 0x1de <lcd_busy+0x10e>
     1e2:	8c 01       	movw	r16, r24
     1e4:	1e 87       	std	Y+14, r17	; 0x0e
     1e6:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(50);	
}
     1e8:	2e 96       	adiw	r28, 0x0e	; 14
     1ea:	0f b6       	in	r0, 0x3f	; 63
     1ec:	f8 94       	cli
     1ee:	de bf       	out	0x3e, r29	; 62
     1f0:	0f be       	out	0x3f, r0	; 63
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	df 91       	pop	r29
     1f6:	cf 91       	pop	r28
     1f8:	1f 91       	pop	r17
     1fa:	0f 91       	pop	r16
     1fc:	08 95       	ret

000001fe <lcd_command>:

void lcd_command(unsigned char cmd)
{
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	cd b7       	in	r28, 0x3d	; 61
     208:	de b7       	in	r29, 0x3e	; 62
     20a:	69 97       	sbiw	r28, 0x19	; 25
     20c:	0f b6       	in	r0, 0x3f	; 63
     20e:	f8 94       	cli
     210:	de bf       	out	0x3e, r29	; 62
     212:	0f be       	out	0x3f, r0	; 63
     214:	cd bf       	out	0x3d, r28	; 61
     216:	89 8f       	std	Y+25, r24	; 0x19
	lcd_busy();
     218:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_busy>
#if LCDtarget == easyTextLCD
	LCD_DATA = cmd;			// 포트 A에 명령어 출력
	LCD_CS = 0b00000001;	// RW=0, RS=0, E=1
	LCD_CS = 0b00000000;	// E=0
#else
	LCD_DATA = cmd;			// 포트 A에 명령어 출력
     21c:	8b e3       	ldi	r24, 0x3B	; 59
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	29 8d       	ldd	r18, Y+25	; 0x19
     222:	fc 01       	movw	r30, r24
     224:	20 83       	st	Z, r18
	LCD_CS = 0b00000100;	// RW=0, RS=0, E=1
     226:	88 e3       	ldi	r24, 0x38	; 56
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	24 e0       	ldi	r18, 0x04	; 4
     22c:	fc 01       	movw	r30, r24
     22e:	20 83       	st	Z, r18
	LCD_CS = 0b00000000;	// E=0
     230:	88 e3       	ldi	r24, 0x38	; 56
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	fc 01       	movw	r30, r24
     236:	10 82       	st	Z, r1
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	a0 e8       	ldi	r26, 0x80	; 128
     23e:	bf e3       	ldi	r27, 0x3F	; 63
     240:	89 83       	std	Y+1, r24	; 0x01
     242:	9a 83       	std	Y+2, r25	; 0x02
     244:	ab 83       	std	Y+3, r26	; 0x03
     246:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     248:	69 81       	ldd	r22, Y+1	; 0x01
     24a:	7a 81       	ldd	r23, Y+2	; 0x02
     24c:	8b 81       	ldd	r24, Y+3	; 0x03
     24e:	9c 81       	ldd	r25, Y+4	; 0x04
     250:	2b ea       	ldi	r18, 0xAB	; 171
     252:	3a ea       	ldi	r19, 0xAA	; 170
     254:	4a e2       	ldi	r20, 0x2A	; 42
     256:	50 e4       	ldi	r21, 0x40	; 64
     258:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     25c:	dc 01       	movw	r26, r24
     25e:	cb 01       	movw	r24, r22
     260:	8d 83       	std	Y+5, r24	; 0x05
     262:	9e 83       	std	Y+6, r25	; 0x06
     264:	af 83       	std	Y+7, r26	; 0x07
     266:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     268:	11 e0       	ldi	r17, 0x01	; 1
     26a:	6d 81       	ldd	r22, Y+5	; 0x05
     26c:	7e 81       	ldd	r23, Y+6	; 0x06
     26e:	8f 81       	ldd	r24, Y+7	; 0x07
     270:	98 85       	ldd	r25, Y+8	; 0x08
     272:	20 e0       	ldi	r18, 0x00	; 0
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	40 e8       	ldi	r20, 0x80	; 128
     278:	5f e3       	ldi	r21, 0x3F	; 63
     27a:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__ltsf2>
     27e:	88 23       	and	r24, r24
     280:	0c f0       	brlt	.+2      	; 0x284 <lcd_command+0x86>
     282:	10 e0       	ldi	r17, 0x00	; 0
     284:	11 23       	and	r17, r17
     286:	19 f0       	breq	.+6      	; 0x28e <lcd_command+0x90>
		__ticks = 1;
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	89 87       	std	Y+9, r24	; 0x09
     28c:	a3 c0       	rjmp	.+326    	; 0x3d4 <lcd_command+0x1d6>
	else if (__tmp > 255)
     28e:	11 e0       	ldi	r17, 0x01	; 1
     290:	6d 81       	ldd	r22, Y+5	; 0x05
     292:	7e 81       	ldd	r23, Y+6	; 0x06
     294:	8f 81       	ldd	r24, Y+7	; 0x07
     296:	98 85       	ldd	r25, Y+8	; 0x08
     298:	20 e0       	ldi	r18, 0x00	; 0
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	4f e7       	ldi	r20, 0x7F	; 127
     29e:	53 e4       	ldi	r21, 0x43	; 67
     2a0:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__gtsf2>
     2a4:	18 16       	cp	r1, r24
     2a6:	0c f0       	brlt	.+2      	; 0x2aa <lcd_command+0xac>
     2a8:	10 e0       	ldi	r17, 0x00	; 0
     2aa:	11 23       	and	r17, r17
     2ac:	09 f4       	brne	.+2      	; 0x2b0 <lcd_command+0xb2>
     2ae:	89 c0       	rjmp	.+274    	; 0x3c2 <lcd_command+0x1c4>
	{
		_delay_ms(__us / 1000.0);
     2b0:	69 81       	ldd	r22, Y+1	; 0x01
     2b2:	7a 81       	ldd	r23, Y+2	; 0x02
     2b4:	8b 81       	ldd	r24, Y+3	; 0x03
     2b6:	9c 81       	ldd	r25, Y+4	; 0x04
     2b8:	20 e0       	ldi	r18, 0x00	; 0
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	4a e7       	ldi	r20, 0x7A	; 122
     2be:	54 e4       	ldi	r21, 0x44	; 68
     2c0:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__divsf3>
     2c4:	dc 01       	movw	r26, r24
     2c6:	cb 01       	movw	r24, r22
     2c8:	8a 87       	std	Y+10, r24	; 0x0a
     2ca:	9b 87       	std	Y+11, r25	; 0x0b
     2cc:	ac 87       	std	Y+12, r26	; 0x0c
     2ce:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     2d0:	6a 85       	ldd	r22, Y+10	; 0x0a
     2d2:	7b 85       	ldd	r23, Y+11	; 0x0b
     2d4:	8c 85       	ldd	r24, Y+12	; 0x0c
     2d6:	9d 85       	ldd	r25, Y+13	; 0x0d
     2d8:	20 e0       	ldi	r18, 0x00	; 0
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	4a ef       	ldi	r20, 0xFA	; 250
     2de:	54 e4       	ldi	r21, 0x44	; 68
     2e0:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     2e4:	dc 01       	movw	r26, r24
     2e6:	cb 01       	movw	r24, r22
     2e8:	8e 87       	std	Y+14, r24	; 0x0e
     2ea:	9f 87       	std	Y+15, r25	; 0x0f
     2ec:	a8 8b       	std	Y+16, r26	; 0x10
     2ee:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     2f0:	11 e0       	ldi	r17, 0x01	; 1
     2f2:	6e 85       	ldd	r22, Y+14	; 0x0e
     2f4:	7f 85       	ldd	r23, Y+15	; 0x0f
     2f6:	88 89       	ldd	r24, Y+16	; 0x10
     2f8:	99 89       	ldd	r25, Y+17	; 0x11
     2fa:	20 e0       	ldi	r18, 0x00	; 0
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	40 e8       	ldi	r20, 0x80	; 128
     300:	5f e3       	ldi	r21, 0x3F	; 63
     302:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__ltsf2>
     306:	88 23       	and	r24, r24
     308:	0c f0       	brlt	.+2      	; 0x30c <lcd_command+0x10e>
     30a:	10 e0       	ldi	r17, 0x00	; 0
     30c:	11 23       	and	r17, r17
     30e:	29 f0       	breq	.+10     	; 0x31a <lcd_command+0x11c>
		__ticks = 1;
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	9b 8b       	std	Y+19, r25	; 0x13
     316:	8a 8b       	std	Y+18, r24	; 0x12
     318:	46 c0       	rjmp	.+140    	; 0x3a6 <lcd_command+0x1a8>
	else if (__tmp > 65535)
     31a:	11 e0       	ldi	r17, 0x01	; 1
     31c:	6e 85       	ldd	r22, Y+14	; 0x0e
     31e:	7f 85       	ldd	r23, Y+15	; 0x0f
     320:	88 89       	ldd	r24, Y+16	; 0x10
     322:	99 89       	ldd	r25, Y+17	; 0x11
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	3f ef       	ldi	r19, 0xFF	; 255
     328:	4f e7       	ldi	r20, 0x7F	; 127
     32a:	57 e4       	ldi	r21, 0x47	; 71
     32c:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__gtsf2>
     330:	18 16       	cp	r1, r24
     332:	0c f0       	brlt	.+2      	; 0x336 <lcd_command+0x138>
     334:	10 e0       	ldi	r17, 0x00	; 0
     336:	11 23       	and	r17, r17
     338:	61 f1       	breq	.+88     	; 0x392 <lcd_command+0x194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     33a:	6a 85       	ldd	r22, Y+10	; 0x0a
     33c:	7b 85       	ldd	r23, Y+11	; 0x0b
     33e:	8c 85       	ldd	r24, Y+12	; 0x0c
     340:	9d 85       	ldd	r25, Y+13	; 0x0d
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	40 e2       	ldi	r20, 0x20	; 32
     348:	51 e4       	ldi	r21, 0x41	; 65
     34a:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     34e:	dc 01       	movw	r26, r24
     350:	cb 01       	movw	r24, r22
     352:	bc 01       	movw	r22, r24
     354:	cd 01       	movw	r24, r26
     356:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__fixunssfsi>
     35a:	dc 01       	movw	r26, r24
     35c:	cb 01       	movw	r24, r22
     35e:	9b 8b       	std	Y+19, r25	; 0x13
     360:	8a 8b       	std	Y+18, r24	; 0x12
     362:	12 c0       	rjmp	.+36     	; 0x388 <lcd_command+0x18a>
     364:	88 ec       	ldi	r24, 0xC8	; 200
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	9d 8b       	std	Y+21, r25	; 0x15
     36a:	8c 8b       	std	Y+20, r24	; 0x14
     36c:	8c 89       	ldd	r24, Y+20	; 0x14
     36e:	9d 89       	ldd	r25, Y+21	; 0x15
     370:	8c 01       	movw	r16, r24
     372:	c8 01       	movw	r24, r16
     374:	01 97       	sbiw	r24, 0x01	; 1
     376:	f1 f7       	brne	.-4      	; 0x374 <lcd_command+0x176>
     378:	8c 01       	movw	r16, r24
     37a:	1d 8b       	std	Y+21, r17	; 0x15
     37c:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     37e:	8a 89       	ldd	r24, Y+18	; 0x12
     380:	9b 89       	ldd	r25, Y+19	; 0x13
     382:	01 97       	sbiw	r24, 0x01	; 1
     384:	9b 8b       	std	Y+19, r25	; 0x13
     386:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     388:	8a 89       	ldd	r24, Y+18	; 0x12
     38a:	9b 89       	ldd	r25, Y+19	; 0x13
     38c:	00 97       	sbiw	r24, 0x00	; 0
     38e:	51 f7       	brne	.-44     	; 0x364 <lcd_command+0x166>
     390:	28 c0       	rjmp	.+80     	; 0x3e2 <lcd_command+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     392:	6e 85       	ldd	r22, Y+14	; 0x0e
     394:	7f 85       	ldd	r23, Y+15	; 0x0f
     396:	88 89       	ldd	r24, Y+16	; 0x10
     398:	99 89       	ldd	r25, Y+17	; 0x11
     39a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__fixunssfsi>
     39e:	dc 01       	movw	r26, r24
     3a0:	cb 01       	movw	r24, r22
     3a2:	9b 8b       	std	Y+19, r25	; 0x13
     3a4:	8a 8b       	std	Y+18, r24	; 0x12
     3a6:	8a 89       	ldd	r24, Y+18	; 0x12
     3a8:	9b 89       	ldd	r25, Y+19	; 0x13
     3aa:	9f 8b       	std	Y+23, r25	; 0x17
     3ac:	8e 8b       	std	Y+22, r24	; 0x16
     3ae:	8e 89       	ldd	r24, Y+22	; 0x16
     3b0:	9f 89       	ldd	r25, Y+23	; 0x17
     3b2:	8c 01       	movw	r16, r24
     3b4:	f8 01       	movw	r30, r16
     3b6:	31 97       	sbiw	r30, 0x01	; 1
     3b8:	f1 f7       	brne	.-4      	; 0x3b6 <lcd_command+0x1b8>
     3ba:	8f 01       	movw	r16, r30
     3bc:	1f 8b       	std	Y+23, r17	; 0x17
     3be:	0e 8b       	std	Y+22, r16	; 0x16
     3c0:	10 c0       	rjmp	.+32     	; 0x3e2 <lcd_command+0x1e4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     3c2:	6d 81       	ldd	r22, Y+5	; 0x05
     3c4:	7e 81       	ldd	r23, Y+6	; 0x06
     3c6:	8f 81       	ldd	r24, Y+7	; 0x07
     3c8:	98 85       	ldd	r25, Y+8	; 0x08
     3ca:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__fixunssfsi>
     3ce:	dc 01       	movw	r26, r24
     3d0:	cb 01       	movw	r24, r22
     3d2:	89 87       	std	Y+9, r24	; 0x09
     3d4:	89 85       	ldd	r24, Y+9	; 0x09
     3d6:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3d8:	88 8d       	ldd	r24, Y+24	; 0x18
     3da:	18 2f       	mov	r17, r24
     3dc:	1a 95       	dec	r17
     3de:	f1 f7       	brne	.-4      	; 0x3dc <lcd_command+0x1de>
     3e0:	18 8f       	std	Y+24, r17	; 0x18
#endif
	_delay_us(1);	
}
     3e2:	69 96       	adiw	r28, 0x19	; 25
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	cd bf       	out	0x3d, r28	; 61
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	1f 91       	pop	r17
     3f4:	0f 91       	pop	r16
     3f6:	08 95       	ret

000003f8 <lcd_init>:

void lcd_init()
{
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	cd b7       	in	r28, 0x3d	; 61
     3fe:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFF;
     400:	8a e3       	ldi	r24, 0x3A	; 58
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	2f ef       	ldi	r18, 0xFF	; 255
     406:	fc 01       	movw	r30, r24
     408:	20 83       	st	Z, r18
	DDRB = 0xFF;
     40a:	87 e3       	ldi	r24, 0x37	; 55
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	2f ef       	ldi	r18, 0xFF	; 255
     410:	fc 01       	movw	r30, r24
     412:	20 83       	st	Z, r18

	lcd_command(0b00111000); // 8-bit mode, 2행
     414:	88 e3       	ldi	r24, 0x38	; 56
     416:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command>
	lcd_command(0b00001000); // (문자표시, 커서표시, 블링크)? off 
     41a:	88 e0       	ldi	r24, 0x08	; 8
     41c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command>
	lcd_command(0b00000001); // clear
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command>
	lcd_command(0b00000110); // 커서 자동증가
     426:	86 e0       	ldi	r24, 0x06	; 6
     428:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command>
	lcd_command(0b00001111); // (문자표시, 커서표시, 블링크)? on 
     42c:	8f e0       	ldi	r24, 0x0F	; 15
     42e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command>
}
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	08 95       	ret

00000438 <lcd_data>:

void lcd_data(unsigned char byte)
{
     438:	0f 93       	push	r16
     43a:	1f 93       	push	r17
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
     444:	69 97       	sbiw	r28, 0x19	; 25
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	cd bf       	out	0x3d, r28	; 61
     450:	89 8f       	std	Y+25, r24	; 0x19
	lcd_busy();
     452:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_busy>
#if Target == easyTextLCD
	LCD_DATA = byte;	// 포트 A에 명령어 출력
	LCD_CS = 0b00000011;	// RS=1, RW=0, E=1
	LCD_CS = 0b00000010;	// E=1
#else
	LCD_DATA = byte;	// 포트 A에 명령어 출력
     456:	8b e3       	ldi	r24, 0x3B	; 59
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	29 8d       	ldd	r18, Y+25	; 0x19
     45c:	fc 01       	movw	r30, r24
     45e:	20 83       	st	Z, r18
	LCD_CS = 0b00000101;	// RS=1, RW=0, E=1
     460:	88 e3       	ldi	r24, 0x38	; 56
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	25 e0       	ldi	r18, 0x05	; 5
     466:	fc 01       	movw	r30, r24
     468:	20 83       	st	Z, r18
	LCD_CS = 0b00000001;	// E=0
     46a:	88 e3       	ldi	r24, 0x38	; 56
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	21 e0       	ldi	r18, 0x01	; 1
     470:	fc 01       	movw	r30, r24
     472:	20 83       	st	Z, r18
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	a8 e4       	ldi	r26, 0x48	; 72
     47a:	b2 e4       	ldi	r27, 0x42	; 66
     47c:	89 83       	std	Y+1, r24	; 0x01
     47e:	9a 83       	std	Y+2, r25	; 0x02
     480:	ab 83       	std	Y+3, r26	; 0x03
     482:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     484:	69 81       	ldd	r22, Y+1	; 0x01
     486:	7a 81       	ldd	r23, Y+2	; 0x02
     488:	8b 81       	ldd	r24, Y+3	; 0x03
     48a:	9c 81       	ldd	r25, Y+4	; 0x04
     48c:	2b ea       	ldi	r18, 0xAB	; 171
     48e:	3a ea       	ldi	r19, 0xAA	; 170
     490:	4a e2       	ldi	r20, 0x2A	; 42
     492:	50 e4       	ldi	r21, 0x40	; 64
     494:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     498:	dc 01       	movw	r26, r24
     49a:	cb 01       	movw	r24, r22
     49c:	8d 83       	std	Y+5, r24	; 0x05
     49e:	9e 83       	std	Y+6, r25	; 0x06
     4a0:	af 83       	std	Y+7, r26	; 0x07
     4a2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     4a4:	11 e0       	ldi	r17, 0x01	; 1
     4a6:	6d 81       	ldd	r22, Y+5	; 0x05
     4a8:	7e 81       	ldd	r23, Y+6	; 0x06
     4aa:	8f 81       	ldd	r24, Y+7	; 0x07
     4ac:	98 85       	ldd	r25, Y+8	; 0x08
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	40 e8       	ldi	r20, 0x80	; 128
     4b4:	5f e3       	ldi	r21, 0x3F	; 63
     4b6:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__ltsf2>
     4ba:	88 23       	and	r24, r24
     4bc:	0c f0       	brlt	.+2      	; 0x4c0 <lcd_data+0x88>
     4be:	10 e0       	ldi	r17, 0x00	; 0
     4c0:	11 23       	and	r17, r17
     4c2:	19 f0       	breq	.+6      	; 0x4ca <lcd_data+0x92>
		__ticks = 1;
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	89 87       	std	Y+9, r24	; 0x09
     4c8:	a3 c0       	rjmp	.+326    	; 0x610 <lcd_data+0x1d8>
	else if (__tmp > 255)
     4ca:	11 e0       	ldi	r17, 0x01	; 1
     4cc:	6d 81       	ldd	r22, Y+5	; 0x05
     4ce:	7e 81       	ldd	r23, Y+6	; 0x06
     4d0:	8f 81       	ldd	r24, Y+7	; 0x07
     4d2:	98 85       	ldd	r25, Y+8	; 0x08
     4d4:	20 e0       	ldi	r18, 0x00	; 0
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	4f e7       	ldi	r20, 0x7F	; 127
     4da:	53 e4       	ldi	r21, 0x43	; 67
     4dc:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__gtsf2>
     4e0:	18 16       	cp	r1, r24
     4e2:	0c f0       	brlt	.+2      	; 0x4e6 <lcd_data+0xae>
     4e4:	10 e0       	ldi	r17, 0x00	; 0
     4e6:	11 23       	and	r17, r17
     4e8:	09 f4       	brne	.+2      	; 0x4ec <lcd_data+0xb4>
     4ea:	89 c0       	rjmp	.+274    	; 0x5fe <lcd_data+0x1c6>
	{
		_delay_ms(__us / 1000.0);
     4ec:	69 81       	ldd	r22, Y+1	; 0x01
     4ee:	7a 81       	ldd	r23, Y+2	; 0x02
     4f0:	8b 81       	ldd	r24, Y+3	; 0x03
     4f2:	9c 81       	ldd	r25, Y+4	; 0x04
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	4a e7       	ldi	r20, 0x7A	; 122
     4fa:	54 e4       	ldi	r21, 0x44	; 68
     4fc:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__divsf3>
     500:	dc 01       	movw	r26, r24
     502:	cb 01       	movw	r24, r22
     504:	8a 87       	std	Y+10, r24	; 0x0a
     506:	9b 87       	std	Y+11, r25	; 0x0b
     508:	ac 87       	std	Y+12, r26	; 0x0c
     50a:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     50c:	6a 85       	ldd	r22, Y+10	; 0x0a
     50e:	7b 85       	ldd	r23, Y+11	; 0x0b
     510:	8c 85       	ldd	r24, Y+12	; 0x0c
     512:	9d 85       	ldd	r25, Y+13	; 0x0d
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	4a ef       	ldi	r20, 0xFA	; 250
     51a:	54 e4       	ldi	r21, 0x44	; 68
     51c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     520:	dc 01       	movw	r26, r24
     522:	cb 01       	movw	r24, r22
     524:	8e 87       	std	Y+14, r24	; 0x0e
     526:	9f 87       	std	Y+15, r25	; 0x0f
     528:	a8 8b       	std	Y+16, r26	; 0x10
     52a:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     52c:	11 e0       	ldi	r17, 0x01	; 1
     52e:	6e 85       	ldd	r22, Y+14	; 0x0e
     530:	7f 85       	ldd	r23, Y+15	; 0x0f
     532:	88 89       	ldd	r24, Y+16	; 0x10
     534:	99 89       	ldd	r25, Y+17	; 0x11
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	40 e8       	ldi	r20, 0x80	; 128
     53c:	5f e3       	ldi	r21, 0x3F	; 63
     53e:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__ltsf2>
     542:	88 23       	and	r24, r24
     544:	0c f0       	brlt	.+2      	; 0x548 <lcd_data+0x110>
     546:	10 e0       	ldi	r17, 0x00	; 0
     548:	11 23       	and	r17, r17
     54a:	29 f0       	breq	.+10     	; 0x556 <lcd_data+0x11e>
		__ticks = 1;
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	9b 8b       	std	Y+19, r25	; 0x13
     552:	8a 8b       	std	Y+18, r24	; 0x12
     554:	46 c0       	rjmp	.+140    	; 0x5e2 <lcd_data+0x1aa>
	else if (__tmp > 65535)
     556:	11 e0       	ldi	r17, 0x01	; 1
     558:	6e 85       	ldd	r22, Y+14	; 0x0e
     55a:	7f 85       	ldd	r23, Y+15	; 0x0f
     55c:	88 89       	ldd	r24, Y+16	; 0x10
     55e:	99 89       	ldd	r25, Y+17	; 0x11
     560:	20 e0       	ldi	r18, 0x00	; 0
     562:	3f ef       	ldi	r19, 0xFF	; 255
     564:	4f e7       	ldi	r20, 0x7F	; 127
     566:	57 e4       	ldi	r21, 0x47	; 71
     568:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__gtsf2>
     56c:	18 16       	cp	r1, r24
     56e:	0c f0       	brlt	.+2      	; 0x572 <lcd_data+0x13a>
     570:	10 e0       	ldi	r17, 0x00	; 0
     572:	11 23       	and	r17, r17
     574:	61 f1       	breq	.+88     	; 0x5ce <lcd_data+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     576:	6a 85       	ldd	r22, Y+10	; 0x0a
     578:	7b 85       	ldd	r23, Y+11	; 0x0b
     57a:	8c 85       	ldd	r24, Y+12	; 0x0c
     57c:	9d 85       	ldd	r25, Y+13	; 0x0d
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	40 e2       	ldi	r20, 0x20	; 32
     584:	51 e4       	ldi	r21, 0x41	; 65
     586:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     58a:	dc 01       	movw	r26, r24
     58c:	cb 01       	movw	r24, r22
     58e:	bc 01       	movw	r22, r24
     590:	cd 01       	movw	r24, r26
     592:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__fixunssfsi>
     596:	dc 01       	movw	r26, r24
     598:	cb 01       	movw	r24, r22
     59a:	9b 8b       	std	Y+19, r25	; 0x13
     59c:	8a 8b       	std	Y+18, r24	; 0x12
     59e:	12 c0       	rjmp	.+36     	; 0x5c4 <lcd_data+0x18c>
     5a0:	88 ec       	ldi	r24, 0xC8	; 200
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	9d 8b       	std	Y+21, r25	; 0x15
     5a6:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5a8:	8c 89       	ldd	r24, Y+20	; 0x14
     5aa:	9d 89       	ldd	r25, Y+21	; 0x15
     5ac:	8c 01       	movw	r16, r24
     5ae:	c8 01       	movw	r24, r16
     5b0:	01 97       	sbiw	r24, 0x01	; 1
     5b2:	f1 f7       	brne	.-4      	; 0x5b0 <lcd_data+0x178>
     5b4:	8c 01       	movw	r16, r24
     5b6:	1d 8b       	std	Y+21, r17	; 0x15
     5b8:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5ba:	8a 89       	ldd	r24, Y+18	; 0x12
     5bc:	9b 89       	ldd	r25, Y+19	; 0x13
     5be:	01 97       	sbiw	r24, 0x01	; 1
     5c0:	9b 8b       	std	Y+19, r25	; 0x13
     5c2:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5c4:	8a 89       	ldd	r24, Y+18	; 0x12
     5c6:	9b 89       	ldd	r25, Y+19	; 0x13
     5c8:	00 97       	sbiw	r24, 0x00	; 0
     5ca:	51 f7       	brne	.-44     	; 0x5a0 <lcd_data+0x168>
     5cc:	28 c0       	rjmp	.+80     	; 0x61e <lcd_data+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5ce:	6e 85       	ldd	r22, Y+14	; 0x0e
     5d0:	7f 85       	ldd	r23, Y+15	; 0x0f
     5d2:	88 89       	ldd	r24, Y+16	; 0x10
     5d4:	99 89       	ldd	r25, Y+17	; 0x11
     5d6:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__fixunssfsi>
     5da:	dc 01       	movw	r26, r24
     5dc:	cb 01       	movw	r24, r22
     5de:	9b 8b       	std	Y+19, r25	; 0x13
     5e0:	8a 8b       	std	Y+18, r24	; 0x12
     5e2:	8a 89       	ldd	r24, Y+18	; 0x12
     5e4:	9b 89       	ldd	r25, Y+19	; 0x13
     5e6:	9f 8b       	std	Y+23, r25	; 0x17
     5e8:	8e 8b       	std	Y+22, r24	; 0x16
     5ea:	8e 89       	ldd	r24, Y+22	; 0x16
     5ec:	9f 89       	ldd	r25, Y+23	; 0x17
     5ee:	8c 01       	movw	r16, r24
     5f0:	f8 01       	movw	r30, r16
     5f2:	31 97       	sbiw	r30, 0x01	; 1
     5f4:	f1 f7       	brne	.-4      	; 0x5f2 <lcd_data+0x1ba>
     5f6:	8f 01       	movw	r16, r30
     5f8:	1f 8b       	std	Y+23, r17	; 0x17
     5fa:	0e 8b       	std	Y+22, r16	; 0x16
     5fc:	10 c0       	rjmp	.+32     	; 0x61e <lcd_data+0x1e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     5fe:	6d 81       	ldd	r22, Y+5	; 0x05
     600:	7e 81       	ldd	r23, Y+6	; 0x06
     602:	8f 81       	ldd	r24, Y+7	; 0x07
     604:	98 85       	ldd	r25, Y+8	; 0x08
     606:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__fixunssfsi>
     60a:	dc 01       	movw	r26, r24
     60c:	cb 01       	movw	r24, r22
     60e:	89 87       	std	Y+9, r24	; 0x09
     610:	89 85       	ldd	r24, Y+9	; 0x09
     612:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     614:	88 8d       	ldd	r24, Y+24	; 0x18
     616:	18 2f       	mov	r17, r24
     618:	1a 95       	dec	r17
     61a:	f1 f7       	brne	.-4      	; 0x618 <lcd_data+0x1e0>
     61c:	18 8f       	std	Y+24, r17	; 0x18
#endif
	_delay_us(50);	
}
     61e:	69 96       	adiw	r28, 0x19	; 25
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	de bf       	out	0x3e, r29	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	cd bf       	out	0x3d, r28	; 61
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	1f 91       	pop	r17
     630:	0f 91       	pop	r16
     632:	08 95       	ret

00000634 <lcd_string>:

void lcd_string(char* str)
{
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	00 d0       	rcall	.+0      	; 0x63a <lcd_string+0x6>
     63a:	00 d0       	rcall	.+0      	; 0x63c <lcd_string+0x8>
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
     640:	9c 83       	std	Y+4, r25	; 0x04
     642:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
     644:	1a 82       	std	Y+2, r1	; 0x02
     646:	19 82       	std	Y+1, r1	; 0x01

	while(1) {
		if(str[i]=='\0') break;
     648:	89 81       	ldd	r24, Y+1	; 0x01
     64a:	9a 81       	ldd	r25, Y+2	; 0x02
     64c:	2b 81       	ldd	r18, Y+3	; 0x03
     64e:	3c 81       	ldd	r19, Y+4	; 0x04
     650:	82 0f       	add	r24, r18
     652:	93 1f       	adc	r25, r19
     654:	fc 01       	movw	r30, r24
     656:	80 81       	ld	r24, Z
     658:	88 23       	and	r24, r24
     65a:	89 f0       	breq	.+34     	; 0x67e <lcd_string+0x4a>
		lcd_data(str[i++]);
     65c:	89 81       	ldd	r24, Y+1	; 0x01
     65e:	9a 81       	ldd	r25, Y+2	; 0x02
     660:	2b 81       	ldd	r18, Y+3	; 0x03
     662:	3c 81       	ldd	r19, Y+4	; 0x04
     664:	82 0f       	add	r24, r18
     666:	93 1f       	adc	r25, r19
     668:	fc 01       	movw	r30, r24
     66a:	20 81       	ld	r18, Z
     66c:	89 81       	ldd	r24, Y+1	; 0x01
     66e:	9a 81       	ldd	r25, Y+2	; 0x02
     670:	01 96       	adiw	r24, 0x01	; 1
     672:	9a 83       	std	Y+2, r25	; 0x02
     674:	89 83       	std	Y+1, r24	; 0x01
     676:	82 2f       	mov	r24, r18
     678:	0e 94 1c 02 	call	0x438	; 0x438 <lcd_data>
	}
     67c:	e5 cf       	rjmp	.-54     	; 0x648 <lcd_string+0x14>
void lcd_string(char* str)
{
	int i=0;

	while(1) {
		if(str[i]=='\0') break;
     67e:	00 00       	nop
		lcd_data(str[i++]);
	}
}
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	08 95       	ret

0000068e <lcd_clear>:

void lcd_clear()
{
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
	lcd_command(0b00000001);
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command>
}
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	08 95       	ret

000006a2 <lcd_cursor_home>:

void lcd_cursor_home()
{
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	cd b7       	in	r28, 0x3d	; 61
     6a8:	de b7       	in	r29, 0x3e	; 62
	lcd_command(0b00000010);
     6aa:	82 e0       	ldi	r24, 0x02	; 2
     6ac:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command>
}
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	08 95       	ret

000006b6 <lcd_entry_mode>:

void lcd_entry_mode(int ID, int S)
{
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	00 d0       	rcall	.+0      	; 0x6bc <lcd_entry_mode+0x6>
     6bc:	00 d0       	rcall	.+0      	; 0x6be <lcd_entry_mode+0x8>
     6be:	0f 92       	push	r0
     6c0:	cd b7       	in	r28, 0x3d	; 61
     6c2:	de b7       	in	r29, 0x3e	; 62
     6c4:	9b 83       	std	Y+3, r25	; 0x03
     6c6:	8a 83       	std	Y+2, r24	; 0x02
     6c8:	7d 83       	std	Y+5, r23	; 0x05
     6ca:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char cmd = 0b00000100;	
     6cc:	84 e0       	ldi	r24, 0x04	; 4
     6ce:	89 83       	std	Y+1, r24	; 0x01
	if(ID==1) cmd = cmd | 0b00000010;
     6d0:	8a 81       	ldd	r24, Y+2	; 0x02
     6d2:	9b 81       	ldd	r25, Y+3	; 0x03
     6d4:	81 30       	cpi	r24, 0x01	; 1
     6d6:	91 05       	cpc	r25, r1
     6d8:	19 f4       	brne	.+6      	; 0x6e0 <lcd_entry_mode+0x2a>
     6da:	89 81       	ldd	r24, Y+1	; 0x01
     6dc:	82 60       	ori	r24, 0x02	; 2
     6de:	89 83       	std	Y+1, r24	; 0x01
	if(S==1) cmd = cmd | 0b00000001;
     6e0:	8c 81       	ldd	r24, Y+4	; 0x04
     6e2:	9d 81       	ldd	r25, Y+5	; 0x05
     6e4:	81 30       	cpi	r24, 0x01	; 1
     6e6:	91 05       	cpc	r25, r1
     6e8:	19 f4       	brne	.+6      	; 0x6f0 <lcd_entry_mode+0x3a>
     6ea:	89 81       	ldd	r24, Y+1	; 0x01
     6ec:	81 60       	ori	r24, 0x01	; 1
     6ee:	89 83       	std	Y+1, r24	; 0x01
	// cmd = (1<<2)  | (ID<<1) | S;
	lcd_command(cmd);
     6f0:	89 81       	ldd	r24, Y+1	; 0x01
     6f2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command>
}
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	08 95       	ret

00000706 <lcd_cursordisplay_shift>:

void lcd_cursordisplay_shift(int SC, int RL)
{
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	00 d0       	rcall	.+0      	; 0x70c <lcd_cursordisplay_shift+0x6>
     70c:	00 d0       	rcall	.+0      	; 0x70e <lcd_cursordisplay_shift+0x8>
     70e:	0f 92       	push	r0
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
     714:	9b 83       	std	Y+3, r25	; 0x03
     716:	8a 83       	std	Y+2, r24	; 0x02
     718:	7d 83       	std	Y+5, r23	; 0x05
     71a:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char cmd = 0b00010000;	
     71c:	80 e1       	ldi	r24, 0x10	; 16
     71e:	89 83       	std	Y+1, r24	; 0x01
	if(SC==1) cmd = cmd | 0b00001000;
     720:	8a 81       	ldd	r24, Y+2	; 0x02
     722:	9b 81       	ldd	r25, Y+3	; 0x03
     724:	81 30       	cpi	r24, 0x01	; 1
     726:	91 05       	cpc	r25, r1
     728:	19 f4       	brne	.+6      	; 0x730 <lcd_cursordisplay_shift+0x2a>
     72a:	89 81       	ldd	r24, Y+1	; 0x01
     72c:	88 60       	ori	r24, 0x08	; 8
     72e:	89 83       	std	Y+1, r24	; 0x01
	if(RL==1) cmd = cmd | 0b00000100;
     730:	8c 81       	ldd	r24, Y+4	; 0x04
     732:	9d 81       	ldd	r25, Y+5	; 0x05
     734:	81 30       	cpi	r24, 0x01	; 1
     736:	91 05       	cpc	r25, r1
     738:	19 f4       	brne	.+6      	; 0x740 <lcd_cursordisplay_shift+0x3a>
     73a:	89 81       	ldd	r24, Y+1	; 0x01
     73c:	84 60       	ori	r24, 0x04	; 4
     73e:	89 83       	std	Y+1, r24	; 0x01
	// cmd = (1<<4)  | (SC<<3) | (RL<<2);
	lcd_command(cmd);
     740:	89 81       	ldd	r24, Y+1	; 0x01
     742:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command>
}
     746:	0f 90       	pop	r0
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	08 95       	ret

00000756 <lcd_display_position>:

void lcd_display_position(unsigned char row, unsigned char col)
{
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	00 d0       	rcall	.+0      	; 0x75c <lcd_display_position+0x6>
     75c:	0f 92       	push	r0
     75e:	cd b7       	in	r28, 0x3d	; 61
     760:	de b7       	in	r29, 0x3e	; 62
     762:	8a 83       	std	Y+2, r24	; 0x02
     764:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char cmd = 0b10000000 | ((row-1)*0x40 +(col-1));	
     766:	8a 81       	ldd	r24, Y+2	; 0x02
     768:	88 2f       	mov	r24, r24
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	01 97       	sbiw	r24, 0x01	; 1
     76e:	98 2f       	mov	r25, r24
     770:	92 95       	swap	r25
     772:	99 0f       	add	r25, r25
     774:	99 0f       	add	r25, r25
     776:	90 7c       	andi	r25, 0xC0	; 192
     778:	8b 81       	ldd	r24, Y+3	; 0x03
     77a:	89 0f       	add	r24, r25
     77c:	81 50       	subi	r24, 0x01	; 1
     77e:	80 68       	ori	r24, 0x80	; 128
     780:	89 83       	std	Y+1, r24	; 0x01
	lcd_command(cmd);
     782:	89 81       	ldd	r24, Y+1	; 0x01
     784:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command>
     788:	0f 90       	pop	r0
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	08 95       	ret

00000794 <__vector_5>:
volatile int n, yy, mm, dd, hh, min, ss, day;
unsigned char *day1[] ={"sun","mon","tue","wed","thu","fri","sat"};
volatile int sw=0;

ISR(INT4_vect)
{
     794:	1f 92       	push	r1
     796:	0f 92       	push	r0
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	0f 92       	push	r0
     79c:	11 24       	eor	r1, r1
     79e:	8f 93       	push	r24
     7a0:	9f 93       	push	r25
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
	sw = 1;
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	90 93 4b 01 	sts	0x014B, r25
     7b2:	80 93 4a 01 	sts	0x014A, r24
}
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	9f 91       	pop	r25
     7bc:	8f 91       	pop	r24
     7be:	0f 90       	pop	r0
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	0f 90       	pop	r0
     7c4:	1f 90       	pop	r1
     7c6:	18 95       	reti

000007c8 <write1>:
void write1(unsigned char addr, unsigned char data)
{
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	cd b7       	in	r28, 0x3d	; 61
     7d2:	de b7       	in	r29, 0x3e	; 62
     7d4:	60 97       	sbiw	r28, 0x10	; 16
     7d6:	0f b6       	in	r0, 0x3f	; 63
     7d8:	f8 94       	cli
     7da:	de bf       	out	0x3e, r29	; 62
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	cd bf       	out	0x3d, r28	; 61
     7e0:	8f 87       	std	Y+15, r24	; 0x0f
     7e2:	68 8b       	std	Y+16, r22	; 0x10
	TWCR = 0xa4;	//TWI 시작
     7e4:	84 e7       	ldi	r24, 0x74	; 116
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	24 ea       	ldi	r18, 0xA4	; 164
     7ea:	fc 01       	movw	r30, r24
     7ec:	20 83       	st	Z, r18
	while(!(TWCR & 0x80) || ((TWSR & 0xf8) != 0x08));
     7ee:	00 00       	nop
     7f0:	84 e7       	ldi	r24, 0x74	; 116
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	fc 01       	movw	r30, r24
     7f6:	80 81       	ld	r24, Z
     7f8:	88 23       	and	r24, r24
     7fa:	d4 f7       	brge	.-12     	; 0x7f0 <write1+0x28>
     7fc:	81 e7       	ldi	r24, 0x71	; 113
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	fc 01       	movw	r30, r24
     802:	80 81       	ld	r24, Z
     804:	88 2f       	mov	r24, r24
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	88 7f       	andi	r24, 0xF8	; 248
     80a:	90 70       	andi	r25, 0x00	; 0
     80c:	88 30       	cpi	r24, 0x08	; 8
     80e:	91 05       	cpc	r25, r1
     810:	79 f7       	brne	.-34     	; 0x7f0 <write1+0x28>
	TWDR = 0xD0;
     812:	83 e7       	ldi	r24, 0x73	; 115
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	20 ed       	ldi	r18, 0xD0	; 208
     818:	fc 01       	movw	r30, r24
     81a:	20 83       	st	Z, r18
	TWCR = 0x84;
     81c:	84 e7       	ldi	r24, 0x74	; 116
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	24 e8       	ldi	r18, 0x84	; 132
     822:	fc 01       	movw	r30, r24
     824:	20 83       	st	Z, r18
	while(!(TWCR & 0x80) || ((TWSR & 0xf8) != 0x18));
     826:	00 00       	nop
     828:	84 e7       	ldi	r24, 0x74	; 116
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	fc 01       	movw	r30, r24
     82e:	80 81       	ld	r24, Z
     830:	88 23       	and	r24, r24
     832:	d4 f7       	brge	.-12     	; 0x828 <write1+0x60>
     834:	81 e7       	ldi	r24, 0x71	; 113
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	fc 01       	movw	r30, r24
     83a:	80 81       	ld	r24, Z
     83c:	88 2f       	mov	r24, r24
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	88 7f       	andi	r24, 0xF8	; 248
     842:	90 70       	andi	r25, 0x00	; 0
     844:	88 31       	cpi	r24, 0x18	; 24
     846:	91 05       	cpc	r25, r1
     848:	79 f7       	brne	.-34     	; 0x828 <write1+0x60>
	TWDR = addr;
     84a:	83 e7       	ldi	r24, 0x73	; 115
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	2f 85       	ldd	r18, Y+15	; 0x0f
     850:	fc 01       	movw	r30, r24
     852:	20 83       	st	Z, r18
	TWCR = 0x84;
     854:	84 e7       	ldi	r24, 0x74	; 116
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	24 e8       	ldi	r18, 0x84	; 132
     85a:	fc 01       	movw	r30, r24
     85c:	20 83       	st	Z, r18
	while(!(TWCR & 0x80) || ((TWSR & 0xf8) != 0x28));
     85e:	00 00       	nop
     860:	84 e7       	ldi	r24, 0x74	; 116
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	fc 01       	movw	r30, r24
     866:	80 81       	ld	r24, Z
     868:	88 23       	and	r24, r24
     86a:	d4 f7       	brge	.-12     	; 0x860 <write1+0x98>
     86c:	81 e7       	ldi	r24, 0x71	; 113
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	fc 01       	movw	r30, r24
     872:	80 81       	ld	r24, Z
     874:	88 2f       	mov	r24, r24
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	88 7f       	andi	r24, 0xF8	; 248
     87a:	90 70       	andi	r25, 0x00	; 0
     87c:	88 32       	cpi	r24, 0x28	; 40
     87e:	91 05       	cpc	r25, r1
     880:	79 f7       	brne	.-34     	; 0x860 <write1+0x98>
	TWDR = data;	//데이터 전송
     882:	83 e7       	ldi	r24, 0x73	; 115
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	28 89       	ldd	r18, Y+16	; 0x10
     888:	fc 01       	movw	r30, r24
     88a:	20 83       	st	Z, r18
	TWCR = 0x84;
     88c:	84 e7       	ldi	r24, 0x74	; 116
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	24 e8       	ldi	r18, 0x84	; 132
     892:	fc 01       	movw	r30, r24
     894:	20 83       	st	Z, r18
	while(!(TWCR & 0x80) || ((TWSR & 0xf8) != 0x28));
     896:	00 00       	nop
     898:	84 e7       	ldi	r24, 0x74	; 116
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	fc 01       	movw	r30, r24
     89e:	80 81       	ld	r24, Z
     8a0:	88 23       	and	r24, r24
     8a2:	d4 f7       	brge	.-12     	; 0x898 <write1+0xd0>
     8a4:	81 e7       	ldi	r24, 0x71	; 113
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	fc 01       	movw	r30, r24
     8aa:	80 81       	ld	r24, Z
     8ac:	88 2f       	mov	r24, r24
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	88 7f       	andi	r24, 0xF8	; 248
     8b2:	90 70       	andi	r25, 0x00	; 0
     8b4:	88 32       	cpi	r24, 0x28	; 40
     8b6:	91 05       	cpc	r25, r1
     8b8:	79 f7       	brne	.-34     	; 0x898 <write1+0xd0>
	TWCR = 0x94;	//TWI 종료
     8ba:	84 e7       	ldi	r24, 0x74	; 116
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	24 e9       	ldi	r18, 0x94	; 148
     8c0:	fc 01       	movw	r30, r24
     8c2:	20 83       	st	Z, r18
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	a0 e2       	ldi	r26, 0x20	; 32
     8ca:	b1 e4       	ldi	r27, 0x41	; 65
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	9a 83       	std	Y+2, r25	; 0x02
     8d0:	ab 83       	std	Y+3, r26	; 0x03
     8d2:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     8d4:	69 81       	ldd	r22, Y+1	; 0x01
     8d6:	7a 81       	ldd	r23, Y+2	; 0x02
     8d8:	8b 81       	ldd	r24, Y+3	; 0x03
     8da:	9c 81       	ldd	r25, Y+4	; 0x04
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	4a ef       	ldi	r20, 0xFA	; 250
     8e2:	54 e4       	ldi	r21, 0x44	; 68
     8e4:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     8e8:	dc 01       	movw	r26, r24
     8ea:	cb 01       	movw	r24, r22
     8ec:	8d 83       	std	Y+5, r24	; 0x05
     8ee:	9e 83       	std	Y+6, r25	; 0x06
     8f0:	af 83       	std	Y+7, r26	; 0x07
     8f2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     8f4:	11 e0       	ldi	r17, 0x01	; 1
     8f6:	6d 81       	ldd	r22, Y+5	; 0x05
     8f8:	7e 81       	ldd	r23, Y+6	; 0x06
     8fa:	8f 81       	ldd	r24, Y+7	; 0x07
     8fc:	98 85       	ldd	r25, Y+8	; 0x08
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	40 e8       	ldi	r20, 0x80	; 128
     904:	5f e3       	ldi	r21, 0x3F	; 63
     906:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__ltsf2>
     90a:	88 23       	and	r24, r24
     90c:	0c f0       	brlt	.+2      	; 0x910 <write1+0x148>
     90e:	10 e0       	ldi	r17, 0x00	; 0
     910:	11 23       	and	r17, r17
     912:	29 f0       	breq	.+10     	; 0x91e <write1+0x156>
		__ticks = 1;
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	9a 87       	std	Y+10, r25	; 0x0a
     91a:	89 87       	std	Y+9, r24	; 0x09
     91c:	46 c0       	rjmp	.+140    	; 0x9aa <write1+0x1e2>
	else if (__tmp > 65535)
     91e:	11 e0       	ldi	r17, 0x01	; 1
     920:	6d 81       	ldd	r22, Y+5	; 0x05
     922:	7e 81       	ldd	r23, Y+6	; 0x06
     924:	8f 81       	ldd	r24, Y+7	; 0x07
     926:	98 85       	ldd	r25, Y+8	; 0x08
     928:	20 e0       	ldi	r18, 0x00	; 0
     92a:	3f ef       	ldi	r19, 0xFF	; 255
     92c:	4f e7       	ldi	r20, 0x7F	; 127
     92e:	57 e4       	ldi	r21, 0x47	; 71
     930:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__gtsf2>
     934:	18 16       	cp	r1, r24
     936:	0c f0       	brlt	.+2      	; 0x93a <write1+0x172>
     938:	10 e0       	ldi	r17, 0x00	; 0
     93a:	11 23       	and	r17, r17
     93c:	61 f1       	breq	.+88     	; 0x996 <write1+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     93e:	69 81       	ldd	r22, Y+1	; 0x01
     940:	7a 81       	ldd	r23, Y+2	; 0x02
     942:	8b 81       	ldd	r24, Y+3	; 0x03
     944:	9c 81       	ldd	r25, Y+4	; 0x04
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	40 e2       	ldi	r20, 0x20	; 32
     94c:	51 e4       	ldi	r21, 0x41	; 65
     94e:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     952:	dc 01       	movw	r26, r24
     954:	cb 01       	movw	r24, r22
     956:	bc 01       	movw	r22, r24
     958:	cd 01       	movw	r24, r26
     95a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__fixunssfsi>
     95e:	dc 01       	movw	r26, r24
     960:	cb 01       	movw	r24, r22
     962:	9a 87       	std	Y+10, r25	; 0x0a
     964:	89 87       	std	Y+9, r24	; 0x09
     966:	12 c0       	rjmp	.+36     	; 0x98c <write1+0x1c4>
     968:	88 ec       	ldi	r24, 0xC8	; 200
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	9c 87       	std	Y+12, r25	; 0x0c
     96e:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     970:	8b 85       	ldd	r24, Y+11	; 0x0b
     972:	9c 85       	ldd	r25, Y+12	; 0x0c
     974:	8c 01       	movw	r16, r24
     976:	c8 01       	movw	r24, r16
     978:	01 97       	sbiw	r24, 0x01	; 1
     97a:	f1 f7       	brne	.-4      	; 0x978 <write1+0x1b0>
     97c:	8c 01       	movw	r16, r24
     97e:	1c 87       	std	Y+12, r17	; 0x0c
     980:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     982:	89 85       	ldd	r24, Y+9	; 0x09
     984:	9a 85       	ldd	r25, Y+10	; 0x0a
     986:	01 97       	sbiw	r24, 0x01	; 1
     988:	9a 87       	std	Y+10, r25	; 0x0a
     98a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     98c:	89 85       	ldd	r24, Y+9	; 0x09
     98e:	9a 85       	ldd	r25, Y+10	; 0x0a
     990:	00 97       	sbiw	r24, 0x00	; 0
     992:	51 f7       	brne	.-44     	; 0x968 <write1+0x1a0>
     994:	17 c0       	rjmp	.+46     	; 0x9c4 <write1+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     996:	6d 81       	ldd	r22, Y+5	; 0x05
     998:	7e 81       	ldd	r23, Y+6	; 0x06
     99a:	8f 81       	ldd	r24, Y+7	; 0x07
     99c:	98 85       	ldd	r25, Y+8	; 0x08
     99e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__fixunssfsi>
     9a2:	dc 01       	movw	r26, r24
     9a4:	cb 01       	movw	r24, r22
     9a6:	9a 87       	std	Y+10, r25	; 0x0a
     9a8:	89 87       	std	Y+9, r24	; 0x09
     9aa:	89 85       	ldd	r24, Y+9	; 0x09
     9ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     9ae:	9e 87       	std	Y+14, r25	; 0x0e
     9b0:	8d 87       	std	Y+13, r24	; 0x0d
     9b2:	8d 85       	ldd	r24, Y+13	; 0x0d
     9b4:	9e 85       	ldd	r25, Y+14	; 0x0e
     9b6:	8c 01       	movw	r16, r24
     9b8:	f8 01       	movw	r30, r16
     9ba:	31 97       	sbiw	r30, 0x01	; 1
     9bc:	f1 f7       	brne	.-4      	; 0x9ba <write1+0x1f2>
     9be:	8f 01       	movw	r16, r30
     9c0:	1e 87       	std	Y+14, r17	; 0x0e
     9c2:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(10);
}
     9c4:	60 96       	adiw	r28, 0x10	; 16
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	f8 94       	cli
     9ca:	de bf       	out	0x3e, r29	; 62
     9cc:	0f be       	out	0x3f, r0	; 63
     9ce:	cd bf       	out	0x3d, r28	; 61
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	08 95       	ret

000009da <write>:
void write(unsigned char addr, unsigned char data)
{
     9da:	0f 93       	push	r16
     9dc:	1f 93       	push	r17
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
     9e6:	60 97       	sbiw	r28, 0x10	; 16
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	f8 94       	cli
     9ec:	de bf       	out	0x3e, r29	; 62
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	cd bf       	out	0x3d, r28	; 61
     9f2:	8f 87       	std	Y+15, r24	; 0x0f
     9f4:	68 8b       	std	Y+16, r22	; 0x10
	TWCR = 0xa4;	//TWI 시작
     9f6:	84 e7       	ldi	r24, 0x74	; 116
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	24 ea       	ldi	r18, 0xA4	; 164
     9fc:	fc 01       	movw	r30, r24
     9fe:	20 83       	st	Z, r18
	while(!(TWCR & 0x80) || ((TWSR & 0xf8) != 0x08));
     a00:	00 00       	nop
     a02:	84 e7       	ldi	r24, 0x74	; 116
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	fc 01       	movw	r30, r24
     a08:	80 81       	ld	r24, Z
     a0a:	88 23       	and	r24, r24
     a0c:	d4 f7       	brge	.-12     	; 0xa02 <write+0x28>
     a0e:	81 e7       	ldi	r24, 0x71	; 113
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	fc 01       	movw	r30, r24
     a14:	80 81       	ld	r24, Z
     a16:	88 2f       	mov	r24, r24
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	88 7f       	andi	r24, 0xF8	; 248
     a1c:	90 70       	andi	r25, 0x00	; 0
     a1e:	88 30       	cpi	r24, 0x08	; 8
     a20:	91 05       	cpc	r25, r1
     a22:	79 f7       	brne	.-34     	; 0xa02 <write+0x28>
	TWDR = 0xD0;
     a24:	83 e7       	ldi	r24, 0x73	; 115
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	20 ed       	ldi	r18, 0xD0	; 208
     a2a:	fc 01       	movw	r30, r24
     a2c:	20 83       	st	Z, r18
	TWCR = 0x84;
     a2e:	84 e7       	ldi	r24, 0x74	; 116
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	24 e8       	ldi	r18, 0x84	; 132
     a34:	fc 01       	movw	r30, r24
     a36:	20 83       	st	Z, r18
	while(!(TWCR & 0x80) || ((TWSR & 0xf8) != 0x18));
     a38:	00 00       	nop
     a3a:	84 e7       	ldi	r24, 0x74	; 116
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	fc 01       	movw	r30, r24
     a40:	80 81       	ld	r24, Z
     a42:	88 23       	and	r24, r24
     a44:	d4 f7       	brge	.-12     	; 0xa3a <write+0x60>
     a46:	81 e7       	ldi	r24, 0x71	; 113
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	fc 01       	movw	r30, r24
     a4c:	80 81       	ld	r24, Z
     a4e:	88 2f       	mov	r24, r24
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	88 7f       	andi	r24, 0xF8	; 248
     a54:	90 70       	andi	r25, 0x00	; 0
     a56:	88 31       	cpi	r24, 0x18	; 24
     a58:	91 05       	cpc	r25, r1
     a5a:	79 f7       	brne	.-34     	; 0xa3a <write+0x60>
	TWDR = addr;
     a5c:	83 e7       	ldi	r24, 0x73	; 115
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	2f 85       	ldd	r18, Y+15	; 0x0f
     a62:	fc 01       	movw	r30, r24
     a64:	20 83       	st	Z, r18
	TWCR = 0x84;
     a66:	84 e7       	ldi	r24, 0x74	; 116
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	24 e8       	ldi	r18, 0x84	; 132
     a6c:	fc 01       	movw	r30, r24
     a6e:	20 83       	st	Z, r18
	while(!(TWCR & 0x80) || ((TWSR & 0xf8) != 0x28));
     a70:	00 00       	nop
     a72:	84 e7       	ldi	r24, 0x74	; 116
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	fc 01       	movw	r30, r24
     a78:	80 81       	ld	r24, Z
     a7a:	88 23       	and	r24, r24
     a7c:	d4 f7       	brge	.-12     	; 0xa72 <write+0x98>
     a7e:	81 e7       	ldi	r24, 0x71	; 113
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	fc 01       	movw	r30, r24
     a84:	80 81       	ld	r24, Z
     a86:	88 2f       	mov	r24, r24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	88 7f       	andi	r24, 0xF8	; 248
     a8c:	90 70       	andi	r25, 0x00	; 0
     a8e:	88 32       	cpi	r24, 0x28	; 40
     a90:	91 05       	cpc	r25, r1
     a92:	79 f7       	brne	.-34     	; 0xa72 <write+0x98>
	TWDR = data;	//데이터 전송
     a94:	83 e7       	ldi	r24, 0x73	; 115
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	28 89       	ldd	r18, Y+16	; 0x10
     a9a:	fc 01       	movw	r30, r24
     a9c:	20 83       	st	Z, r18
	TWCR = 0x84;
     a9e:	84 e7       	ldi	r24, 0x74	; 116
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	24 e8       	ldi	r18, 0x84	; 132
     aa4:	fc 01       	movw	r30, r24
     aa6:	20 83       	st	Z, r18
	while(!(TWCR & 0x80) || ((TWSR & 0xf8) != 0x28));
     aa8:	00 00       	nop
     aaa:	84 e7       	ldi	r24, 0x74	; 116
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	fc 01       	movw	r30, r24
     ab0:	80 81       	ld	r24, Z
     ab2:	88 23       	and	r24, r24
     ab4:	d4 f7       	brge	.-12     	; 0xaaa <write+0xd0>
     ab6:	81 e7       	ldi	r24, 0x71	; 113
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	fc 01       	movw	r30, r24
     abc:	80 81       	ld	r24, Z
     abe:	88 2f       	mov	r24, r24
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	88 7f       	andi	r24, 0xF8	; 248
     ac4:	90 70       	andi	r25, 0x00	; 0
     ac6:	88 32       	cpi	r24, 0x28	; 40
     ac8:	91 05       	cpc	r25, r1
     aca:	79 f7       	brne	.-34     	; 0xaaa <write+0xd0>
	TWCR = 0x94;	//TWI 종료
     acc:	84 e7       	ldi	r24, 0x74	; 116
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	24 e9       	ldi	r18, 0x94	; 148
     ad2:	fc 01       	movw	r30, r24
     ad4:	20 83       	st	Z, r18
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	a0 e2       	ldi	r26, 0x20	; 32
     adc:	b1 e4       	ldi	r27, 0x41	; 65
     ade:	89 83       	std	Y+1, r24	; 0x01
     ae0:	9a 83       	std	Y+2, r25	; 0x02
     ae2:	ab 83       	std	Y+3, r26	; 0x03
     ae4:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     ae6:	69 81       	ldd	r22, Y+1	; 0x01
     ae8:	7a 81       	ldd	r23, Y+2	; 0x02
     aea:	8b 81       	ldd	r24, Y+3	; 0x03
     aec:	9c 81       	ldd	r25, Y+4	; 0x04
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	4a ef       	ldi	r20, 0xFA	; 250
     af4:	54 e4       	ldi	r21, 0x44	; 68
     af6:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     afa:	dc 01       	movw	r26, r24
     afc:	cb 01       	movw	r24, r22
     afe:	8d 83       	std	Y+5, r24	; 0x05
     b00:	9e 83       	std	Y+6, r25	; 0x06
     b02:	af 83       	std	Y+7, r26	; 0x07
     b04:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     b06:	11 e0       	ldi	r17, 0x01	; 1
     b08:	6d 81       	ldd	r22, Y+5	; 0x05
     b0a:	7e 81       	ldd	r23, Y+6	; 0x06
     b0c:	8f 81       	ldd	r24, Y+7	; 0x07
     b0e:	98 85       	ldd	r25, Y+8	; 0x08
     b10:	20 e0       	ldi	r18, 0x00	; 0
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	40 e8       	ldi	r20, 0x80	; 128
     b16:	5f e3       	ldi	r21, 0x3F	; 63
     b18:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__ltsf2>
     b1c:	88 23       	and	r24, r24
     b1e:	0c f0       	brlt	.+2      	; 0xb22 <write+0x148>
     b20:	10 e0       	ldi	r17, 0x00	; 0
     b22:	11 23       	and	r17, r17
     b24:	29 f0       	breq	.+10     	; 0xb30 <write+0x156>
		__ticks = 1;
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	9a 87       	std	Y+10, r25	; 0x0a
     b2c:	89 87       	std	Y+9, r24	; 0x09
     b2e:	46 c0       	rjmp	.+140    	; 0xbbc <write+0x1e2>
	else if (__tmp > 65535)
     b30:	11 e0       	ldi	r17, 0x01	; 1
     b32:	6d 81       	ldd	r22, Y+5	; 0x05
     b34:	7e 81       	ldd	r23, Y+6	; 0x06
     b36:	8f 81       	ldd	r24, Y+7	; 0x07
     b38:	98 85       	ldd	r25, Y+8	; 0x08
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	3f ef       	ldi	r19, 0xFF	; 255
     b3e:	4f e7       	ldi	r20, 0x7F	; 127
     b40:	57 e4       	ldi	r21, 0x47	; 71
     b42:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__gtsf2>
     b46:	18 16       	cp	r1, r24
     b48:	0c f0       	brlt	.+2      	; 0xb4c <write+0x172>
     b4a:	10 e0       	ldi	r17, 0x00	; 0
     b4c:	11 23       	and	r17, r17
     b4e:	61 f1       	breq	.+88     	; 0xba8 <write+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b50:	69 81       	ldd	r22, Y+1	; 0x01
     b52:	7a 81       	ldd	r23, Y+2	; 0x02
     b54:	8b 81       	ldd	r24, Y+3	; 0x03
     b56:	9c 81       	ldd	r25, Y+4	; 0x04
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	40 e2       	ldi	r20, 0x20	; 32
     b5e:	51 e4       	ldi	r21, 0x41	; 65
     b60:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     b64:	dc 01       	movw	r26, r24
     b66:	cb 01       	movw	r24, r22
     b68:	bc 01       	movw	r22, r24
     b6a:	cd 01       	movw	r24, r26
     b6c:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__fixunssfsi>
     b70:	dc 01       	movw	r26, r24
     b72:	cb 01       	movw	r24, r22
     b74:	9a 87       	std	Y+10, r25	; 0x0a
     b76:	89 87       	std	Y+9, r24	; 0x09
     b78:	12 c0       	rjmp	.+36     	; 0xb9e <write+0x1c4>
     b7a:	88 ec       	ldi	r24, 0xC8	; 200
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	9c 87       	std	Y+12, r25	; 0x0c
     b80:	8b 87       	std	Y+11, r24	; 0x0b
     b82:	8b 85       	ldd	r24, Y+11	; 0x0b
     b84:	9c 85       	ldd	r25, Y+12	; 0x0c
     b86:	8c 01       	movw	r16, r24
     b88:	c8 01       	movw	r24, r16
     b8a:	01 97       	sbiw	r24, 0x01	; 1
     b8c:	f1 f7       	brne	.-4      	; 0xb8a <write+0x1b0>
     b8e:	8c 01       	movw	r16, r24
     b90:	1c 87       	std	Y+12, r17	; 0x0c
     b92:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b94:	89 85       	ldd	r24, Y+9	; 0x09
     b96:	9a 85       	ldd	r25, Y+10	; 0x0a
     b98:	01 97       	sbiw	r24, 0x01	; 1
     b9a:	9a 87       	std	Y+10, r25	; 0x0a
     b9c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b9e:	89 85       	ldd	r24, Y+9	; 0x09
     ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba2:	00 97       	sbiw	r24, 0x00	; 0
     ba4:	51 f7       	brne	.-44     	; 0xb7a <write+0x1a0>
     ba6:	17 c0       	rjmp	.+46     	; 0xbd6 <write+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ba8:	6d 81       	ldd	r22, Y+5	; 0x05
     baa:	7e 81       	ldd	r23, Y+6	; 0x06
     bac:	8f 81       	ldd	r24, Y+7	; 0x07
     bae:	98 85       	ldd	r25, Y+8	; 0x08
     bb0:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__fixunssfsi>
     bb4:	dc 01       	movw	r26, r24
     bb6:	cb 01       	movw	r24, r22
     bb8:	9a 87       	std	Y+10, r25	; 0x0a
     bba:	89 87       	std	Y+9, r24	; 0x09
     bbc:	89 85       	ldd	r24, Y+9	; 0x09
     bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc0:	9e 87       	std	Y+14, r25	; 0x0e
     bc2:	8d 87       	std	Y+13, r24	; 0x0d
     bc4:	8d 85       	ldd	r24, Y+13	; 0x0d
     bc6:	9e 85       	ldd	r25, Y+14	; 0x0e
     bc8:	8c 01       	movw	r16, r24
     bca:	f8 01       	movw	r30, r16
     bcc:	31 97       	sbiw	r30, 0x01	; 1
     bce:	f1 f7       	brne	.-4      	; 0xbcc <write+0x1f2>
     bd0:	8f 01       	movw	r16, r30
     bd2:	1e 87       	std	Y+14, r17	; 0x0e
     bd4:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(10);
}
     bd6:	60 96       	adiw	r28, 0x10	; 16
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	f8 94       	cli
     bdc:	de bf       	out	0x3e, r29	; 62
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	cd bf       	out	0x3d, r28	; 61
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	1f 91       	pop	r17
     be8:	0f 91       	pop	r16
     bea:	08 95       	ret

00000bec <read>:

unsigned char read(unsigned char addr)
{
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	60 97       	sbiw	r28, 0x10	; 16
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	f8 94       	cli
     bfe:	de bf       	out	0x3e, r29	; 62
     c00:	0f be       	out	0x3f, r0	; 63
     c02:	cd bf       	out	0x3d, r28	; 61
     c04:	88 8b       	std	Y+16, r24	; 0x10
	unsigned char data;

	TWCR = 0xa4;
     c06:	84 e7       	ldi	r24, 0x74	; 116
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	24 ea       	ldi	r18, 0xA4	; 164
     c0c:	fc 01       	movw	r30, r24
     c0e:	20 83       	st	Z, r18
	while(!(TWCR & 0x80) || ((TWSR & 0xf8) != 0x08));
     c10:	00 00       	nop
     c12:	84 e7       	ldi	r24, 0x74	; 116
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	fc 01       	movw	r30, r24
     c18:	80 81       	ld	r24, Z
     c1a:	88 23       	and	r24, r24
     c1c:	d4 f7       	brge	.-12     	; 0xc12 <read+0x26>
     c1e:	81 e7       	ldi	r24, 0x71	; 113
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	fc 01       	movw	r30, r24
     c24:	80 81       	ld	r24, Z
     c26:	88 2f       	mov	r24, r24
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	88 7f       	andi	r24, 0xF8	; 248
     c2c:	90 70       	andi	r25, 0x00	; 0
     c2e:	88 30       	cpi	r24, 0x08	; 8
     c30:	91 05       	cpc	r25, r1
     c32:	79 f7       	brne	.-34     	; 0xc12 <read+0x26>
	TWDR = 0xD0;
     c34:	83 e7       	ldi	r24, 0x73	; 115
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	20 ed       	ldi	r18, 0xD0	; 208
     c3a:	fc 01       	movw	r30, r24
     c3c:	20 83       	st	Z, r18
	TWCR = 0x84;
     c3e:	84 e7       	ldi	r24, 0x74	; 116
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	24 e8       	ldi	r18, 0x84	; 132
     c44:	fc 01       	movw	r30, r24
     c46:	20 83       	st	Z, r18
	while(!(TWCR & 0x80) || ((TWSR & 0xf8) != 0x18));
     c48:	00 00       	nop
     c4a:	84 e7       	ldi	r24, 0x74	; 116
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	fc 01       	movw	r30, r24
     c50:	80 81       	ld	r24, Z
     c52:	88 23       	and	r24, r24
     c54:	d4 f7       	brge	.-12     	; 0xc4a <read+0x5e>
     c56:	81 e7       	ldi	r24, 0x71	; 113
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	fc 01       	movw	r30, r24
     c5c:	80 81       	ld	r24, Z
     c5e:	88 2f       	mov	r24, r24
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	88 7f       	andi	r24, 0xF8	; 248
     c64:	90 70       	andi	r25, 0x00	; 0
     c66:	88 31       	cpi	r24, 0x18	; 24
     c68:	91 05       	cpc	r25, r1
     c6a:	79 f7       	brne	.-34     	; 0xc4a <read+0x5e>
	TWDR = addr;
     c6c:	83 e7       	ldi	r24, 0x73	; 115
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	28 89       	ldd	r18, Y+16	; 0x10
     c72:	fc 01       	movw	r30, r24
     c74:	20 83       	st	Z, r18
	TWCR = 0x84;
     c76:	84 e7       	ldi	r24, 0x74	; 116
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	24 e8       	ldi	r18, 0x84	; 132
     c7c:	fc 01       	movw	r30, r24
     c7e:	20 83       	st	Z, r18
	while(!(TWCR & 0x80) || ((TWSR & 0xf8) != 0x28));
     c80:	00 00       	nop
     c82:	84 e7       	ldi	r24, 0x74	; 116
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	fc 01       	movw	r30, r24
     c88:	80 81       	ld	r24, Z
     c8a:	88 23       	and	r24, r24
     c8c:	d4 f7       	brge	.-12     	; 0xc82 <read+0x96>
     c8e:	81 e7       	ldi	r24, 0x71	; 113
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	fc 01       	movw	r30, r24
     c94:	80 81       	ld	r24, Z
     c96:	88 2f       	mov	r24, r24
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	88 7f       	andi	r24, 0xF8	; 248
     c9c:	90 70       	andi	r25, 0x00	; 0
     c9e:	88 32       	cpi	r24, 0x28	; 40
     ca0:	91 05       	cpc	r25, r1
     ca2:	79 f7       	brne	.-34     	; 0xc82 <read+0x96>
	TWCR = 0xa4;
     ca4:	84 e7       	ldi	r24, 0x74	; 116
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	24 ea       	ldi	r18, 0xA4	; 164
     caa:	fc 01       	movw	r30, r24
     cac:	20 83       	st	Z, r18
	while(!(TWCR & 0x80) || ((TWSR & 0xf8) != 0x10));
     cae:	00 00       	nop
     cb0:	84 e7       	ldi	r24, 0x74	; 116
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	fc 01       	movw	r30, r24
     cb6:	80 81       	ld	r24, Z
     cb8:	88 23       	and	r24, r24
     cba:	d4 f7       	brge	.-12     	; 0xcb0 <read+0xc4>
     cbc:	81 e7       	ldi	r24, 0x71	; 113
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	fc 01       	movw	r30, r24
     cc2:	80 81       	ld	r24, Z
     cc4:	88 2f       	mov	r24, r24
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	88 7f       	andi	r24, 0xF8	; 248
     cca:	90 70       	andi	r25, 0x00	; 0
     ccc:	80 31       	cpi	r24, 0x10	; 16
     cce:	91 05       	cpc	r25, r1
     cd0:	79 f7       	brne	.-34     	; 0xcb0 <read+0xc4>
	TWDR = 0xD1;
     cd2:	83 e7       	ldi	r24, 0x73	; 115
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	21 ed       	ldi	r18, 0xD1	; 209
     cd8:	fc 01       	movw	r30, r24
     cda:	20 83       	st	Z, r18
	TWCR = 0x84;
     cdc:	84 e7       	ldi	r24, 0x74	; 116
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	24 e8       	ldi	r18, 0x84	; 132
     ce2:	fc 01       	movw	r30, r24
     ce4:	20 83       	st	Z, r18
	while(!(TWCR & 0x80) || ((TWSR & 0xf8) != 0x40));
     ce6:	00 00       	nop
     ce8:	84 e7       	ldi	r24, 0x74	; 116
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	fc 01       	movw	r30, r24
     cee:	80 81       	ld	r24, Z
     cf0:	88 23       	and	r24, r24
     cf2:	d4 f7       	brge	.-12     	; 0xce8 <read+0xfc>
     cf4:	81 e7       	ldi	r24, 0x71	; 113
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	fc 01       	movw	r30, r24
     cfa:	80 81       	ld	r24, Z
     cfc:	88 2f       	mov	r24, r24
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	88 7f       	andi	r24, 0xF8	; 248
     d02:	90 70       	andi	r25, 0x00	; 0
     d04:	80 34       	cpi	r24, 0x40	; 64
     d06:	91 05       	cpc	r25, r1
     d08:	79 f7       	brne	.-34     	; 0xce8 <read+0xfc>
	TWCR = 0x84;
     d0a:	84 e7       	ldi	r24, 0x74	; 116
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	24 e8       	ldi	r18, 0x84	; 132
     d10:	fc 01       	movw	r30, r24
     d12:	20 83       	st	Z, r18
	while(!(TWCR & 0x80) || ((TWSR & 0xf8) != 0x58));
     d14:	00 00       	nop
     d16:	84 e7       	ldi	r24, 0x74	; 116
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	fc 01       	movw	r30, r24
     d1c:	80 81       	ld	r24, Z
     d1e:	88 23       	and	r24, r24
     d20:	d4 f7       	brge	.-12     	; 0xd16 <read+0x12a>
     d22:	81 e7       	ldi	r24, 0x71	; 113
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	fc 01       	movw	r30, r24
     d28:	80 81       	ld	r24, Z
     d2a:	88 2f       	mov	r24, r24
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	88 7f       	andi	r24, 0xF8	; 248
     d30:	90 70       	andi	r25, 0x00	; 0
     d32:	88 35       	cpi	r24, 0x58	; 88
     d34:	91 05       	cpc	r25, r1
     d36:	79 f7       	brne	.-34     	; 0xd16 <read+0x12a>
	data = TWDR;
     d38:	83 e7       	ldi	r24, 0x73	; 115
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	fc 01       	movw	r30, r24
     d3e:	80 81       	ld	r24, Z
     d40:	89 83       	std	Y+1, r24	; 0x01

	TWCR = 0x94;
     d42:	84 e7       	ldi	r24, 0x74	; 116
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	24 e9       	ldi	r18, 0x94	; 148
     d48:	fc 01       	movw	r30, r24
     d4a:	20 83       	st	Z, r18
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	a0 e2       	ldi	r26, 0x20	; 32
     d52:	b1 e4       	ldi	r27, 0x41	; 65
     d54:	8a 83       	std	Y+2, r24	; 0x02
     d56:	9b 83       	std	Y+3, r25	; 0x03
     d58:	ac 83       	std	Y+4, r26	; 0x04
     d5a:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     d5c:	6a 81       	ldd	r22, Y+2	; 0x02
     d5e:	7b 81       	ldd	r23, Y+3	; 0x03
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	4a ef       	ldi	r20, 0xFA	; 250
     d6a:	54 e4       	ldi	r21, 0x44	; 68
     d6c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     d70:	dc 01       	movw	r26, r24
     d72:	cb 01       	movw	r24, r22
     d74:	8e 83       	std	Y+6, r24	; 0x06
     d76:	9f 83       	std	Y+7, r25	; 0x07
     d78:	a8 87       	std	Y+8, r26	; 0x08
     d7a:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     d7c:	11 e0       	ldi	r17, 0x01	; 1
     d7e:	6e 81       	ldd	r22, Y+6	; 0x06
     d80:	7f 81       	ldd	r23, Y+7	; 0x07
     d82:	88 85       	ldd	r24, Y+8	; 0x08
     d84:	99 85       	ldd	r25, Y+9	; 0x09
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	40 e8       	ldi	r20, 0x80	; 128
     d8c:	5f e3       	ldi	r21, 0x3F	; 63
     d8e:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__ltsf2>
     d92:	88 23       	and	r24, r24
     d94:	0c f0       	brlt	.+2      	; 0xd98 <read+0x1ac>
     d96:	10 e0       	ldi	r17, 0x00	; 0
     d98:	11 23       	and	r17, r17
     d9a:	29 f0       	breq	.+10     	; 0xda6 <read+0x1ba>
		__ticks = 1;
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	9b 87       	std	Y+11, r25	; 0x0b
     da2:	8a 87       	std	Y+10, r24	; 0x0a
     da4:	46 c0       	rjmp	.+140    	; 0xe32 <read+0x246>
	else if (__tmp > 65535)
     da6:	11 e0       	ldi	r17, 0x01	; 1
     da8:	6e 81       	ldd	r22, Y+6	; 0x06
     daa:	7f 81       	ldd	r23, Y+7	; 0x07
     dac:	88 85       	ldd	r24, Y+8	; 0x08
     dae:	99 85       	ldd	r25, Y+9	; 0x09
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	3f ef       	ldi	r19, 0xFF	; 255
     db4:	4f e7       	ldi	r20, 0x7F	; 127
     db6:	57 e4       	ldi	r21, 0x47	; 71
     db8:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__gtsf2>
     dbc:	18 16       	cp	r1, r24
     dbe:	0c f0       	brlt	.+2      	; 0xdc2 <read+0x1d6>
     dc0:	10 e0       	ldi	r17, 0x00	; 0
     dc2:	11 23       	and	r17, r17
     dc4:	61 f1       	breq	.+88     	; 0xe1e <read+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dc6:	6a 81       	ldd	r22, Y+2	; 0x02
     dc8:	7b 81       	ldd	r23, Y+3	; 0x03
     dca:	8c 81       	ldd	r24, Y+4	; 0x04
     dcc:	9d 81       	ldd	r25, Y+5	; 0x05
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	40 e2       	ldi	r20, 0x20	; 32
     dd4:	51 e4       	ldi	r21, 0x41	; 65
     dd6:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     dda:	dc 01       	movw	r26, r24
     ddc:	cb 01       	movw	r24, r22
     dde:	bc 01       	movw	r22, r24
     de0:	cd 01       	movw	r24, r26
     de2:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__fixunssfsi>
     de6:	dc 01       	movw	r26, r24
     de8:	cb 01       	movw	r24, r22
     dea:	9b 87       	std	Y+11, r25	; 0x0b
     dec:	8a 87       	std	Y+10, r24	; 0x0a
     dee:	12 c0       	rjmp	.+36     	; 0xe14 <read+0x228>
     df0:	88 ec       	ldi	r24, 0xC8	; 200
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	9d 87       	std	Y+13, r25	; 0x0d
     df6:	8c 87       	std	Y+12, r24	; 0x0c
     df8:	8c 85       	ldd	r24, Y+12	; 0x0c
     dfa:	9d 85       	ldd	r25, Y+13	; 0x0d
     dfc:	8c 01       	movw	r16, r24
     dfe:	c8 01       	movw	r24, r16
     e00:	01 97       	sbiw	r24, 0x01	; 1
     e02:	f1 f7       	brne	.-4      	; 0xe00 <read+0x214>
     e04:	8c 01       	movw	r16, r24
     e06:	1d 87       	std	Y+13, r17	; 0x0d
     e08:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e0a:	8a 85       	ldd	r24, Y+10	; 0x0a
     e0c:	9b 85       	ldd	r25, Y+11	; 0x0b
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	9b 87       	std	Y+11, r25	; 0x0b
     e12:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e14:	8a 85       	ldd	r24, Y+10	; 0x0a
     e16:	9b 85       	ldd	r25, Y+11	; 0x0b
     e18:	00 97       	sbiw	r24, 0x00	; 0
     e1a:	51 f7       	brne	.-44     	; 0xdf0 <read+0x204>
     e1c:	17 c0       	rjmp	.+46     	; 0xe4c <read+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e1e:	6e 81       	ldd	r22, Y+6	; 0x06
     e20:	7f 81       	ldd	r23, Y+7	; 0x07
     e22:	88 85       	ldd	r24, Y+8	; 0x08
     e24:	99 85       	ldd	r25, Y+9	; 0x09
     e26:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__fixunssfsi>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	9b 87       	std	Y+11, r25	; 0x0b
     e30:	8a 87       	std	Y+10, r24	; 0x0a
     e32:	8a 85       	ldd	r24, Y+10	; 0x0a
     e34:	9b 85       	ldd	r25, Y+11	; 0x0b
     e36:	9f 87       	std	Y+15, r25	; 0x0f
     e38:	8e 87       	std	Y+14, r24	; 0x0e
     e3a:	8e 85       	ldd	r24, Y+14	; 0x0e
     e3c:	9f 85       	ldd	r25, Y+15	; 0x0f
     e3e:	8c 01       	movw	r16, r24
     e40:	f8 01       	movw	r30, r16
     e42:	31 97       	sbiw	r30, 0x01	; 1
     e44:	f1 f7       	brne	.-4      	; 0xe42 <read+0x256>
     e46:	8f 01       	movw	r16, r30
     e48:	1f 87       	std	Y+15, r17	; 0x0f
     e4a:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(10);

	return data;
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e4e:	60 96       	adiw	r28, 0x10	; 16
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	cd bf       	out	0x3d, r28	; 61
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	08 95       	ret

00000e64 <SetTime>:
void SetTime(unsigned char *buf)
{
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	00 d0       	rcall	.+0      	; 0xe6a <SetTime+0x6>
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <SetTime+0x8>
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	9c 83       	std	Y+4, r25	; 0x04
     e72:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0; i<8; i++){
     e74:	1a 82       	std	Y+2, r1	; 0x02
     e76:	19 82       	std	Y+1, r1	; 0x01
     e78:	12 c0       	rjmp	.+36     	; 0xe9e <SetTime+0x3a>
	write(i,buf[i]);
     e7a:	49 81       	ldd	r20, Y+1	; 0x01
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	9a 81       	ldd	r25, Y+2	; 0x02
     e80:	2b 81       	ldd	r18, Y+3	; 0x03
     e82:	3c 81       	ldd	r19, Y+4	; 0x04
     e84:	82 0f       	add	r24, r18
     e86:	93 1f       	adc	r25, r19
     e88:	fc 01       	movw	r30, r24
     e8a:	90 81       	ld	r25, Z
     e8c:	84 2f       	mov	r24, r20
     e8e:	69 2f       	mov	r22, r25
     e90:	0e 94 ed 04 	call	0x9da	; 0x9da <write>
	return data;
}
void SetTime(unsigned char *buf)
{
	int i;
	for(i=0; i<8; i++){
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	9a 81       	ldd	r25, Y+2	; 0x02
     e98:	01 96       	adiw	r24, 0x01	; 1
     e9a:	9a 83       	std	Y+2, r25	; 0x02
     e9c:	89 83       	std	Y+1, r24	; 0x01
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	9a 81       	ldd	r25, Y+2	; 0x02
     ea2:	88 30       	cpi	r24, 0x08	; 8
     ea4:	91 05       	cpc	r25, r1
     ea6:	4c f3       	brlt	.-46     	; 0xe7a <SetTime+0x16>
	write(i,buf[i]);
	
	}
}
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	08 95       	ret

00000eb6 <ReadTime>:

unsigned char ReadTime(unsigned char i)
{
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	0f 92       	push	r0
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	89 83       	std	Y+1, r24	; 0x01
	return read(i);
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	0e 94 f6 05 	call	0xbec	; 0xbec <read>
}
     ec8:	0f 90       	pop	r0
     eca:	df 91       	pop	r29
     ecc:	cf 91       	pop	r28
     ece:	08 95       	ret

00000ed0 <Clock_read>:

void Clock_read()
{
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	00 d0       	rcall	.+0      	; 0xed6 <Clock_read+0x6>
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
	int i;
	for(i=0; i<7; i++){
     eda:	1a 82       	std	Y+2, r1	; 0x02
     edc:	19 82       	std	Y+1, r1	; 0x01
     ede:	0f c0       	rjmp	.+30     	; 0xefe <Clock_read+0x2e>
		tbuf[i]=read(i);
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	0e 94 f6 05 	call	0xbec	; 0xbec <read>
     ee6:	28 2f       	mov	r18, r24
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	9a 81       	ldd	r25, Y+2	; 0x02
     eec:	84 5a       	subi	r24, 0xA4	; 164
     eee:	9e 4f       	sbci	r25, 0xFE	; 254
     ef0:	fc 01       	movw	r30, r24
     ef2:	20 83       	st	Z, r18
}

void Clock_read()
{
	int i;
	for(i=0; i<7; i++){
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	9a 81       	ldd	r25, Y+2	; 0x02
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	9a 83       	std	Y+2, r25	; 0x02
     efc:	89 83       	std	Y+1, r24	; 0x01
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	9a 81       	ldd	r25, Y+2	; 0x02
     f02:	87 30       	cpi	r24, 0x07	; 7
     f04:	91 05       	cpc	r25, r1
     f06:	64 f3       	brlt	.-40     	; 0xee0 <Clock_read+0x10>
		tbuf[i]=read(i);
	}
	
	ss = (tbuf[0]>> 4)*10 + (tbuf[0] & 0x0F) ;
     f08:	80 91 5c 01 	lds	r24, 0x015C
     f0c:	82 95       	swap	r24
     f0e:	8f 70       	andi	r24, 0x0F	; 15
     f10:	88 2f       	mov	r24, r24
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	9c 01       	movw	r18, r24
     f1a:	22 0f       	add	r18, r18
     f1c:	33 1f       	adc	r19, r19
     f1e:	22 0f       	add	r18, r18
     f20:	33 1f       	adc	r19, r19
     f22:	28 0f       	add	r18, r24
     f24:	39 1f       	adc	r19, r25
     f26:	80 91 5c 01 	lds	r24, 0x015C
     f2a:	88 2f       	mov	r24, r24
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	8f 70       	andi	r24, 0x0F	; 15
     f30:	90 70       	andi	r25, 0x00	; 0
     f32:	82 0f       	add	r24, r18
     f34:	93 1f       	adc	r25, r19
     f36:	90 93 51 01 	sts	0x0151, r25
     f3a:	80 93 50 01 	sts	0x0150, r24
	min = (tbuf[1]>> 4)*10 + (tbuf[1] & 0x0F);
     f3e:	80 91 5d 01 	lds	r24, 0x015D
     f42:	82 95       	swap	r24
     f44:	8f 70       	andi	r24, 0x0F	; 15
     f46:	88 2f       	mov	r24, r24
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	9c 01       	movw	r18, r24
     f50:	22 0f       	add	r18, r18
     f52:	33 1f       	adc	r19, r19
     f54:	22 0f       	add	r18, r18
     f56:	33 1f       	adc	r19, r19
     f58:	28 0f       	add	r18, r24
     f5a:	39 1f       	adc	r19, r25
     f5c:	80 91 5d 01 	lds	r24, 0x015D
     f60:	88 2f       	mov	r24, r24
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	8f 70       	andi	r24, 0x0F	; 15
     f66:	90 70       	andi	r25, 0x00	; 0
     f68:	82 0f       	add	r24, r18
     f6a:	93 1f       	adc	r25, r19
     f6c:	90 93 55 01 	sts	0x0155, r25
     f70:	80 93 54 01 	sts	0x0154, r24
	hh = (tbuf[2]>> 4)*10 + (tbuf[2] & 0x0F);
     f74:	80 91 5e 01 	lds	r24, 0x015E
     f78:	82 95       	swap	r24
     f7a:	8f 70       	andi	r24, 0x0F	; 15
     f7c:	88 2f       	mov	r24, r24
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	9c 01       	movw	r18, r24
     f86:	22 0f       	add	r18, r18
     f88:	33 1f       	adc	r19, r19
     f8a:	22 0f       	add	r18, r18
     f8c:	33 1f       	adc	r19, r19
     f8e:	28 0f       	add	r18, r24
     f90:	39 1f       	adc	r19, r25
     f92:	80 91 5e 01 	lds	r24, 0x015E
     f96:	88 2f       	mov	r24, r24
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	8f 70       	andi	r24, 0x0F	; 15
     f9c:	90 70       	andi	r25, 0x00	; 0
     f9e:	82 0f       	add	r24, r18
     fa0:	93 1f       	adc	r25, r19
     fa2:	90 93 5b 01 	sts	0x015B, r25
     fa6:	80 93 5a 01 	sts	0x015A, r24
	day = day1[tbuf[3]];
     faa:	80 91 5f 01 	lds	r24, 0x015F
     fae:	88 2f       	mov	r24, r24
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	84 5e       	subi	r24, 0xE4	; 228
     fb8:	9e 4f       	sbci	r25, 0xFE	; 254
     fba:	fc 01       	movw	r30, r24
     fbc:	80 81       	ld	r24, Z
     fbe:	91 81       	ldd	r25, Z+1	; 0x01
     fc0:	90 93 59 01 	sts	0x0159, r25
     fc4:	80 93 58 01 	sts	0x0158, r24
	dd = (tbuf[4]>> 4)*10 + (tbuf[4] & 0x0F) ;
     fc8:	80 91 60 01 	lds	r24, 0x0160
     fcc:	82 95       	swap	r24
     fce:	8f 70       	andi	r24, 0x0F	; 15
     fd0:	88 2f       	mov	r24, r24
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	9c 01       	movw	r18, r24
     fda:	22 0f       	add	r18, r18
     fdc:	33 1f       	adc	r19, r19
     fde:	22 0f       	add	r18, r18
     fe0:	33 1f       	adc	r19, r19
     fe2:	28 0f       	add	r18, r24
     fe4:	39 1f       	adc	r19, r25
     fe6:	80 91 60 01 	lds	r24, 0x0160
     fea:	88 2f       	mov	r24, r24
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	8f 70       	andi	r24, 0x0F	; 15
     ff0:	90 70       	andi	r25, 0x00	; 0
     ff2:	82 0f       	add	r24, r18
     ff4:	93 1f       	adc	r25, r19
     ff6:	90 93 53 01 	sts	0x0153, r25
     ffa:	80 93 52 01 	sts	0x0152, r24
	mm = (tbuf[5]>> 4)*10 + (tbuf[5] & 0x0F) ;
     ffe:	80 91 61 01 	lds	r24, 0x0161
    1002:	82 95       	swap	r24
    1004:	8f 70       	andi	r24, 0x0F	; 15
    1006:	88 2f       	mov	r24, r24
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	9c 01       	movw	r18, r24
    1010:	22 0f       	add	r18, r18
    1012:	33 1f       	adc	r19, r19
    1014:	22 0f       	add	r18, r18
    1016:	33 1f       	adc	r19, r19
    1018:	28 0f       	add	r18, r24
    101a:	39 1f       	adc	r19, r25
    101c:	80 91 61 01 	lds	r24, 0x0161
    1020:	88 2f       	mov	r24, r24
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	8f 70       	andi	r24, 0x0F	; 15
    1026:	90 70       	andi	r25, 0x00	; 0
    1028:	82 0f       	add	r24, r18
    102a:	93 1f       	adc	r25, r19
    102c:	90 93 4d 01 	sts	0x014D, r25
    1030:	80 93 4c 01 	sts	0x014C, r24
	yy = (tbuf[6]>> 4)*10 + (tbuf[6] & 0x0F) ;
    1034:	80 91 62 01 	lds	r24, 0x0162
    1038:	82 95       	swap	r24
    103a:	8f 70       	andi	r24, 0x0F	; 15
    103c:	88 2f       	mov	r24, r24
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	9c 01       	movw	r18, r24
    1046:	22 0f       	add	r18, r18
    1048:	33 1f       	adc	r19, r19
    104a:	22 0f       	add	r18, r18
    104c:	33 1f       	adc	r19, r19
    104e:	28 0f       	add	r18, r24
    1050:	39 1f       	adc	r19, r25
    1052:	80 91 62 01 	lds	r24, 0x0162
    1056:	88 2f       	mov	r24, r24
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	8f 70       	andi	r24, 0x0F	; 15
    105c:	90 70       	andi	r25, 0x00	; 0
    105e:	82 0f       	add	r24, r18
    1060:	93 1f       	adc	r25, r19
    1062:	90 93 57 01 	sts	0x0157, r25
    1066:	80 93 56 01 	sts	0x0156, r24
}
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	08 95       	ret

00001074 <Clock_set>:

void Clock_set(int yy, int mm, int dd, int day, int hh, int min, int ss)
{
    1074:	cf 92       	push	r12
    1076:	df 92       	push	r13
    1078:	ef 92       	push	r14
    107a:	ff 92       	push	r15
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	2e 97       	sbiw	r28, 0x0e	; 14
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	f8 94       	cli
    108e:	de bf       	out	0x3e, r29	; 62
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	cd bf       	out	0x3d, r28	; 61
    1094:	9a 83       	std	Y+2, r25	; 0x02
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	7c 83       	std	Y+4, r23	; 0x04
    109a:	6b 83       	std	Y+3, r22	; 0x03
    109c:	5e 83       	std	Y+6, r21	; 0x06
    109e:	4d 83       	std	Y+5, r20	; 0x05
    10a0:	38 87       	std	Y+8, r19	; 0x08
    10a2:	2f 83       	std	Y+7, r18	; 0x07
    10a4:	1a 87       	std	Y+10, r17	; 0x0a
    10a6:	09 87       	std	Y+9, r16	; 0x09
    10a8:	fc 86       	std	Y+12, r15	; 0x0c
    10aa:	eb 86       	std	Y+11, r14	; 0x0b
    10ac:	de 86       	std	Y+14, r13	; 0x0e
    10ae:	cd 86       	std	Y+13, r12	; 0x0d
	tbuf[0] = (ss/10) << 4 | (ss%10);
    10b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    10b4:	2a e0       	ldi	r18, 0x0A	; 10
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	b9 01       	movw	r22, r18
    10ba:	0e 94 8a 10 	call	0x2114	; 0x2114 <__divmodhi4>
    10be:	9b 01       	movw	r18, r22
    10c0:	c9 01       	movw	r24, r18
    10c2:	82 95       	swap	r24
    10c4:	92 95       	swap	r25
    10c6:	90 7f       	andi	r25, 0xF0	; 240
    10c8:	98 27       	eor	r25, r24
    10ca:	80 7f       	andi	r24, 0xF0	; 240
    10cc:	98 27       	eor	r25, r24
    10ce:	48 2f       	mov	r20, r24
    10d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    10d4:	2a e0       	ldi	r18, 0x0A	; 10
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	b9 01       	movw	r22, r18
    10da:	0e 94 8a 10 	call	0x2114	; 0x2114 <__divmodhi4>
    10de:	84 2b       	or	r24, r20
    10e0:	80 93 5c 01 	sts	0x015C, r24
	tbuf[1] = (min/10) << 4 | (min%10);
    10e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    10e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    10e8:	2a e0       	ldi	r18, 0x0A	; 10
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	b9 01       	movw	r22, r18
    10ee:	0e 94 8a 10 	call	0x2114	; 0x2114 <__divmodhi4>
    10f2:	9b 01       	movw	r18, r22
    10f4:	c9 01       	movw	r24, r18
    10f6:	82 95       	swap	r24
    10f8:	92 95       	swap	r25
    10fa:	90 7f       	andi	r25, 0xF0	; 240
    10fc:	98 27       	eor	r25, r24
    10fe:	80 7f       	andi	r24, 0xF0	; 240
    1100:	98 27       	eor	r25, r24
    1102:	48 2f       	mov	r20, r24
    1104:	8b 85       	ldd	r24, Y+11	; 0x0b
    1106:	9c 85       	ldd	r25, Y+12	; 0x0c
    1108:	2a e0       	ldi	r18, 0x0A	; 10
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	b9 01       	movw	r22, r18
    110e:	0e 94 8a 10 	call	0x2114	; 0x2114 <__divmodhi4>
    1112:	84 2b       	or	r24, r20
    1114:	80 93 5d 01 	sts	0x015D, r24
	tbuf[2] = (hh/10) << 4 | (hh%10);
    1118:	89 85       	ldd	r24, Y+9	; 0x09
    111a:	9a 85       	ldd	r25, Y+10	; 0x0a
    111c:	2a e0       	ldi	r18, 0x0A	; 10
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	b9 01       	movw	r22, r18
    1122:	0e 94 8a 10 	call	0x2114	; 0x2114 <__divmodhi4>
    1126:	9b 01       	movw	r18, r22
    1128:	c9 01       	movw	r24, r18
    112a:	82 95       	swap	r24
    112c:	92 95       	swap	r25
    112e:	90 7f       	andi	r25, 0xF0	; 240
    1130:	98 27       	eor	r25, r24
    1132:	80 7f       	andi	r24, 0xF0	; 240
    1134:	98 27       	eor	r25, r24
    1136:	48 2f       	mov	r20, r24
    1138:	89 85       	ldd	r24, Y+9	; 0x09
    113a:	9a 85       	ldd	r25, Y+10	; 0x0a
    113c:	2a e0       	ldi	r18, 0x0A	; 10
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	b9 01       	movw	r22, r18
    1142:	0e 94 8a 10 	call	0x2114	; 0x2114 <__divmodhi4>
    1146:	84 2b       	or	r24, r20
    1148:	80 93 5e 01 	sts	0x015E, r24
	tbuf[3] = day;
    114c:	8f 81       	ldd	r24, Y+7	; 0x07
    114e:	80 93 5f 01 	sts	0x015F, r24
	tbuf[4] = (dd/10) << 4 | (dd%10);
    1152:	8d 81       	ldd	r24, Y+5	; 0x05
    1154:	9e 81       	ldd	r25, Y+6	; 0x06
    1156:	2a e0       	ldi	r18, 0x0A	; 10
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	b9 01       	movw	r22, r18
    115c:	0e 94 8a 10 	call	0x2114	; 0x2114 <__divmodhi4>
    1160:	9b 01       	movw	r18, r22
    1162:	c9 01       	movw	r24, r18
    1164:	82 95       	swap	r24
    1166:	92 95       	swap	r25
    1168:	90 7f       	andi	r25, 0xF0	; 240
    116a:	98 27       	eor	r25, r24
    116c:	80 7f       	andi	r24, 0xF0	; 240
    116e:	98 27       	eor	r25, r24
    1170:	48 2f       	mov	r20, r24
    1172:	8d 81       	ldd	r24, Y+5	; 0x05
    1174:	9e 81       	ldd	r25, Y+6	; 0x06
    1176:	2a e0       	ldi	r18, 0x0A	; 10
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	b9 01       	movw	r22, r18
    117c:	0e 94 8a 10 	call	0x2114	; 0x2114 <__divmodhi4>
    1180:	84 2b       	or	r24, r20
    1182:	80 93 60 01 	sts	0x0160, r24
	tbuf[5] = (mm/10) << 4 | (mm%10);
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	9c 81       	ldd	r25, Y+4	; 0x04
    118a:	2a e0       	ldi	r18, 0x0A	; 10
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	b9 01       	movw	r22, r18
    1190:	0e 94 8a 10 	call	0x2114	; 0x2114 <__divmodhi4>
    1194:	9b 01       	movw	r18, r22
    1196:	c9 01       	movw	r24, r18
    1198:	82 95       	swap	r24
    119a:	92 95       	swap	r25
    119c:	90 7f       	andi	r25, 0xF0	; 240
    119e:	98 27       	eor	r25, r24
    11a0:	80 7f       	andi	r24, 0xF0	; 240
    11a2:	98 27       	eor	r25, r24
    11a4:	48 2f       	mov	r20, r24
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	9c 81       	ldd	r25, Y+4	; 0x04
    11aa:	2a e0       	ldi	r18, 0x0A	; 10
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	b9 01       	movw	r22, r18
    11b0:	0e 94 8a 10 	call	0x2114	; 0x2114 <__divmodhi4>
    11b4:	84 2b       	or	r24, r20
    11b6:	80 93 61 01 	sts	0x0161, r24
	tbuf[6] = (yy/10) << 4 | (yy%10);
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	9a 81       	ldd	r25, Y+2	; 0x02
    11be:	2a e0       	ldi	r18, 0x0A	; 10
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	b9 01       	movw	r22, r18
    11c4:	0e 94 8a 10 	call	0x2114	; 0x2114 <__divmodhi4>
    11c8:	9b 01       	movw	r18, r22
    11ca:	c9 01       	movw	r24, r18
    11cc:	82 95       	swap	r24
    11ce:	92 95       	swap	r25
    11d0:	90 7f       	andi	r25, 0xF0	; 240
    11d2:	98 27       	eor	r25, r24
    11d4:	80 7f       	andi	r24, 0xF0	; 240
    11d6:	98 27       	eor	r25, r24
    11d8:	48 2f       	mov	r20, r24
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	9a 81       	ldd	r25, Y+2	; 0x02
    11de:	2a e0       	ldi	r18, 0x0A	; 10
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	b9 01       	movw	r22, r18
    11e4:	0e 94 8a 10 	call	0x2114	; 0x2114 <__divmodhi4>
    11e8:	84 2b       	or	r24, r20
    11ea:	80 93 62 01 	sts	0x0162, r24
	//tbuf[7] = h12h24;
	SetTime(tbuf);
    11ee:	8c e5       	ldi	r24, 0x5C	; 92
    11f0:	91 e0       	ldi	r25, 0x01	; 1
    11f2:	0e 94 32 07 	call	0xe64	; 0xe64 <SetTime>
}
    11f6:	2e 96       	adiw	r28, 0x0e	; 14
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	ff 90       	pop	r15
    120c:	ef 90       	pop	r14
    120e:	df 90       	pop	r13
    1210:	cf 90       	pop	r12
    1212:	08 95       	ret

00001214 <main>:
int main(void)
{
    1214:	cf 92       	push	r12
    1216:	df 92       	push	r13
    1218:	ef 92       	push	r14
    121a:	ff 92       	push	r15
    121c:	0f 93       	push	r16
    121e:	1f 93       	push	r17
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	e8 97       	sbiw	r28, 0x38	; 56
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
	char msg[20],msg1[20];

		lcd_init();
    1234:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_init>
		
		DDRE = 0x00;
    1238:	82 e2       	ldi	r24, 0x22	; 34
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	dc 01       	movw	r26, r24
    123e:	1c 92       	st	X, r1
		PORTE = 0x10;
    1240:	83 e2       	ldi	r24, 0x23	; 35
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	20 e1       	ldi	r18, 0x10	; 16
    1246:	fc 01       	movw	r30, r24
    1248:	20 83       	st	Z, r18
		SREG = 0x80;
    124a:	8f e5       	ldi	r24, 0x5F	; 95
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	20 e8       	ldi	r18, 0x80	; 128
    1250:	dc 01       	movw	r26, r24
    1252:	2c 93       	st	X, r18
		EIMSK = 0b00010000;
    1254:	89 e5       	ldi	r24, 0x59	; 89
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	20 e1       	ldi	r18, 0x10	; 16
    125a:	fc 01       	movw	r30, r24
    125c:	20 83       	st	Z, r18
		EICRB = 0b00000010;
    125e:	8a e5       	ldi	r24, 0x5A	; 90
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	22 e0       	ldi	r18, 0x02	; 2
    1264:	dc 01       	movw	r26, r24
    1266:	2c 93       	st	X, r18
		TWBR = 2;
    1268:	80 e7       	ldi	r24, 0x70	; 112
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	22 e0       	ldi	r18, 0x02	; 2
    126e:	fc 01       	movw	r30, r24
    1270:	20 83       	st	Z, r18
		TWSR = 0x00;
    1272:	81 e7       	ldi	r24, 0x71	; 113
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	dc 01       	movw	r26, r24
    1278:	1c 92       	st	X, r1
	Clock_set(20, 7, 10, 5, 02, 38, 20);
    127a:	84 e1       	ldi	r24, 0x14	; 20
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	67 e0       	ldi	r22, 0x07	; 7
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	4a e0       	ldi	r20, 0x0A	; 10
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	25 e0       	ldi	r18, 0x05	; 5
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	02 e0       	ldi	r16, 0x02	; 2
    128c:	10 e0       	ldi	r17, 0x00	; 0
    128e:	0f 2e       	mov	r0, r31
    1290:	f6 e2       	ldi	r31, 0x26	; 38
    1292:	ef 2e       	mov	r14, r31
    1294:	ff 24       	eor	r15, r15
    1296:	f0 2d       	mov	r31, r0
    1298:	0f 2e       	mov	r0, r31
    129a:	f4 e1       	ldi	r31, 0x14	; 20
    129c:	cf 2e       	mov	r12, r31
    129e:	dd 24       	eor	r13, r13
    12a0:	f0 2d       	mov	r31, r0
    12a2:	0e 94 3a 08 	call	0x1074	; 0x1074 <Clock_set>
    12a6:	01 c0       	rjmp	.+2      	; 0x12aa <main+0x96>
		lcd_display_position(2,1);
		sprintf(msg1,"%d:%d:%d", hh, min,ss);
		lcd_string(msg1);
		sw=0;
	}
}
    12a8:	00 00       	nop
		TWSR = 0x00;
	Clock_set(20, 7, 10, 5, 02, 38, 20);

		//lcd_display_clear();
	while(1){
		if(sw == 1){
    12aa:	80 91 4a 01 	lds	r24, 0x014A
    12ae:	90 91 4b 01 	lds	r25, 0x014B
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	91 05       	cpc	r25, r1
    12b6:	c1 f7       	brne	.-16     	; 0x12a8 <main+0x94>
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	aa e7       	ldi	r26, 0x7A	; 122
    12be:	b4 e4       	ldi	r27, 0x44	; 68
    12c0:	89 83       	std	Y+1, r24	; 0x01
    12c2:	9a 83       	std	Y+2, r25	; 0x02
    12c4:	ab 83       	std	Y+3, r26	; 0x03
    12c6:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    12c8:	69 81       	ldd	r22, Y+1	; 0x01
    12ca:	7a 81       	ldd	r23, Y+2	; 0x02
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	4a ef       	ldi	r20, 0xFA	; 250
    12d6:	54 e4       	ldi	r21, 0x44	; 68
    12d8:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	8d 83       	std	Y+5, r24	; 0x05
    12e2:	9e 83       	std	Y+6, r25	; 0x06
    12e4:	af 83       	std	Y+7, r26	; 0x07
    12e6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    12e8:	11 e0       	ldi	r17, 0x01	; 1
    12ea:	6d 81       	ldd	r22, Y+5	; 0x05
    12ec:	7e 81       	ldd	r23, Y+6	; 0x06
    12ee:	8f 81       	ldd	r24, Y+7	; 0x07
    12f0:	98 85       	ldd	r25, Y+8	; 0x08
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	40 e8       	ldi	r20, 0x80	; 128
    12f8:	5f e3       	ldi	r21, 0x3F	; 63
    12fa:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__ltsf2>
    12fe:	88 23       	and	r24, r24
    1300:	0c f0       	brlt	.+2      	; 0x1304 <main+0xf0>
    1302:	10 e0       	ldi	r17, 0x00	; 0
    1304:	11 23       	and	r17, r17
    1306:	29 f0       	breq	.+10     	; 0x1312 <main+0xfe>
		__ticks = 1;
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	9a 87       	std	Y+10, r25	; 0x0a
    130e:	89 87       	std	Y+9, r24	; 0x09
    1310:	46 c0       	rjmp	.+140    	; 0x139e <main+0x18a>
	else if (__tmp > 65535)
    1312:	11 e0       	ldi	r17, 0x01	; 1
    1314:	6d 81       	ldd	r22, Y+5	; 0x05
    1316:	7e 81       	ldd	r23, Y+6	; 0x06
    1318:	8f 81       	ldd	r24, Y+7	; 0x07
    131a:	98 85       	ldd	r25, Y+8	; 0x08
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	3f ef       	ldi	r19, 0xFF	; 255
    1320:	4f e7       	ldi	r20, 0x7F	; 127
    1322:	57 e4       	ldi	r21, 0x47	; 71
    1324:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__gtsf2>
    1328:	18 16       	cp	r1, r24
    132a:	0c f0       	brlt	.+2      	; 0x132e <main+0x11a>
    132c:	10 e0       	ldi	r17, 0x00	; 0
    132e:	11 23       	and	r17, r17
    1330:	61 f1       	breq	.+88     	; 0x138a <main+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1332:	69 81       	ldd	r22, Y+1	; 0x01
    1334:	7a 81       	ldd	r23, Y+2	; 0x02
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	9c 81       	ldd	r25, Y+4	; 0x04
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	40 e2       	ldi	r20, 0x20	; 32
    1340:	51 e4       	ldi	r21, 0x41	; 65
    1342:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	bc 01       	movw	r22, r24
    134c:	cd 01       	movw	r24, r26
    134e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__fixunssfsi>
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	9a 87       	std	Y+10, r25	; 0x0a
    1358:	89 87       	std	Y+9, r24	; 0x09
    135a:	12 c0       	rjmp	.+36     	; 0x1380 <main+0x16c>
    135c:	88 ec       	ldi	r24, 0xC8	; 200
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	9c 87       	std	Y+12, r25	; 0x0c
    1362:	8b 87       	std	Y+11, r24	; 0x0b
    1364:	8b 85       	ldd	r24, Y+11	; 0x0b
    1366:	9c 85       	ldd	r25, Y+12	; 0x0c
    1368:	8c 01       	movw	r16, r24
    136a:	f8 01       	movw	r30, r16
    136c:	31 97       	sbiw	r30, 0x01	; 1
    136e:	f1 f7       	brne	.-4      	; 0x136c <main+0x158>
    1370:	8f 01       	movw	r16, r30
    1372:	1c 87       	std	Y+12, r17	; 0x0c
    1374:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1376:	89 85       	ldd	r24, Y+9	; 0x09
    1378:	9a 85       	ldd	r25, Y+10	; 0x0a
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	9a 87       	std	Y+10, r25	; 0x0a
    137e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1380:	89 85       	ldd	r24, Y+9	; 0x09
    1382:	9a 85       	ldd	r25, Y+10	; 0x0a
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	51 f7       	brne	.-44     	; 0x135c <main+0x148>
    1388:	17 c0       	rjmp	.+46     	; 0x13b8 <main+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    138a:	6d 81       	ldd	r22, Y+5	; 0x05
    138c:	7e 81       	ldd	r23, Y+6	; 0x06
    138e:	8f 81       	ldd	r24, Y+7	; 0x07
    1390:	98 85       	ldd	r25, Y+8	; 0x08
    1392:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__fixunssfsi>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	9a 87       	std	Y+10, r25	; 0x0a
    139c:	89 87       	std	Y+9, r24	; 0x09
    139e:	89 85       	ldd	r24, Y+9	; 0x09
    13a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a2:	9e 87       	std	Y+14, r25	; 0x0e
    13a4:	8d 87       	std	Y+13, r24	; 0x0d
    13a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13aa:	8c 01       	movw	r16, r24
    13ac:	c8 01       	movw	r24, r16
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <main+0x19a>
    13b2:	8c 01       	movw	r16, r24
    13b4:	1e 87       	std	Y+14, r17	; 0x0e
    13b6:	0d 87       	std	Y+13, r16	; 0x0d
		_delay_ms(1000);
		Clock_read();
    13b8:	0e 94 68 07 	call	0xed0	; 0xed0 <Clock_read>
		lcd_display_position(1,1);
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	61 e0       	ldi	r22, 0x01	; 1
    13c0:	0e 94 ab 03 	call	0x756	; 0x756 <lcd_display_position>
		sprintf(msg,"20%d  %d/%d %s", yy, mm,dd,day);
    13c4:	a0 91 56 01 	lds	r26, 0x0156
    13c8:	b0 91 57 01 	lds	r27, 0x0157
    13cc:	b8 af       	sts	0x78, r27
    13ce:	af ab       	sts	0x5f, r26
    13d0:	60 91 4c 01 	lds	r22, 0x014C
    13d4:	70 91 4d 01 	lds	r23, 0x014D
    13d8:	40 91 52 01 	lds	r20, 0x0152
    13dc:	50 91 53 01 	lds	r21, 0x0153
    13e0:	20 91 58 01 	lds	r18, 0x0158
    13e4:	30 91 59 01 	lds	r19, 0x0159
    13e8:	ed b7       	in	r30, 0x3d	; 61
    13ea:	fe b7       	in	r31, 0x3e	; 62
    13ec:	3c 97       	sbiw	r30, 0x0c	; 12
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	fe bf       	out	0x3e, r31	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	ed bf       	out	0x3d, r30	; 61
    13f8:	8d b7       	in	r24, 0x3d	; 61
    13fa:	9e b7       	in	r25, 0x3e	; 62
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	de 01       	movw	r26, r28
    1400:	1f 96       	adiw	r26, 0x0f	; 15
    1402:	fc 01       	movw	r30, r24
    1404:	b1 83       	std	Z+1, r27	; 0x01
    1406:	a0 83       	st	Z, r26
    1408:	aa e2       	ldi	r26, 0x2A	; 42
    140a:	b1 e0       	ldi	r27, 0x01	; 1
    140c:	fc 01       	movw	r30, r24
    140e:	b3 83       	std	Z+3, r27	; 0x03
    1410:	a2 83       	std	Z+2, r26	; 0x02
    1412:	ef a9       	sts	0x4f, r30
    1414:	f8 ad       	sts	0x68, r31
    1416:	dc 01       	movw	r26, r24
    1418:	15 96       	adiw	r26, 0x05	; 5
    141a:	fc 93       	st	X, r31
    141c:	ee 93       	st	-X, r30
    141e:	14 97       	sbiw	r26, 0x04	; 4
    1420:	dc 01       	movw	r26, r24
    1422:	17 96       	adiw	r26, 0x07	; 7
    1424:	7c 93       	st	X, r23
    1426:	6e 93       	st	-X, r22
    1428:	16 97       	sbiw	r26, 0x06	; 6
    142a:	fc 01       	movw	r30, r24
    142c:	51 87       	std	Z+9, r21	; 0x09
    142e:	40 87       	std	Z+8, r20	; 0x08
    1430:	dc 01       	movw	r26, r24
    1432:	1b 96       	adiw	r26, 0x0b	; 11
    1434:	3c 93       	st	X, r19
    1436:	2e 93       	st	-X, r18
    1438:	1a 97       	sbiw	r26, 0x0a	; 10
    143a:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <sprintf>
    143e:	ed b7       	in	r30, 0x3d	; 61
    1440:	fe b7       	in	r31, 0x3e	; 62
    1442:	3c 96       	adiw	r30, 0x0c	; 12
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	fe bf       	out	0x3e, r31	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	ed bf       	out	0x3d, r30	; 61
		lcd_string(msg);
    144e:	ce 01       	movw	r24, r28
    1450:	0f 96       	adiw	r24, 0x0f	; 15
    1452:	0e 94 1a 03 	call	0x634	; 0x634 <lcd_string>
		lcd_display_position(2,1);
    1456:	82 e0       	ldi	r24, 0x02	; 2
    1458:	61 e0       	ldi	r22, 0x01	; 1
    145a:	0e 94 ab 03 	call	0x756	; 0x756 <lcd_display_position>
		sprintf(msg1,"%d:%d:%d", hh, min,ss);
    145e:	60 91 5a 01 	lds	r22, 0x015A
    1462:	70 91 5b 01 	lds	r23, 0x015B
    1466:	40 91 54 01 	lds	r20, 0x0154
    146a:	50 91 55 01 	lds	r21, 0x0155
    146e:	20 91 50 01 	lds	r18, 0x0150
    1472:	30 91 51 01 	lds	r19, 0x0151
    1476:	8d b7       	in	r24, 0x3d	; 61
    1478:	9e b7       	in	r25, 0x3e	; 62
    147a:	0a 97       	sbiw	r24, 0x0a	; 10
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	f8 94       	cli
    1480:	9e bf       	out	0x3e, r25	; 62
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	8d bf       	out	0x3d, r24	; 61
    1486:	8d b7       	in	r24, 0x3d	; 61
    1488:	9e b7       	in	r25, 0x3e	; 62
    148a:	01 96       	adiw	r24, 0x01	; 1
    148c:	fe 01       	movw	r30, r28
    148e:	b3 96       	adiw	r30, 0x23	; 35
    1490:	dc 01       	movw	r26, r24
    1492:	ed 93       	st	X+, r30
    1494:	fc 93       	st	X, r31
    1496:	e9 e3       	ldi	r30, 0x39	; 57
    1498:	f1 e0       	ldi	r31, 0x01	; 1
    149a:	dc 01       	movw	r26, r24
    149c:	13 96       	adiw	r26, 0x03	; 3
    149e:	fc 93       	st	X, r31
    14a0:	ee 93       	st	-X, r30
    14a2:	12 97       	sbiw	r26, 0x02	; 2
    14a4:	fc 01       	movw	r30, r24
    14a6:	75 83       	std	Z+5, r23	; 0x05
    14a8:	64 83       	std	Z+4, r22	; 0x04
    14aa:	dc 01       	movw	r26, r24
    14ac:	17 96       	adiw	r26, 0x07	; 7
    14ae:	5c 93       	st	X, r21
    14b0:	4e 93       	st	-X, r20
    14b2:	16 97       	sbiw	r26, 0x06	; 6
    14b4:	fc 01       	movw	r30, r24
    14b6:	31 87       	std	Z+9, r19	; 0x09
    14b8:	20 87       	std	Z+8, r18	; 0x08
    14ba:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <sprintf>
    14be:	8d b7       	in	r24, 0x3d	; 61
    14c0:	9e b7       	in	r25, 0x3e	; 62
    14c2:	0a 96       	adiw	r24, 0x0a	; 10
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	9e bf       	out	0x3e, r25	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	8d bf       	out	0x3d, r24	; 61
		lcd_string(msg1);
    14ce:	ce 01       	movw	r24, r28
    14d0:	83 96       	adiw	r24, 0x23	; 35
    14d2:	0e 94 1a 03 	call	0x634	; 0x634 <lcd_string>
		sw=0;
    14d6:	10 92 4b 01 	sts	0x014B, r1
    14da:	10 92 4a 01 	sts	0x014A, r1
	}
}
    14de:	e4 ce       	rjmp	.-568    	; 0x12a8 <main+0x94>

000014e0 <__fixunssfsi>:
    14e0:	cf 92       	push	r12
    14e2:	df 92       	push	r13
    14e4:	ef 92       	push	r14
    14e6:	ff 92       	push	r15
    14e8:	0f 93       	push	r16
    14ea:	1f 93       	push	r17
    14ec:	6b 01       	movw	r12, r22
    14ee:	7c 01       	movw	r14, r24
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	40 e0       	ldi	r20, 0x00	; 0
    14f6:	5f e4       	ldi	r21, 0x4F	; 79
    14f8:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__gesf2>
    14fc:	87 fd       	sbrc	r24, 7
    14fe:	11 c0       	rjmp	.+34     	; 0x1522 <__fixunssfsi+0x42>
    1500:	c7 01       	movw	r24, r14
    1502:	b6 01       	movw	r22, r12
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	40 e0       	ldi	r20, 0x00	; 0
    150a:	5f e4       	ldi	r21, 0x4F	; 79
    150c:	0e 94 25 0c 	call	0x184a	; 0x184a <__subsf3>
    1510:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__fixsfsi>
    1514:	8b 01       	movw	r16, r22
    1516:	9c 01       	movw	r18, r24
    1518:	00 50       	subi	r16, 0x00	; 0
    151a:	10 40       	sbci	r17, 0x00	; 0
    151c:	20 40       	sbci	r18, 0x00	; 0
    151e:	30 48       	sbci	r19, 0x80	; 128
    1520:	06 c0       	rjmp	.+12     	; 0x152e <__fixunssfsi+0x4e>
    1522:	c7 01       	movw	r24, r14
    1524:	b6 01       	movw	r22, r12
    1526:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__fixsfsi>
    152a:	8b 01       	movw	r16, r22
    152c:	9c 01       	movw	r18, r24
    152e:	b8 01       	movw	r22, r16
    1530:	c9 01       	movw	r24, r18
    1532:	1f 91       	pop	r17
    1534:	0f 91       	pop	r16
    1536:	ff 90       	pop	r15
    1538:	ef 90       	pop	r14
    153a:	df 90       	pop	r13
    153c:	cf 90       	pop	r12
    153e:	08 95       	ret

00001540 <_fpadd_parts>:
    1540:	a0 e0       	ldi	r26, 0x00	; 0
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	e6 ea       	ldi	r30, 0xA6	; 166
    1546:	fa e0       	ldi	r31, 0x0A	; 10
    1548:	0c 94 b3 10 	jmp	0x2166	; 0x2166 <__prologue_saves__+0x4>
    154c:	ec 01       	movw	r28, r24
    154e:	4b 01       	movw	r8, r22
    1550:	fa 01       	movw	r30, r20
    1552:	88 81       	ld	r24, Y
    1554:	82 30       	cpi	r24, 0x02	; 2
    1556:	08 f4       	brcc	.+2      	; 0x155a <_fpadd_parts+0x1a>
    1558:	3e c1       	rjmp	.+636    	; 0x17d6 <_fpadd_parts+0x296>
    155a:	db 01       	movw	r26, r22
    155c:	9c 91       	ld	r25, X
    155e:	92 30       	cpi	r25, 0x02	; 2
    1560:	08 f4       	brcc	.+2      	; 0x1564 <_fpadd_parts+0x24>
    1562:	36 c1       	rjmp	.+620    	; 0x17d0 <_fpadd_parts+0x290>
    1564:	84 30       	cpi	r24, 0x04	; 4
    1566:	59 f4       	brne	.+22     	; 0x157e <_fpadd_parts+0x3e>
    1568:	94 30       	cpi	r25, 0x04	; 4
    156a:	09 f0       	breq	.+2      	; 0x156e <_fpadd_parts+0x2e>
    156c:	34 c1       	rjmp	.+616    	; 0x17d6 <_fpadd_parts+0x296>
    156e:	99 81       	ldd	r25, Y+1	; 0x01
    1570:	11 96       	adiw	r26, 0x01	; 1
    1572:	8c 91       	ld	r24, X
    1574:	11 97       	sbiw	r26, 0x01	; 1
    1576:	98 17       	cp	r25, r24
    1578:	09 f0       	breq	.+2      	; 0x157c <_fpadd_parts+0x3c>
    157a:	27 c1       	rjmp	.+590    	; 0x17ca <_fpadd_parts+0x28a>
    157c:	2c c1       	rjmp	.+600    	; 0x17d6 <_fpadd_parts+0x296>
    157e:	94 30       	cpi	r25, 0x04	; 4
    1580:	09 f4       	brne	.+2      	; 0x1584 <_fpadd_parts+0x44>
    1582:	26 c1       	rjmp	.+588    	; 0x17d0 <_fpadd_parts+0x290>
    1584:	92 30       	cpi	r25, 0x02	; 2
    1586:	a9 f4       	brne	.+42     	; 0x15b2 <_fpadd_parts+0x72>
    1588:	82 30       	cpi	r24, 0x02	; 2
    158a:	09 f0       	breq	.+2      	; 0x158e <_fpadd_parts+0x4e>
    158c:	24 c1       	rjmp	.+584    	; 0x17d6 <_fpadd_parts+0x296>
    158e:	ce 01       	movw	r24, r28
    1590:	28 e0       	ldi	r18, 0x08	; 8
    1592:	dc 01       	movw	r26, r24
    1594:	0d 90       	ld	r0, X+
    1596:	cd 01       	movw	r24, r26
    1598:	da 01       	movw	r26, r20
    159a:	0d 92       	st	X+, r0
    159c:	ad 01       	movw	r20, r26
    159e:	21 50       	subi	r18, 0x01	; 1
    15a0:	c1 f7       	brne	.-16     	; 0x1592 <_fpadd_parts+0x52>
    15a2:	d4 01       	movw	r26, r8
    15a4:	11 96       	adiw	r26, 0x01	; 1
    15a6:	8c 91       	ld	r24, X
    15a8:	11 97       	sbiw	r26, 0x01	; 1
    15aa:	99 81       	ldd	r25, Y+1	; 0x01
    15ac:	89 23       	and	r24, r25
    15ae:	81 83       	std	Z+1, r24	; 0x01
    15b0:	11 c1       	rjmp	.+546    	; 0x17d4 <_fpadd_parts+0x294>
    15b2:	82 30       	cpi	r24, 0x02	; 2
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <_fpadd_parts+0x78>
    15b6:	0c c1       	rjmp	.+536    	; 0x17d0 <_fpadd_parts+0x290>
    15b8:	aa 80       	ldd	r10, Y+2	; 0x02
    15ba:	bb 80       	ldd	r11, Y+3	; 0x03
    15bc:	db 01       	movw	r26, r22
    15be:	12 96       	adiw	r26, 0x02	; 2
    15c0:	4d 91       	ld	r20, X+
    15c2:	5c 91       	ld	r21, X
    15c4:	13 97       	sbiw	r26, 0x03	; 3
    15c6:	cc 80       	ldd	r12, Y+4	; 0x04
    15c8:	dd 80       	ldd	r13, Y+5	; 0x05
    15ca:	ee 80       	ldd	r14, Y+6	; 0x06
    15cc:	ff 80       	ldd	r15, Y+7	; 0x07
    15ce:	14 96       	adiw	r26, 0x04	; 4
    15d0:	0d 91       	ld	r16, X+
    15d2:	1d 91       	ld	r17, X+
    15d4:	2d 91       	ld	r18, X+
    15d6:	3c 91       	ld	r19, X
    15d8:	17 97       	sbiw	r26, 0x07	; 7
    15da:	c5 01       	movw	r24, r10
    15dc:	84 1b       	sub	r24, r20
    15de:	95 0b       	sbc	r25, r21
    15e0:	dc 01       	movw	r26, r24
    15e2:	97 ff       	sbrs	r25, 7
    15e4:	04 c0       	rjmp	.+8      	; 0x15ee <_fpadd_parts+0xae>
    15e6:	aa 27       	eor	r26, r26
    15e8:	bb 27       	eor	r27, r27
    15ea:	a8 1b       	sub	r26, r24
    15ec:	b9 0b       	sbc	r27, r25
    15ee:	a0 32       	cpi	r26, 0x20	; 32
    15f0:	b1 05       	cpc	r27, r1
    15f2:	0c f0       	brlt	.+2      	; 0x15f6 <_fpadd_parts+0xb6>
    15f4:	67 c0       	rjmp	.+206    	; 0x16c4 <_fpadd_parts+0x184>
    15f6:	18 16       	cp	r1, r24
    15f8:	19 06       	cpc	r1, r25
    15fa:	84 f5       	brge	.+96     	; 0x165c <_fpadd_parts+0x11c>
    15fc:	28 01       	movw	r4, r16
    15fe:	39 01       	movw	r6, r18
    1600:	0a 2e       	mov	r0, r26
    1602:	04 c0       	rjmp	.+8      	; 0x160c <_fpadd_parts+0xcc>
    1604:	76 94       	lsr	r7
    1606:	67 94       	ror	r6
    1608:	57 94       	ror	r5
    160a:	47 94       	ror	r4
    160c:	0a 94       	dec	r0
    160e:	d2 f7       	brpl	.-12     	; 0x1604 <_fpadd_parts+0xc4>
    1610:	41 e0       	ldi	r20, 0x01	; 1
    1612:	50 e0       	ldi	r21, 0x00	; 0
    1614:	60 e0       	ldi	r22, 0x00	; 0
    1616:	70 e0       	ldi	r23, 0x00	; 0
    1618:	04 c0       	rjmp	.+8      	; 0x1622 <_fpadd_parts+0xe2>
    161a:	44 0f       	add	r20, r20
    161c:	55 1f       	adc	r21, r21
    161e:	66 1f       	adc	r22, r22
    1620:	77 1f       	adc	r23, r23
    1622:	aa 95       	dec	r26
    1624:	d2 f7       	brpl	.-12     	; 0x161a <_fpadd_parts+0xda>
    1626:	41 50       	subi	r20, 0x01	; 1
    1628:	50 40       	sbci	r21, 0x00	; 0
    162a:	60 40       	sbci	r22, 0x00	; 0
    162c:	70 40       	sbci	r23, 0x00	; 0
    162e:	40 23       	and	r20, r16
    1630:	51 23       	and	r21, r17
    1632:	62 23       	and	r22, r18
    1634:	73 23       	and	r23, r19
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	a0 e0       	ldi	r26, 0x00	; 0
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	41 15       	cp	r20, r1
    1640:	51 05       	cpc	r21, r1
    1642:	61 05       	cpc	r22, r1
    1644:	71 05       	cpc	r23, r1
    1646:	19 f4       	brne	.+6      	; 0x164e <_fpadd_parts+0x10e>
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	dc 01       	movw	r26, r24
    164e:	8c 01       	movw	r16, r24
    1650:	9d 01       	movw	r18, r26
    1652:	04 29       	or	r16, r4
    1654:	15 29       	or	r17, r5
    1656:	26 29       	or	r18, r6
    1658:	37 29       	or	r19, r7
    165a:	3f c0       	rjmp	.+126    	; 0x16da <_fpadd_parts+0x19a>
    165c:	00 97       	sbiw	r24, 0x00	; 0
    165e:	e9 f1       	breq	.+122    	; 0x16da <_fpadd_parts+0x19a>
    1660:	aa 0e       	add	r10, r26
    1662:	bb 1e       	adc	r11, r27
    1664:	26 01       	movw	r4, r12
    1666:	37 01       	movw	r6, r14
    1668:	0a 2e       	mov	r0, r26
    166a:	04 c0       	rjmp	.+8      	; 0x1674 <_fpadd_parts+0x134>
    166c:	76 94       	lsr	r7
    166e:	67 94       	ror	r6
    1670:	57 94       	ror	r5
    1672:	47 94       	ror	r4
    1674:	0a 94       	dec	r0
    1676:	d2 f7       	brpl	.-12     	; 0x166c <_fpadd_parts+0x12c>
    1678:	41 e0       	ldi	r20, 0x01	; 1
    167a:	50 e0       	ldi	r21, 0x00	; 0
    167c:	60 e0       	ldi	r22, 0x00	; 0
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	04 c0       	rjmp	.+8      	; 0x168a <_fpadd_parts+0x14a>
    1682:	44 0f       	add	r20, r20
    1684:	55 1f       	adc	r21, r21
    1686:	66 1f       	adc	r22, r22
    1688:	77 1f       	adc	r23, r23
    168a:	aa 95       	dec	r26
    168c:	d2 f7       	brpl	.-12     	; 0x1682 <_fpadd_parts+0x142>
    168e:	41 50       	subi	r20, 0x01	; 1
    1690:	50 40       	sbci	r21, 0x00	; 0
    1692:	60 40       	sbci	r22, 0x00	; 0
    1694:	70 40       	sbci	r23, 0x00	; 0
    1696:	4c 21       	and	r20, r12
    1698:	5d 21       	and	r21, r13
    169a:	6e 21       	and	r22, r14
    169c:	7f 21       	and	r23, r15
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	a0 e0       	ldi	r26, 0x00	; 0
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	41 15       	cp	r20, r1
    16a8:	51 05       	cpc	r21, r1
    16aa:	61 05       	cpc	r22, r1
    16ac:	71 05       	cpc	r23, r1
    16ae:	19 f4       	brne	.+6      	; 0x16b6 <_fpadd_parts+0x176>
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	dc 01       	movw	r26, r24
    16b6:	6c 01       	movw	r12, r24
    16b8:	7d 01       	movw	r14, r26
    16ba:	c4 28       	or	r12, r4
    16bc:	d5 28       	or	r13, r5
    16be:	e6 28       	or	r14, r6
    16c0:	f7 28       	or	r15, r7
    16c2:	0b c0       	rjmp	.+22     	; 0x16da <_fpadd_parts+0x19a>
    16c4:	4a 15       	cp	r20, r10
    16c6:	5b 05       	cpc	r21, r11
    16c8:	24 f4       	brge	.+8      	; 0x16d2 <_fpadd_parts+0x192>
    16ca:	00 e0       	ldi	r16, 0x00	; 0
    16cc:	10 e0       	ldi	r17, 0x00	; 0
    16ce:	98 01       	movw	r18, r16
    16d0:	04 c0       	rjmp	.+8      	; 0x16da <_fpadd_parts+0x19a>
    16d2:	5a 01       	movw	r10, r20
    16d4:	cc 24       	eor	r12, r12
    16d6:	dd 24       	eor	r13, r13
    16d8:	76 01       	movw	r14, r12
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	d4 01       	movw	r26, r8
    16de:	11 96       	adiw	r26, 0x01	; 1
    16e0:	9c 91       	ld	r25, X
    16e2:	11 97       	sbiw	r26, 0x01	; 1
    16e4:	89 17       	cp	r24, r25
    16e6:	09 f4       	brne	.+2      	; 0x16ea <_fpadd_parts+0x1aa>
    16e8:	45 c0       	rjmp	.+138    	; 0x1774 <_fpadd_parts+0x234>
    16ea:	88 23       	and	r24, r24
    16ec:	29 f0       	breq	.+10     	; 0x16f8 <_fpadd_parts+0x1b8>
    16ee:	0c 19       	sub	r16, r12
    16f0:	1d 09       	sbc	r17, r13
    16f2:	2e 09       	sbc	r18, r14
    16f4:	3f 09       	sbc	r19, r15
    16f6:	08 c0       	rjmp	.+16     	; 0x1708 <_fpadd_parts+0x1c8>
    16f8:	d7 01       	movw	r26, r14
    16fa:	c6 01       	movw	r24, r12
    16fc:	80 1b       	sub	r24, r16
    16fe:	91 0b       	sbc	r25, r17
    1700:	a2 0b       	sbc	r26, r18
    1702:	b3 0b       	sbc	r27, r19
    1704:	8c 01       	movw	r16, r24
    1706:	9d 01       	movw	r18, r26
    1708:	37 fd       	sbrc	r19, 7
    170a:	04 c0       	rjmp	.+8      	; 0x1714 <_fpadd_parts+0x1d4>
    170c:	11 82       	std	Z+1, r1	; 0x01
    170e:	b3 82       	std	Z+3, r11	; 0x03
    1710:	a2 82       	std	Z+2, r10	; 0x02
    1712:	0b c0       	rjmp	.+22     	; 0x172a <_fpadd_parts+0x1ea>
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	81 83       	std	Z+1, r24	; 0x01
    1718:	b3 82       	std	Z+3, r11	; 0x03
    171a:	a2 82       	std	Z+2, r10	; 0x02
    171c:	30 95       	com	r19
    171e:	20 95       	com	r18
    1720:	10 95       	com	r17
    1722:	01 95       	neg	r16
    1724:	1f 4f       	sbci	r17, 0xFF	; 255
    1726:	2f 4f       	sbci	r18, 0xFF	; 255
    1728:	3f 4f       	sbci	r19, 0xFF	; 255
    172a:	04 83       	std	Z+4, r16	; 0x04
    172c:	15 83       	std	Z+5, r17	; 0x05
    172e:	26 83       	std	Z+6, r18	; 0x06
    1730:	37 83       	std	Z+7, r19	; 0x07
    1732:	0d c0       	rjmp	.+26     	; 0x174e <_fpadd_parts+0x20e>
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	aa 1f       	adc	r26, r26
    173a:	bb 1f       	adc	r27, r27
    173c:	84 83       	std	Z+4, r24	; 0x04
    173e:	95 83       	std	Z+5, r25	; 0x05
    1740:	a6 83       	std	Z+6, r26	; 0x06
    1742:	b7 83       	std	Z+7, r27	; 0x07
    1744:	82 81       	ldd	r24, Z+2	; 0x02
    1746:	93 81       	ldd	r25, Z+3	; 0x03
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	93 83       	std	Z+3, r25	; 0x03
    174c:	82 83       	std	Z+2, r24	; 0x02
    174e:	84 81       	ldd	r24, Z+4	; 0x04
    1750:	95 81       	ldd	r25, Z+5	; 0x05
    1752:	a6 81       	ldd	r26, Z+6	; 0x06
    1754:	b7 81       	ldd	r27, Z+7	; 0x07
    1756:	ac 01       	movw	r20, r24
    1758:	bd 01       	movw	r22, r26
    175a:	41 50       	subi	r20, 0x01	; 1
    175c:	50 40       	sbci	r21, 0x00	; 0
    175e:	60 40       	sbci	r22, 0x00	; 0
    1760:	70 40       	sbci	r23, 0x00	; 0
    1762:	4f 3f       	cpi	r20, 0xFF	; 255
    1764:	2f ef       	ldi	r18, 0xFF	; 255
    1766:	52 07       	cpc	r21, r18
    1768:	2f ef       	ldi	r18, 0xFF	; 255
    176a:	62 07       	cpc	r22, r18
    176c:	2f e3       	ldi	r18, 0x3F	; 63
    176e:	72 07       	cpc	r23, r18
    1770:	08 f3       	brcs	.-62     	; 0x1734 <_fpadd_parts+0x1f4>
    1772:	0b c0       	rjmp	.+22     	; 0x178a <_fpadd_parts+0x24a>
    1774:	81 83       	std	Z+1, r24	; 0x01
    1776:	b3 82       	std	Z+3, r11	; 0x03
    1778:	a2 82       	std	Z+2, r10	; 0x02
    177a:	0c 0d       	add	r16, r12
    177c:	1d 1d       	adc	r17, r13
    177e:	2e 1d       	adc	r18, r14
    1780:	3f 1d       	adc	r19, r15
    1782:	04 83       	std	Z+4, r16	; 0x04
    1784:	15 83       	std	Z+5, r17	; 0x05
    1786:	26 83       	std	Z+6, r18	; 0x06
    1788:	37 83       	std	Z+7, r19	; 0x07
    178a:	83 e0       	ldi	r24, 0x03	; 3
    178c:	80 83       	st	Z, r24
    178e:	44 81       	ldd	r20, Z+4	; 0x04
    1790:	55 81       	ldd	r21, Z+5	; 0x05
    1792:	66 81       	ldd	r22, Z+6	; 0x06
    1794:	77 81       	ldd	r23, Z+7	; 0x07
    1796:	77 ff       	sbrs	r23, 7
    1798:	1d c0       	rjmp	.+58     	; 0x17d4 <_fpadd_parts+0x294>
    179a:	db 01       	movw	r26, r22
    179c:	ca 01       	movw	r24, r20
    179e:	81 70       	andi	r24, 0x01	; 1
    17a0:	90 70       	andi	r25, 0x00	; 0
    17a2:	a0 70       	andi	r26, 0x00	; 0
    17a4:	b0 70       	andi	r27, 0x00	; 0
    17a6:	76 95       	lsr	r23
    17a8:	67 95       	ror	r22
    17aa:	57 95       	ror	r21
    17ac:	47 95       	ror	r20
    17ae:	84 2b       	or	r24, r20
    17b0:	95 2b       	or	r25, r21
    17b2:	a6 2b       	or	r26, r22
    17b4:	b7 2b       	or	r27, r23
    17b6:	84 83       	std	Z+4, r24	; 0x04
    17b8:	95 83       	std	Z+5, r25	; 0x05
    17ba:	a6 83       	std	Z+6, r26	; 0x06
    17bc:	b7 83       	std	Z+7, r27	; 0x07
    17be:	82 81       	ldd	r24, Z+2	; 0x02
    17c0:	93 81       	ldd	r25, Z+3	; 0x03
    17c2:	01 96       	adiw	r24, 0x01	; 1
    17c4:	93 83       	std	Z+3, r25	; 0x03
    17c6:	82 83       	std	Z+2, r24	; 0x02
    17c8:	05 c0       	rjmp	.+10     	; 0x17d4 <_fpadd_parts+0x294>
    17ca:	c2 e4       	ldi	r28, 0x42	; 66
    17cc:	d1 e0       	ldi	r29, 0x01	; 1
    17ce:	03 c0       	rjmp	.+6      	; 0x17d6 <_fpadd_parts+0x296>
    17d0:	e4 01       	movw	r28, r8
    17d2:	01 c0       	rjmp	.+2      	; 0x17d6 <_fpadd_parts+0x296>
    17d4:	ef 01       	movw	r28, r30
    17d6:	ce 01       	movw	r24, r28
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	e0 e1       	ldi	r30, 0x10	; 16
    17de:	0c 94 cf 10 	jmp	0x219e	; 0x219e <__epilogue_restores__+0x4>

000017e2 <__addsf3>:
    17e2:	a0 e2       	ldi	r26, 0x20	; 32
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e7 ef       	ldi	r30, 0xF7	; 247
    17e8:	fb e0       	ldi	r31, 0x0B	; 11
    17ea:	0c 94 c1 10 	jmp	0x2182	; 0x2182 <__prologue_saves__+0x20>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	8d 83       	std	Y+5, r24	; 0x05
    17f4:	9e 83       	std	Y+6, r25	; 0x06
    17f6:	af 83       	std	Y+7, r26	; 0x07
    17f8:	b8 87       	std	Y+8, r27	; 0x08
    17fa:	29 83       	std	Y+1, r18	; 0x01
    17fc:	3a 83       	std	Y+2, r19	; 0x02
    17fe:	4b 83       	std	Y+3, r20	; 0x03
    1800:	5c 83       	std	Y+4, r21	; 0x04
    1802:	ce 01       	movw	r24, r28
    1804:	05 96       	adiw	r24, 0x05	; 5
    1806:	be 01       	movw	r22, r28
    1808:	67 5e       	subi	r22, 0xE7	; 231
    180a:	7f 4f       	sbci	r23, 0xFF	; 255
    180c:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__unpack_f>
    1810:	ce 01       	movw	r24, r28
    1812:	01 96       	adiw	r24, 0x01	; 1
    1814:	be 01       	movw	r22, r28
    1816:	6f 5e       	subi	r22, 0xEF	; 239
    1818:	7f 4f       	sbci	r23, 0xFF	; 255
    181a:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__unpack_f>
    181e:	ce 01       	movw	r24, r28
    1820:	49 96       	adiw	r24, 0x19	; 25
    1822:	be 01       	movw	r22, r28
    1824:	6f 5e       	subi	r22, 0xEF	; 239
    1826:	7f 4f       	sbci	r23, 0xFF	; 255
    1828:	ae 01       	movw	r20, r28
    182a:	47 5f       	subi	r20, 0xF7	; 247
    182c:	5f 4f       	sbci	r21, 0xFF	; 255
    182e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <_fpadd_parts>
    1832:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__pack_f>
    1836:	46 2f       	mov	r20, r22
    1838:	57 2f       	mov	r21, r23
    183a:	68 2f       	mov	r22, r24
    183c:	79 2f       	mov	r23, r25
    183e:	cb 01       	movw	r24, r22
    1840:	ba 01       	movw	r22, r20
    1842:	a0 96       	adiw	r28, 0x20	; 32
    1844:	e2 e0       	ldi	r30, 0x02	; 2
    1846:	0c 94 dd 10 	jmp	0x21ba	; 0x21ba <__epilogue_restores__+0x20>

0000184a <__subsf3>:
    184a:	a0 e2       	ldi	r26, 0x20	; 32
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	eb e2       	ldi	r30, 0x2B	; 43
    1850:	fc e0       	ldi	r31, 0x0C	; 12
    1852:	0c 94 c1 10 	jmp	0x2182	; 0x2182 <__prologue_saves__+0x20>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	8d 83       	std	Y+5, r24	; 0x05
    185c:	9e 83       	std	Y+6, r25	; 0x06
    185e:	af 83       	std	Y+7, r26	; 0x07
    1860:	b8 87       	std	Y+8, r27	; 0x08
    1862:	29 83       	std	Y+1, r18	; 0x01
    1864:	3a 83       	std	Y+2, r19	; 0x02
    1866:	4b 83       	std	Y+3, r20	; 0x03
    1868:	5c 83       	std	Y+4, r21	; 0x04
    186a:	ce 01       	movw	r24, r28
    186c:	05 96       	adiw	r24, 0x05	; 5
    186e:	be 01       	movw	r22, r28
    1870:	67 5e       	subi	r22, 0xE7	; 231
    1872:	7f 4f       	sbci	r23, 0xFF	; 255
    1874:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__unpack_f>
    1878:	ce 01       	movw	r24, r28
    187a:	01 96       	adiw	r24, 0x01	; 1
    187c:	be 01       	movw	r22, r28
    187e:	6f 5e       	subi	r22, 0xEF	; 239
    1880:	7f 4f       	sbci	r23, 0xFF	; 255
    1882:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__unpack_f>
    1886:	8a 89       	ldd	r24, Y+18	; 0x12
    1888:	91 e0       	ldi	r25, 0x01	; 1
    188a:	89 27       	eor	r24, r25
    188c:	8a 8b       	std	Y+18, r24	; 0x12
    188e:	ce 01       	movw	r24, r28
    1890:	49 96       	adiw	r24, 0x19	; 25
    1892:	be 01       	movw	r22, r28
    1894:	6f 5e       	subi	r22, 0xEF	; 239
    1896:	7f 4f       	sbci	r23, 0xFF	; 255
    1898:	ae 01       	movw	r20, r28
    189a:	47 5f       	subi	r20, 0xF7	; 247
    189c:	5f 4f       	sbci	r21, 0xFF	; 255
    189e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <_fpadd_parts>
    18a2:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__pack_f>
    18a6:	46 2f       	mov	r20, r22
    18a8:	57 2f       	mov	r21, r23
    18aa:	68 2f       	mov	r22, r24
    18ac:	79 2f       	mov	r23, r25
    18ae:	cb 01       	movw	r24, r22
    18b0:	ba 01       	movw	r22, r20
    18b2:	a0 96       	adiw	r28, 0x20	; 32
    18b4:	e2 e0       	ldi	r30, 0x02	; 2
    18b6:	0c 94 dd 10 	jmp	0x21ba	; 0x21ba <__epilogue_restores__+0x20>

000018ba <__mulsf3>:
    18ba:	a0 e2       	ldi	r26, 0x20	; 32
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e3 e6       	ldi	r30, 0x63	; 99
    18c0:	fc e0       	ldi	r31, 0x0C	; 12
    18c2:	0c 94 b3 10 	jmp	0x2166	; 0x2166 <__prologue_saves__+0x4>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	8d 83       	std	Y+5, r24	; 0x05
    18cc:	9e 83       	std	Y+6, r25	; 0x06
    18ce:	af 83       	std	Y+7, r26	; 0x07
    18d0:	b8 87       	std	Y+8, r27	; 0x08
    18d2:	29 83       	std	Y+1, r18	; 0x01
    18d4:	3a 83       	std	Y+2, r19	; 0x02
    18d6:	4b 83       	std	Y+3, r20	; 0x03
    18d8:	5c 83       	std	Y+4, r21	; 0x04
    18da:	ce 01       	movw	r24, r28
    18dc:	05 96       	adiw	r24, 0x05	; 5
    18de:	be 01       	movw	r22, r28
    18e0:	67 5e       	subi	r22, 0xE7	; 231
    18e2:	7f 4f       	sbci	r23, 0xFF	; 255
    18e4:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__unpack_f>
    18e8:	ce 01       	movw	r24, r28
    18ea:	01 96       	adiw	r24, 0x01	; 1
    18ec:	be 01       	movw	r22, r28
    18ee:	6f 5e       	subi	r22, 0xEF	; 239
    18f0:	7f 4f       	sbci	r23, 0xFF	; 255
    18f2:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__unpack_f>
    18f6:	99 8d       	ldd	r25, Y+25	; 0x19
    18f8:	92 30       	cpi	r25, 0x02	; 2
    18fa:	78 f0       	brcs	.+30     	; 0x191a <__mulsf3+0x60>
    18fc:	89 89       	ldd	r24, Y+17	; 0x11
    18fe:	82 30       	cpi	r24, 0x02	; 2
    1900:	c0 f0       	brcs	.+48     	; 0x1932 <__mulsf3+0x78>
    1902:	94 30       	cpi	r25, 0x04	; 4
    1904:	19 f4       	brne	.+6      	; 0x190c <__mulsf3+0x52>
    1906:	82 30       	cpi	r24, 0x02	; 2
    1908:	41 f4       	brne	.+16     	; 0x191a <__mulsf3+0x60>
    190a:	ca c0       	rjmp	.+404    	; 0x1aa0 <__mulsf3+0x1e6>
    190c:	84 30       	cpi	r24, 0x04	; 4
    190e:	19 f4       	brne	.+6      	; 0x1916 <__mulsf3+0x5c>
    1910:	92 30       	cpi	r25, 0x02	; 2
    1912:	79 f4       	brne	.+30     	; 0x1932 <__mulsf3+0x78>
    1914:	c5 c0       	rjmp	.+394    	; 0x1aa0 <__mulsf3+0x1e6>
    1916:	92 30       	cpi	r25, 0x02	; 2
    1918:	51 f4       	brne	.+20     	; 0x192e <__mulsf3+0x74>
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    191e:	9a 89       	ldd	r25, Y+18	; 0x12
    1920:	29 17       	cp	r18, r25
    1922:	09 f4       	brne	.+2      	; 0x1926 <__mulsf3+0x6c>
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	8a 8f       	std	Y+26, r24	; 0x1a
    1928:	ce 01       	movw	r24, r28
    192a:	49 96       	adiw	r24, 0x19	; 25
    192c:	bb c0       	rjmp	.+374    	; 0x1aa4 <__mulsf3+0x1ea>
    192e:	82 30       	cpi	r24, 0x02	; 2
    1930:	51 f4       	brne	.+20     	; 0x1946 <__mulsf3+0x8c>
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1936:	9a 89       	ldd	r25, Y+18	; 0x12
    1938:	29 17       	cp	r18, r25
    193a:	09 f4       	brne	.+2      	; 0x193e <__mulsf3+0x84>
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	8a 8b       	std	Y+18, r24	; 0x12
    1940:	ce 01       	movw	r24, r28
    1942:	41 96       	adiw	r24, 0x11	; 17
    1944:	af c0       	rjmp	.+350    	; 0x1aa4 <__mulsf3+0x1ea>
    1946:	4d 8c       	ldd	r4, Y+29	; 0x1d
    1948:	5e 8c       	ldd	r5, Y+30	; 0x1e
    194a:	6f 8c       	ldd	r6, Y+31	; 0x1f
    194c:	78 a0       	lds	r23, 0x88
    194e:	0d 89       	ldd	r16, Y+21	; 0x15
    1950:	1e 89       	ldd	r17, Y+22	; 0x16
    1952:	2f 89       	ldd	r18, Y+23	; 0x17
    1954:	38 8d       	ldd	r19, Y+24	; 0x18
    1956:	e0 e2       	ldi	r30, 0x20	; 32
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	40 e0       	ldi	r20, 0x00	; 0
    195c:	50 e0       	ldi	r21, 0x00	; 0
    195e:	ba 01       	movw	r22, r20
    1960:	88 24       	eor	r8, r8
    1962:	99 24       	eor	r9, r9
    1964:	54 01       	movw	r10, r8
    1966:	cc 24       	eor	r12, r12
    1968:	dd 24       	eor	r13, r13
    196a:	76 01       	movw	r14, r12
    196c:	c2 01       	movw	r24, r4
    196e:	81 70       	andi	r24, 0x01	; 1
    1970:	90 70       	andi	r25, 0x00	; 0
    1972:	00 97       	sbiw	r24, 0x00	; 0
    1974:	d1 f0       	breq	.+52     	; 0x19aa <__mulsf3+0xf0>
    1976:	c0 0e       	add	r12, r16
    1978:	d1 1e       	adc	r13, r17
    197a:	e2 1e       	adc	r14, r18
    197c:	f3 1e       	adc	r15, r19
    197e:	db 01       	movw	r26, r22
    1980:	ca 01       	movw	r24, r20
    1982:	88 0d       	add	r24, r8
    1984:	99 1d       	adc	r25, r9
    1986:	aa 1d       	adc	r26, r10
    1988:	bb 1d       	adc	r27, r11
    198a:	41 e0       	ldi	r20, 0x01	; 1
    198c:	50 e0       	ldi	r21, 0x00	; 0
    198e:	60 e0       	ldi	r22, 0x00	; 0
    1990:	70 e0       	ldi	r23, 0x00	; 0
    1992:	c0 16       	cp	r12, r16
    1994:	d1 06       	cpc	r13, r17
    1996:	e2 06       	cpc	r14, r18
    1998:	f3 06       	cpc	r15, r19
    199a:	18 f0       	brcs	.+6      	; 0x19a2 <__mulsf3+0xe8>
    199c:	40 e0       	ldi	r20, 0x00	; 0
    199e:	50 e0       	ldi	r21, 0x00	; 0
    19a0:	ba 01       	movw	r22, r20
    19a2:	48 0f       	add	r20, r24
    19a4:	59 1f       	adc	r21, r25
    19a6:	6a 1f       	adc	r22, r26
    19a8:	7b 1f       	adc	r23, r27
    19aa:	88 0c       	add	r8, r8
    19ac:	99 1c       	adc	r9, r9
    19ae:	aa 1c       	adc	r10, r10
    19b0:	bb 1c       	adc	r11, r11
    19b2:	37 ff       	sbrs	r19, 7
    19b4:	08 c0       	rjmp	.+16     	; 0x19c6 <__mulsf3+0x10c>
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	a0 e0       	ldi	r26, 0x00	; 0
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	88 2a       	or	r8, r24
    19c0:	99 2a       	or	r9, r25
    19c2:	aa 2a       	or	r10, r26
    19c4:	bb 2a       	or	r11, r27
    19c6:	00 0f       	add	r16, r16
    19c8:	11 1f       	adc	r17, r17
    19ca:	22 1f       	adc	r18, r18
    19cc:	33 1f       	adc	r19, r19
    19ce:	76 94       	lsr	r7
    19d0:	67 94       	ror	r6
    19d2:	57 94       	ror	r5
    19d4:	47 94       	ror	r4
    19d6:	31 97       	sbiw	r30, 0x01	; 1
    19d8:	49 f6       	brne	.-110    	; 0x196c <__mulsf3+0xb2>
    19da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19de:	2b 89       	ldd	r18, Y+19	; 0x13
    19e0:	3c 89       	ldd	r19, Y+20	; 0x14
    19e2:	82 0f       	add	r24, r18
    19e4:	93 1f       	adc	r25, r19
    19e6:	02 96       	adiw	r24, 0x02	; 2
    19e8:	9c 87       	std	Y+12, r25	; 0x0c
    19ea:	8b 87       	std	Y+11, r24	; 0x0b
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	2a 8d       	ldd	r18, Y+26	; 0x1a
    19f0:	9a 89       	ldd	r25, Y+18	; 0x12
    19f2:	29 17       	cp	r18, r25
    19f4:	09 f4       	brne	.+2      	; 0x19f8 <__mulsf3+0x13e>
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	8a 87       	std	Y+10, r24	; 0x0a
    19fa:	2b 85       	ldd	r18, Y+11	; 0x0b
    19fc:	3c 85       	ldd	r19, Y+12	; 0x0c
    19fe:	17 c0       	rjmp	.+46     	; 0x1a2e <__mulsf3+0x174>
    1a00:	ca 01       	movw	r24, r20
    1a02:	81 70       	andi	r24, 0x01	; 1
    1a04:	90 70       	andi	r25, 0x00	; 0
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	61 f0       	breq	.+24     	; 0x1a22 <__mulsf3+0x168>
    1a0a:	f6 94       	lsr	r15
    1a0c:	e7 94       	ror	r14
    1a0e:	d7 94       	ror	r13
    1a10:	c7 94       	ror	r12
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	a0 e0       	ldi	r26, 0x00	; 0
    1a18:	b0 e8       	ldi	r27, 0x80	; 128
    1a1a:	c8 2a       	or	r12, r24
    1a1c:	d9 2a       	or	r13, r25
    1a1e:	ea 2a       	or	r14, r26
    1a20:	fb 2a       	or	r15, r27
    1a22:	76 95       	lsr	r23
    1a24:	67 95       	ror	r22
    1a26:	57 95       	ror	r21
    1a28:	47 95       	ror	r20
    1a2a:	2f 5f       	subi	r18, 0xFF	; 255
    1a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2e:	77 fd       	sbrc	r23, 7
    1a30:	e7 cf       	rjmp	.-50     	; 0x1a00 <__mulsf3+0x146>
    1a32:	c9 01       	movw	r24, r18
    1a34:	0b c0       	rjmp	.+22     	; 0x1a4c <__mulsf3+0x192>
    1a36:	44 0f       	add	r20, r20
    1a38:	55 1f       	adc	r21, r21
    1a3a:	66 1f       	adc	r22, r22
    1a3c:	77 1f       	adc	r23, r23
    1a3e:	f7 fc       	sbrc	r15, 7
    1a40:	41 60       	ori	r20, 0x01	; 1
    1a42:	cc 0c       	add	r12, r12
    1a44:	dd 1c       	adc	r13, r13
    1a46:	ee 1c       	adc	r14, r14
    1a48:	ff 1c       	adc	r15, r15
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	40 30       	cpi	r20, 0x00	; 0
    1a4e:	a0 e0       	ldi	r26, 0x00	; 0
    1a50:	5a 07       	cpc	r21, r26
    1a52:	a0 e0       	ldi	r26, 0x00	; 0
    1a54:	6a 07       	cpc	r22, r26
    1a56:	a0 e4       	ldi	r26, 0x40	; 64
    1a58:	7a 07       	cpc	r23, r26
    1a5a:	68 f3       	brcs	.-38     	; 0x1a36 <__mulsf3+0x17c>
    1a5c:	8b 87       	std	Y+11, r24	; 0x0b
    1a5e:	9c 87       	std	Y+12, r25	; 0x0c
    1a60:	db 01       	movw	r26, r22
    1a62:	ca 01       	movw	r24, r20
    1a64:	8f 77       	andi	r24, 0x7F	; 127
    1a66:	90 70       	andi	r25, 0x00	; 0
    1a68:	a0 70       	andi	r26, 0x00	; 0
    1a6a:	b0 70       	andi	r27, 0x00	; 0
    1a6c:	80 34       	cpi	r24, 0x40	; 64
    1a6e:	91 05       	cpc	r25, r1
    1a70:	a1 05       	cpc	r26, r1
    1a72:	b1 05       	cpc	r27, r1
    1a74:	61 f4       	brne	.+24     	; 0x1a8e <__mulsf3+0x1d4>
    1a76:	47 fd       	sbrc	r20, 7
    1a78:	0a c0       	rjmp	.+20     	; 0x1a8e <__mulsf3+0x1d4>
    1a7a:	c1 14       	cp	r12, r1
    1a7c:	d1 04       	cpc	r13, r1
    1a7e:	e1 04       	cpc	r14, r1
    1a80:	f1 04       	cpc	r15, r1
    1a82:	29 f0       	breq	.+10     	; 0x1a8e <__mulsf3+0x1d4>
    1a84:	40 5c       	subi	r20, 0xC0	; 192
    1a86:	5f 4f       	sbci	r21, 0xFF	; 255
    1a88:	6f 4f       	sbci	r22, 0xFF	; 255
    1a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8c:	40 78       	andi	r20, 0x80	; 128
    1a8e:	4d 87       	std	Y+13, r20	; 0x0d
    1a90:	5e 87       	std	Y+14, r21	; 0x0e
    1a92:	6f 87       	std	Y+15, r22	; 0x0f
    1a94:	78 8b       	std	Y+16, r23	; 0x10
    1a96:	83 e0       	ldi	r24, 0x03	; 3
    1a98:	89 87       	std	Y+9, r24	; 0x09
    1a9a:	ce 01       	movw	r24, r28
    1a9c:	09 96       	adiw	r24, 0x09	; 9
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <__mulsf3+0x1ea>
    1aa0:	82 e4       	ldi	r24, 0x42	; 66
    1aa2:	91 e0       	ldi	r25, 0x01	; 1
    1aa4:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__pack_f>
    1aa8:	46 2f       	mov	r20, r22
    1aaa:	57 2f       	mov	r21, r23
    1aac:	68 2f       	mov	r22, r24
    1aae:	79 2f       	mov	r23, r25
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	ba 01       	movw	r22, r20
    1ab4:	a0 96       	adiw	r28, 0x20	; 32
    1ab6:	e0 e1       	ldi	r30, 0x10	; 16
    1ab8:	0c 94 cf 10 	jmp	0x219e	; 0x219e <__epilogue_restores__+0x4>

00001abc <__divsf3>:
    1abc:	a8 e1       	ldi	r26, 0x18	; 24
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	e4 e6       	ldi	r30, 0x64	; 100
    1ac2:	fd e0       	ldi	r31, 0x0D	; 13
    1ac4:	0c 94 bb 10 	jmp	0x2176	; 0x2176 <__prologue_saves__+0x14>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	8d 83       	std	Y+5, r24	; 0x05
    1ace:	9e 83       	std	Y+6, r25	; 0x06
    1ad0:	af 83       	std	Y+7, r26	; 0x07
    1ad2:	b8 87       	std	Y+8, r27	; 0x08
    1ad4:	29 83       	std	Y+1, r18	; 0x01
    1ad6:	3a 83       	std	Y+2, r19	; 0x02
    1ad8:	4b 83       	std	Y+3, r20	; 0x03
    1ada:	5c 83       	std	Y+4, r21	; 0x04
    1adc:	ce 01       	movw	r24, r28
    1ade:	05 96       	adiw	r24, 0x05	; 5
    1ae0:	be 01       	movw	r22, r28
    1ae2:	6f 5e       	subi	r22, 0xEF	; 239
    1ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae6:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__unpack_f>
    1aea:	ce 01       	movw	r24, r28
    1aec:	01 96       	adiw	r24, 0x01	; 1
    1aee:	be 01       	movw	r22, r28
    1af0:	67 5f       	subi	r22, 0xF7	; 247
    1af2:	7f 4f       	sbci	r23, 0xFF	; 255
    1af4:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__unpack_f>
    1af8:	99 89       	ldd	r25, Y+17	; 0x11
    1afa:	92 30       	cpi	r25, 0x02	; 2
    1afc:	08 f4       	brcc	.+2      	; 0x1b00 <__divsf3+0x44>
    1afe:	75 c0       	rjmp	.+234    	; 0x1bea <__divsf3+0x12e>
    1b00:	89 85       	ldd	r24, Y+9	; 0x09
    1b02:	82 30       	cpi	r24, 0x02	; 2
    1b04:	08 f4       	brcc	.+2      	; 0x1b08 <__divsf3+0x4c>
    1b06:	74 c0       	rjmp	.+232    	; 0x1bf0 <__divsf3+0x134>
    1b08:	2a 89       	ldd	r18, Y+18	; 0x12
    1b0a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b0c:	23 27       	eor	r18, r19
    1b0e:	2a 8b       	std	Y+18, r18	; 0x12
    1b10:	94 30       	cpi	r25, 0x04	; 4
    1b12:	11 f0       	breq	.+4      	; 0x1b18 <__divsf3+0x5c>
    1b14:	92 30       	cpi	r25, 0x02	; 2
    1b16:	21 f4       	brne	.+8      	; 0x1b20 <__divsf3+0x64>
    1b18:	98 17       	cp	r25, r24
    1b1a:	09 f0       	breq	.+2      	; 0x1b1e <__divsf3+0x62>
    1b1c:	66 c0       	rjmp	.+204    	; 0x1bea <__divsf3+0x12e>
    1b1e:	6b c0       	rjmp	.+214    	; 0x1bf6 <__divsf3+0x13a>
    1b20:	84 30       	cpi	r24, 0x04	; 4
    1b22:	39 f4       	brne	.+14     	; 0x1b32 <__divsf3+0x76>
    1b24:	1d 8a       	std	Y+21, r1	; 0x15
    1b26:	1e 8a       	std	Y+22, r1	; 0x16
    1b28:	1f 8a       	std	Y+23, r1	; 0x17
    1b2a:	18 8e       	std	Y+24, r1	; 0x18
    1b2c:	1c 8a       	std	Y+20, r1	; 0x14
    1b2e:	1b 8a       	std	Y+19, r1	; 0x13
    1b30:	5c c0       	rjmp	.+184    	; 0x1bea <__divsf3+0x12e>
    1b32:	82 30       	cpi	r24, 0x02	; 2
    1b34:	19 f4       	brne	.+6      	; 0x1b3c <__divsf3+0x80>
    1b36:	84 e0       	ldi	r24, 0x04	; 4
    1b38:	89 8b       	std	Y+17, r24	; 0x11
    1b3a:	57 c0       	rjmp	.+174    	; 0x1bea <__divsf3+0x12e>
    1b3c:	2b 89       	ldd	r18, Y+19	; 0x13
    1b3e:	3c 89       	ldd	r19, Y+20	; 0x14
    1b40:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b42:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b44:	28 1b       	sub	r18, r24
    1b46:	39 0b       	sbc	r19, r25
    1b48:	3c 8b       	std	Y+20, r19	; 0x14
    1b4a:	2b 8b       	std	Y+19, r18	; 0x13
    1b4c:	8d 89       	ldd	r24, Y+21	; 0x15
    1b4e:	9e 89       	ldd	r25, Y+22	; 0x16
    1b50:	af 89       	ldd	r26, Y+23	; 0x17
    1b52:	b8 8d       	ldd	r27, Y+24	; 0x18
    1b54:	cd 84       	ldd	r12, Y+13	; 0x0d
    1b56:	de 84       	ldd	r13, Y+14	; 0x0e
    1b58:	ef 84       	ldd	r14, Y+15	; 0x0f
    1b5a:	f8 88       	ldd	r15, Y+16	; 0x10
    1b5c:	8c 15       	cp	r24, r12
    1b5e:	9d 05       	cpc	r25, r13
    1b60:	ae 05       	cpc	r26, r14
    1b62:	bf 05       	cpc	r27, r15
    1b64:	40 f4       	brcc	.+16     	; 0x1b76 <__divsf3+0xba>
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	aa 1f       	adc	r26, r26
    1b6c:	bb 1f       	adc	r27, r27
    1b6e:	21 50       	subi	r18, 0x01	; 1
    1b70:	30 40       	sbci	r19, 0x00	; 0
    1b72:	3c 8b       	std	Y+20, r19	; 0x14
    1b74:	2b 8b       	std	Y+19, r18	; 0x13
    1b76:	ef e1       	ldi	r30, 0x1F	; 31
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	00 e0       	ldi	r16, 0x00	; 0
    1b7c:	10 e0       	ldi	r17, 0x00	; 0
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e4       	ldi	r19, 0x40	; 64
    1b82:	40 e0       	ldi	r20, 0x00	; 0
    1b84:	50 e0       	ldi	r21, 0x00	; 0
    1b86:	ba 01       	movw	r22, r20
    1b88:	8c 15       	cp	r24, r12
    1b8a:	9d 05       	cpc	r25, r13
    1b8c:	ae 05       	cpc	r26, r14
    1b8e:	bf 05       	cpc	r27, r15
    1b90:	40 f0       	brcs	.+16     	; 0x1ba2 <__divsf3+0xe6>
    1b92:	40 2b       	or	r20, r16
    1b94:	51 2b       	or	r21, r17
    1b96:	62 2b       	or	r22, r18
    1b98:	73 2b       	or	r23, r19
    1b9a:	8c 19       	sub	r24, r12
    1b9c:	9d 09       	sbc	r25, r13
    1b9e:	ae 09       	sbc	r26, r14
    1ba0:	bf 09       	sbc	r27, r15
    1ba2:	36 95       	lsr	r19
    1ba4:	27 95       	ror	r18
    1ba6:	17 95       	ror	r17
    1ba8:	07 95       	ror	r16
    1baa:	88 0f       	add	r24, r24
    1bac:	99 1f       	adc	r25, r25
    1bae:	aa 1f       	adc	r26, r26
    1bb0:	bb 1f       	adc	r27, r27
    1bb2:	31 97       	sbiw	r30, 0x01	; 1
    1bb4:	49 f7       	brne	.-46     	; 0x1b88 <__divsf3+0xcc>
    1bb6:	8a 01       	movw	r16, r20
    1bb8:	9b 01       	movw	r18, r22
    1bba:	0f 77       	andi	r16, 0x7F	; 127
    1bbc:	10 70       	andi	r17, 0x00	; 0
    1bbe:	20 70       	andi	r18, 0x00	; 0
    1bc0:	30 70       	andi	r19, 0x00	; 0
    1bc2:	00 34       	cpi	r16, 0x40	; 64
    1bc4:	11 05       	cpc	r17, r1
    1bc6:	21 05       	cpc	r18, r1
    1bc8:	31 05       	cpc	r19, r1
    1bca:	59 f4       	brne	.+22     	; 0x1be2 <__divsf3+0x126>
    1bcc:	47 fd       	sbrc	r20, 7
    1bce:	09 c0       	rjmp	.+18     	; 0x1be2 <__divsf3+0x126>
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	a1 05       	cpc	r26, r1
    1bd4:	b1 05       	cpc	r27, r1
    1bd6:	29 f0       	breq	.+10     	; 0x1be2 <__divsf3+0x126>
    1bd8:	40 5c       	subi	r20, 0xC0	; 192
    1bda:	5f 4f       	sbci	r21, 0xFF	; 255
    1bdc:	6f 4f       	sbci	r22, 0xFF	; 255
    1bde:	7f 4f       	sbci	r23, 0xFF	; 255
    1be0:	40 78       	andi	r20, 0x80	; 128
    1be2:	4d 8b       	std	Y+21, r20	; 0x15
    1be4:	5e 8b       	std	Y+22, r21	; 0x16
    1be6:	6f 8b       	std	Y+23, r22	; 0x17
    1be8:	78 8f       	std	Y+24, r23	; 0x18
    1bea:	ce 01       	movw	r24, r28
    1bec:	41 96       	adiw	r24, 0x11	; 17
    1bee:	05 c0       	rjmp	.+10     	; 0x1bfa <__divsf3+0x13e>
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	09 96       	adiw	r24, 0x09	; 9
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <__divsf3+0x13e>
    1bf6:	82 e4       	ldi	r24, 0x42	; 66
    1bf8:	91 e0       	ldi	r25, 0x01	; 1
    1bfa:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__pack_f>
    1bfe:	46 2f       	mov	r20, r22
    1c00:	57 2f       	mov	r21, r23
    1c02:	68 2f       	mov	r22, r24
    1c04:	79 2f       	mov	r23, r25
    1c06:	cb 01       	movw	r24, r22
    1c08:	ba 01       	movw	r22, r20
    1c0a:	68 96       	adiw	r28, 0x18	; 24
    1c0c:	e8 e0       	ldi	r30, 0x08	; 8
    1c0e:	0c 94 d7 10 	jmp	0x21ae	; 0x21ae <__epilogue_restores__+0x14>

00001c12 <__gtsf2>:
    1c12:	a8 e1       	ldi	r26, 0x18	; 24
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	ef e0       	ldi	r30, 0x0F	; 15
    1c18:	fe e0       	ldi	r31, 0x0E	; 14
    1c1a:	0c 94 c1 10 	jmp	0x2182	; 0x2182 <__prologue_saves__+0x20>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	8d 83       	std	Y+5, r24	; 0x05
    1c24:	9e 83       	std	Y+6, r25	; 0x06
    1c26:	af 83       	std	Y+7, r26	; 0x07
    1c28:	b8 87       	std	Y+8, r27	; 0x08
    1c2a:	29 83       	std	Y+1, r18	; 0x01
    1c2c:	3a 83       	std	Y+2, r19	; 0x02
    1c2e:	4b 83       	std	Y+3, r20	; 0x03
    1c30:	5c 83       	std	Y+4, r21	; 0x04
    1c32:	ce 01       	movw	r24, r28
    1c34:	05 96       	adiw	r24, 0x05	; 5
    1c36:	be 01       	movw	r22, r28
    1c38:	6f 5e       	subi	r22, 0xEF	; 239
    1c3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3c:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__unpack_f>
    1c40:	ce 01       	movw	r24, r28
    1c42:	01 96       	adiw	r24, 0x01	; 1
    1c44:	be 01       	movw	r22, r28
    1c46:	67 5f       	subi	r22, 0xF7	; 247
    1c48:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4a:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__unpack_f>
    1c4e:	89 89       	ldd	r24, Y+17	; 0x11
    1c50:	82 30       	cpi	r24, 0x02	; 2
    1c52:	58 f0       	brcs	.+22     	; 0x1c6a <__gtsf2+0x58>
    1c54:	89 85       	ldd	r24, Y+9	; 0x09
    1c56:	82 30       	cpi	r24, 0x02	; 2
    1c58:	40 f0       	brcs	.+16     	; 0x1c6a <__gtsf2+0x58>
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	41 96       	adiw	r24, 0x11	; 17
    1c5e:	be 01       	movw	r22, r28
    1c60:	67 5f       	subi	r22, 0xF7	; 247
    1c62:	7f 4f       	sbci	r23, 0xFF	; 255
    1c64:	0e 94 2d 10 	call	0x205a	; 0x205a <__fpcmp_parts_f>
    1c68:	01 c0       	rjmp	.+2      	; 0x1c6c <__gtsf2+0x5a>
    1c6a:	8f ef       	ldi	r24, 0xFF	; 255
    1c6c:	68 96       	adiw	r28, 0x18	; 24
    1c6e:	e2 e0       	ldi	r30, 0x02	; 2
    1c70:	0c 94 dd 10 	jmp	0x21ba	; 0x21ba <__epilogue_restores__+0x20>

00001c74 <__gesf2>:
    1c74:	a8 e1       	ldi	r26, 0x18	; 24
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	e0 e4       	ldi	r30, 0x40	; 64
    1c7a:	fe e0       	ldi	r31, 0x0E	; 14
    1c7c:	0c 94 c1 10 	jmp	0x2182	; 0x2182 <__prologue_saves__+0x20>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	8d 83       	std	Y+5, r24	; 0x05
    1c86:	9e 83       	std	Y+6, r25	; 0x06
    1c88:	af 83       	std	Y+7, r26	; 0x07
    1c8a:	b8 87       	std	Y+8, r27	; 0x08
    1c8c:	29 83       	std	Y+1, r18	; 0x01
    1c8e:	3a 83       	std	Y+2, r19	; 0x02
    1c90:	4b 83       	std	Y+3, r20	; 0x03
    1c92:	5c 83       	std	Y+4, r21	; 0x04
    1c94:	ce 01       	movw	r24, r28
    1c96:	05 96       	adiw	r24, 0x05	; 5
    1c98:	be 01       	movw	r22, r28
    1c9a:	6f 5e       	subi	r22, 0xEF	; 239
    1c9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c9e:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__unpack_f>
    1ca2:	ce 01       	movw	r24, r28
    1ca4:	01 96       	adiw	r24, 0x01	; 1
    1ca6:	be 01       	movw	r22, r28
    1ca8:	67 5f       	subi	r22, 0xF7	; 247
    1caa:	7f 4f       	sbci	r23, 0xFF	; 255
    1cac:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__unpack_f>
    1cb0:	89 89       	ldd	r24, Y+17	; 0x11
    1cb2:	82 30       	cpi	r24, 0x02	; 2
    1cb4:	58 f0       	brcs	.+22     	; 0x1ccc <__gesf2+0x58>
    1cb6:	89 85       	ldd	r24, Y+9	; 0x09
    1cb8:	82 30       	cpi	r24, 0x02	; 2
    1cba:	40 f0       	brcs	.+16     	; 0x1ccc <__gesf2+0x58>
    1cbc:	ce 01       	movw	r24, r28
    1cbe:	41 96       	adiw	r24, 0x11	; 17
    1cc0:	be 01       	movw	r22, r28
    1cc2:	67 5f       	subi	r22, 0xF7	; 247
    1cc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc6:	0e 94 2d 10 	call	0x205a	; 0x205a <__fpcmp_parts_f>
    1cca:	01 c0       	rjmp	.+2      	; 0x1cce <__gesf2+0x5a>
    1ccc:	8f ef       	ldi	r24, 0xFF	; 255
    1cce:	68 96       	adiw	r28, 0x18	; 24
    1cd0:	e2 e0       	ldi	r30, 0x02	; 2
    1cd2:	0c 94 dd 10 	jmp	0x21ba	; 0x21ba <__epilogue_restores__+0x20>

00001cd6 <__ltsf2>:
    1cd6:	a8 e1       	ldi	r26, 0x18	; 24
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	e1 e7       	ldi	r30, 0x71	; 113
    1cdc:	fe e0       	ldi	r31, 0x0E	; 14
    1cde:	0c 94 c1 10 	jmp	0x2182	; 0x2182 <__prologue_saves__+0x20>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	8d 83       	std	Y+5, r24	; 0x05
    1ce8:	9e 83       	std	Y+6, r25	; 0x06
    1cea:	af 83       	std	Y+7, r26	; 0x07
    1cec:	b8 87       	std	Y+8, r27	; 0x08
    1cee:	29 83       	std	Y+1, r18	; 0x01
    1cf0:	3a 83       	std	Y+2, r19	; 0x02
    1cf2:	4b 83       	std	Y+3, r20	; 0x03
    1cf4:	5c 83       	std	Y+4, r21	; 0x04
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	05 96       	adiw	r24, 0x05	; 5
    1cfa:	be 01       	movw	r22, r28
    1cfc:	6f 5e       	subi	r22, 0xEF	; 239
    1cfe:	7f 4f       	sbci	r23, 0xFF	; 255
    1d00:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__unpack_f>
    1d04:	ce 01       	movw	r24, r28
    1d06:	01 96       	adiw	r24, 0x01	; 1
    1d08:	be 01       	movw	r22, r28
    1d0a:	67 5f       	subi	r22, 0xF7	; 247
    1d0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d0e:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__unpack_f>
    1d12:	89 89       	ldd	r24, Y+17	; 0x11
    1d14:	82 30       	cpi	r24, 0x02	; 2
    1d16:	58 f0       	brcs	.+22     	; 0x1d2e <__ltsf2+0x58>
    1d18:	89 85       	ldd	r24, Y+9	; 0x09
    1d1a:	82 30       	cpi	r24, 0x02	; 2
    1d1c:	40 f0       	brcs	.+16     	; 0x1d2e <__ltsf2+0x58>
    1d1e:	ce 01       	movw	r24, r28
    1d20:	41 96       	adiw	r24, 0x11	; 17
    1d22:	be 01       	movw	r22, r28
    1d24:	67 5f       	subi	r22, 0xF7	; 247
    1d26:	7f 4f       	sbci	r23, 0xFF	; 255
    1d28:	0e 94 2d 10 	call	0x205a	; 0x205a <__fpcmp_parts_f>
    1d2c:	01 c0       	rjmp	.+2      	; 0x1d30 <__ltsf2+0x5a>
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	68 96       	adiw	r28, 0x18	; 24
    1d32:	e2 e0       	ldi	r30, 0x02	; 2
    1d34:	0c 94 dd 10 	jmp	0x21ba	; 0x21ba <__epilogue_restores__+0x20>

00001d38 <__fixsfsi>:
    1d38:	ac e0       	ldi	r26, 0x0C	; 12
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	e2 ea       	ldi	r30, 0xA2	; 162
    1d3e:	fe e0       	ldi	r31, 0x0E	; 14
    1d40:	0c 94 bf 10 	jmp	0x217e	; 0x217e <__prologue_saves__+0x1c>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	89 83       	std	Y+1, r24	; 0x01
    1d4a:	9a 83       	std	Y+2, r25	; 0x02
    1d4c:	ab 83       	std	Y+3, r26	; 0x03
    1d4e:	bc 83       	std	Y+4, r27	; 0x04
    1d50:	ce 01       	movw	r24, r28
    1d52:	01 96       	adiw	r24, 0x01	; 1
    1d54:	be 01       	movw	r22, r28
    1d56:	6b 5f       	subi	r22, 0xFB	; 251
    1d58:	7f 4f       	sbci	r23, 0xFF	; 255
    1d5a:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__unpack_f>
    1d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d60:	82 30       	cpi	r24, 0x02	; 2
    1d62:	69 f1       	breq	.+90     	; 0x1dbe <__fixsfsi+0x86>
    1d64:	82 30       	cpi	r24, 0x02	; 2
    1d66:	58 f1       	brcs	.+86     	; 0x1dbe <__fixsfsi+0x86>
    1d68:	84 30       	cpi	r24, 0x04	; 4
    1d6a:	39 f0       	breq	.+14     	; 0x1d7a <__fixsfsi+0x42>
    1d6c:	2f 81       	ldd	r18, Y+7	; 0x07
    1d6e:	38 85       	ldd	r19, Y+8	; 0x08
    1d70:	37 fd       	sbrc	r19, 7
    1d72:	25 c0       	rjmp	.+74     	; 0x1dbe <__fixsfsi+0x86>
    1d74:	2f 31       	cpi	r18, 0x1F	; 31
    1d76:	31 05       	cpc	r19, r1
    1d78:	44 f0       	brlt	.+16     	; 0x1d8a <__fixsfsi+0x52>
    1d7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d7c:	88 23       	and	r24, r24
    1d7e:	19 f1       	breq	.+70     	; 0x1dc6 <__fixsfsi+0x8e>
    1d80:	00 e0       	ldi	r16, 0x00	; 0
    1d82:	10 e0       	ldi	r17, 0x00	; 0
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e8       	ldi	r19, 0x80	; 128
    1d88:	22 c0       	rjmp	.+68     	; 0x1dce <__fixsfsi+0x96>
    1d8a:	8e e1       	ldi	r24, 0x1E	; 30
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	82 1b       	sub	r24, r18
    1d90:	93 0b       	sbc	r25, r19
    1d92:	09 85       	ldd	r16, Y+9	; 0x09
    1d94:	1a 85       	ldd	r17, Y+10	; 0x0a
    1d96:	2b 85       	ldd	r18, Y+11	; 0x0b
    1d98:	3c 85       	ldd	r19, Y+12	; 0x0c
    1d9a:	04 c0       	rjmp	.+8      	; 0x1da4 <__fixsfsi+0x6c>
    1d9c:	36 95       	lsr	r19
    1d9e:	27 95       	ror	r18
    1da0:	17 95       	ror	r17
    1da2:	07 95       	ror	r16
    1da4:	8a 95       	dec	r24
    1da6:	d2 f7       	brpl	.-12     	; 0x1d9c <__fixsfsi+0x64>
    1da8:	8e 81       	ldd	r24, Y+6	; 0x06
    1daa:	88 23       	and	r24, r24
    1dac:	81 f0       	breq	.+32     	; 0x1dce <__fixsfsi+0x96>
    1dae:	30 95       	com	r19
    1db0:	20 95       	com	r18
    1db2:	10 95       	com	r17
    1db4:	01 95       	neg	r16
    1db6:	1f 4f       	sbci	r17, 0xFF	; 255
    1db8:	2f 4f       	sbci	r18, 0xFF	; 255
    1dba:	3f 4f       	sbci	r19, 0xFF	; 255
    1dbc:	08 c0       	rjmp	.+16     	; 0x1dce <__fixsfsi+0x96>
    1dbe:	00 e0       	ldi	r16, 0x00	; 0
    1dc0:	10 e0       	ldi	r17, 0x00	; 0
    1dc2:	98 01       	movw	r18, r16
    1dc4:	04 c0       	rjmp	.+8      	; 0x1dce <__fixsfsi+0x96>
    1dc6:	0f ef       	ldi	r16, 0xFF	; 255
    1dc8:	1f ef       	ldi	r17, 0xFF	; 255
    1dca:	2f ef       	ldi	r18, 0xFF	; 255
    1dcc:	3f e7       	ldi	r19, 0x7F	; 127
    1dce:	b8 01       	movw	r22, r16
    1dd0:	c9 01       	movw	r24, r18
    1dd2:	2c 96       	adiw	r28, 0x0c	; 12
    1dd4:	e4 e0       	ldi	r30, 0x04	; 4
    1dd6:	0c 94 db 10 	jmp	0x21b6	; 0x21b6 <__epilogue_restores__+0x1c>

00001dda <__pack_f>:
    1dda:	cf 92       	push	r12
    1ddc:	df 92       	push	r13
    1dde:	ef 92       	push	r14
    1de0:	ff 92       	push	r15
    1de2:	0f 93       	push	r16
    1de4:	1f 93       	push	r17
    1de6:	dc 01       	movw	r26, r24
    1de8:	14 96       	adiw	r26, 0x04	; 4
    1dea:	4d 91       	ld	r20, X+
    1dec:	5d 91       	ld	r21, X+
    1dee:	6d 91       	ld	r22, X+
    1df0:	7c 91       	ld	r23, X
    1df2:	17 97       	sbiw	r26, 0x07	; 7
    1df4:	11 96       	adiw	r26, 0x01	; 1
    1df6:	ec 91       	ld	r30, X
    1df8:	11 97       	sbiw	r26, 0x01	; 1
    1dfa:	8c 91       	ld	r24, X
    1dfc:	82 30       	cpi	r24, 0x02	; 2
    1dfe:	20 f4       	brcc	.+8      	; 0x1e08 <__pack_f+0x2e>
    1e00:	60 61       	ori	r22, 0x10	; 16
    1e02:	8f ef       	ldi	r24, 0xFF	; 255
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	a5 c0       	rjmp	.+330    	; 0x1f52 <__pack_f+0x178>
    1e08:	84 30       	cpi	r24, 0x04	; 4
    1e0a:	09 f4       	brne	.+2      	; 0x1e0e <__pack_f+0x34>
    1e0c:	9d c0       	rjmp	.+314    	; 0x1f48 <__pack_f+0x16e>
    1e0e:	82 30       	cpi	r24, 0x02	; 2
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <__pack_f+0x3a>
    1e12:	94 c0       	rjmp	.+296    	; 0x1f3c <__pack_f+0x162>
    1e14:	41 15       	cp	r20, r1
    1e16:	51 05       	cpc	r21, r1
    1e18:	61 05       	cpc	r22, r1
    1e1a:	71 05       	cpc	r23, r1
    1e1c:	09 f4       	brne	.+2      	; 0x1e20 <__pack_f+0x46>
    1e1e:	91 c0       	rjmp	.+290    	; 0x1f42 <__pack_f+0x168>
    1e20:	12 96       	adiw	r26, 0x02	; 2
    1e22:	8d 91       	ld	r24, X+
    1e24:	9c 91       	ld	r25, X
    1e26:	13 97       	sbiw	r26, 0x03	; 3
    1e28:	2f ef       	ldi	r18, 0xFF	; 255
    1e2a:	82 38       	cpi	r24, 0x82	; 130
    1e2c:	92 07       	cpc	r25, r18
    1e2e:	0c f0       	brlt	.+2      	; 0x1e32 <__pack_f+0x58>
    1e30:	59 c0       	rjmp	.+178    	; 0x1ee4 <__pack_f+0x10a>
    1e32:	22 e8       	ldi	r18, 0x82	; 130
    1e34:	3f ef       	ldi	r19, 0xFF	; 255
    1e36:	28 1b       	sub	r18, r24
    1e38:	39 0b       	sbc	r19, r25
    1e3a:	2a 31       	cpi	r18, 0x1A	; 26
    1e3c:	31 05       	cpc	r19, r1
    1e3e:	64 f5       	brge	.+88     	; 0x1e98 <__pack_f+0xbe>
    1e40:	6a 01       	movw	r12, r20
    1e42:	7b 01       	movw	r14, r22
    1e44:	02 2e       	mov	r0, r18
    1e46:	04 c0       	rjmp	.+8      	; 0x1e50 <__pack_f+0x76>
    1e48:	f6 94       	lsr	r15
    1e4a:	e7 94       	ror	r14
    1e4c:	d7 94       	ror	r13
    1e4e:	c7 94       	ror	r12
    1e50:	0a 94       	dec	r0
    1e52:	d2 f7       	brpl	.-12     	; 0x1e48 <__pack_f+0x6e>
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	a0 e0       	ldi	r26, 0x00	; 0
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	04 c0       	rjmp	.+8      	; 0x1e66 <__pack_f+0x8c>
    1e5e:	88 0f       	add	r24, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	aa 1f       	adc	r26, r26
    1e64:	bb 1f       	adc	r27, r27
    1e66:	2a 95       	dec	r18
    1e68:	d2 f7       	brpl	.-12     	; 0x1e5e <__pack_f+0x84>
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	a1 09       	sbc	r26, r1
    1e6e:	b1 09       	sbc	r27, r1
    1e70:	84 23       	and	r24, r20
    1e72:	95 23       	and	r25, r21
    1e74:	a6 23       	and	r26, r22
    1e76:	b7 23       	and	r27, r23
    1e78:	41 e0       	ldi	r20, 0x01	; 1
    1e7a:	50 e0       	ldi	r21, 0x00	; 0
    1e7c:	60 e0       	ldi	r22, 0x00	; 0
    1e7e:	70 e0       	ldi	r23, 0x00	; 0
    1e80:	00 97       	sbiw	r24, 0x00	; 0
    1e82:	a1 05       	cpc	r26, r1
    1e84:	b1 05       	cpc	r27, r1
    1e86:	19 f4       	brne	.+6      	; 0x1e8e <__pack_f+0xb4>
    1e88:	40 e0       	ldi	r20, 0x00	; 0
    1e8a:	50 e0       	ldi	r21, 0x00	; 0
    1e8c:	ba 01       	movw	r22, r20
    1e8e:	4c 29       	or	r20, r12
    1e90:	5d 29       	or	r21, r13
    1e92:	6e 29       	or	r22, r14
    1e94:	7f 29       	or	r23, r15
    1e96:	03 c0       	rjmp	.+6      	; 0x1e9e <__pack_f+0xc4>
    1e98:	40 e0       	ldi	r20, 0x00	; 0
    1e9a:	50 e0       	ldi	r21, 0x00	; 0
    1e9c:	ba 01       	movw	r22, r20
    1e9e:	db 01       	movw	r26, r22
    1ea0:	ca 01       	movw	r24, r20
    1ea2:	8f 77       	andi	r24, 0x7F	; 127
    1ea4:	90 70       	andi	r25, 0x00	; 0
    1ea6:	a0 70       	andi	r26, 0x00	; 0
    1ea8:	b0 70       	andi	r27, 0x00	; 0
    1eaa:	80 34       	cpi	r24, 0x40	; 64
    1eac:	91 05       	cpc	r25, r1
    1eae:	a1 05       	cpc	r26, r1
    1eb0:	b1 05       	cpc	r27, r1
    1eb2:	39 f4       	brne	.+14     	; 0x1ec2 <__pack_f+0xe8>
    1eb4:	47 ff       	sbrs	r20, 7
    1eb6:	09 c0       	rjmp	.+18     	; 0x1eca <__pack_f+0xf0>
    1eb8:	40 5c       	subi	r20, 0xC0	; 192
    1eba:	5f 4f       	sbci	r21, 0xFF	; 255
    1ebc:	6f 4f       	sbci	r22, 0xFF	; 255
    1ebe:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec0:	04 c0       	rjmp	.+8      	; 0x1eca <__pack_f+0xf0>
    1ec2:	41 5c       	subi	r20, 0xC1	; 193
    1ec4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec6:	6f 4f       	sbci	r22, 0xFF	; 255
    1ec8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	40 30       	cpi	r20, 0x00	; 0
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	52 07       	cpc	r21, r18
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	62 07       	cpc	r22, r18
    1ed8:	20 e4       	ldi	r18, 0x40	; 64
    1eda:	72 07       	cpc	r23, r18
    1edc:	38 f5       	brcc	.+78     	; 0x1f2c <__pack_f+0x152>
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	24 c0       	rjmp	.+72     	; 0x1f2c <__pack_f+0x152>
    1ee4:	80 38       	cpi	r24, 0x80	; 128
    1ee6:	91 05       	cpc	r25, r1
    1ee8:	7c f5       	brge	.+94     	; 0x1f48 <__pack_f+0x16e>
    1eea:	8a 01       	movw	r16, r20
    1eec:	9b 01       	movw	r18, r22
    1eee:	0f 77       	andi	r16, 0x7F	; 127
    1ef0:	10 70       	andi	r17, 0x00	; 0
    1ef2:	20 70       	andi	r18, 0x00	; 0
    1ef4:	30 70       	andi	r19, 0x00	; 0
    1ef6:	00 34       	cpi	r16, 0x40	; 64
    1ef8:	11 05       	cpc	r17, r1
    1efa:	21 05       	cpc	r18, r1
    1efc:	31 05       	cpc	r19, r1
    1efe:	39 f4       	brne	.+14     	; 0x1f0e <__pack_f+0x134>
    1f00:	47 ff       	sbrs	r20, 7
    1f02:	09 c0       	rjmp	.+18     	; 0x1f16 <__pack_f+0x13c>
    1f04:	40 5c       	subi	r20, 0xC0	; 192
    1f06:	5f 4f       	sbci	r21, 0xFF	; 255
    1f08:	6f 4f       	sbci	r22, 0xFF	; 255
    1f0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0c:	04 c0       	rjmp	.+8      	; 0x1f16 <__pack_f+0x13c>
    1f0e:	41 5c       	subi	r20, 0xC1	; 193
    1f10:	5f 4f       	sbci	r21, 0xFF	; 255
    1f12:	6f 4f       	sbci	r22, 0xFF	; 255
    1f14:	7f 4f       	sbci	r23, 0xFF	; 255
    1f16:	77 fd       	sbrc	r23, 7
    1f18:	03 c0       	rjmp	.+6      	; 0x1f20 <__pack_f+0x146>
    1f1a:	81 58       	subi	r24, 0x81	; 129
    1f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f1e:	06 c0       	rjmp	.+12     	; 0x1f2c <__pack_f+0x152>
    1f20:	76 95       	lsr	r23
    1f22:	67 95       	ror	r22
    1f24:	57 95       	ror	r21
    1f26:	47 95       	ror	r20
    1f28:	80 58       	subi	r24, 0x80	; 128
    1f2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f2c:	97 e0       	ldi	r25, 0x07	; 7
    1f2e:	76 95       	lsr	r23
    1f30:	67 95       	ror	r22
    1f32:	57 95       	ror	r21
    1f34:	47 95       	ror	r20
    1f36:	9a 95       	dec	r25
    1f38:	d1 f7       	brne	.-12     	; 0x1f2e <__pack_f+0x154>
    1f3a:	0b c0       	rjmp	.+22     	; 0x1f52 <__pack_f+0x178>
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	05 c0       	rjmp	.+10     	; 0x1f4c <__pack_f+0x172>
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	05 c0       	rjmp	.+10     	; 0x1f52 <__pack_f+0x178>
    1f48:	8f ef       	ldi	r24, 0xFF	; 255
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	40 e0       	ldi	r20, 0x00	; 0
    1f4e:	50 e0       	ldi	r21, 0x00	; 0
    1f50:	ba 01       	movw	r22, r20
    1f52:	98 2f       	mov	r25, r24
    1f54:	97 95       	ror	r25
    1f56:	99 27       	eor	r25, r25
    1f58:	97 95       	ror	r25
    1f5a:	a6 2f       	mov	r26, r22
    1f5c:	af 77       	andi	r26, 0x7F	; 127
    1f5e:	e7 95       	ror	r30
    1f60:	ee 27       	eor	r30, r30
    1f62:	e7 95       	ror	r30
    1f64:	86 95       	lsr	r24
    1f66:	3a 2f       	mov	r19, r26
    1f68:	39 2b       	or	r19, r25
    1f6a:	28 2f       	mov	r18, r24
    1f6c:	2e 2b       	or	r18, r30
    1f6e:	84 2f       	mov	r24, r20
    1f70:	95 2f       	mov	r25, r21
    1f72:	a3 2f       	mov	r26, r19
    1f74:	b2 2f       	mov	r27, r18
    1f76:	bc 01       	movw	r22, r24
    1f78:	cd 01       	movw	r24, r26
    1f7a:	1f 91       	pop	r17
    1f7c:	0f 91       	pop	r16
    1f7e:	ff 90       	pop	r15
    1f80:	ef 90       	pop	r14
    1f82:	df 90       	pop	r13
    1f84:	cf 90       	pop	r12
    1f86:	08 95       	ret

00001f88 <__unpack_f>:
    1f88:	dc 01       	movw	r26, r24
    1f8a:	fb 01       	movw	r30, r22
    1f8c:	4c 91       	ld	r20, X
    1f8e:	11 96       	adiw	r26, 0x01	; 1
    1f90:	5c 91       	ld	r21, X
    1f92:	11 97       	sbiw	r26, 0x01	; 1
    1f94:	12 96       	adiw	r26, 0x02	; 2
    1f96:	8c 91       	ld	r24, X
    1f98:	12 97       	sbiw	r26, 0x02	; 2
    1f9a:	68 2f       	mov	r22, r24
    1f9c:	6f 77       	andi	r22, 0x7F	; 127
    1f9e:	70 e0       	ldi	r23, 0x00	; 0
    1fa0:	98 2f       	mov	r25, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	99 27       	eor	r25, r25
    1fa6:	99 1f       	adc	r25, r25
    1fa8:	13 96       	adiw	r26, 0x03	; 3
    1faa:	2c 91       	ld	r18, X
    1fac:	13 97       	sbiw	r26, 0x03	; 3
    1fae:	82 2f       	mov	r24, r18
    1fb0:	88 0f       	add	r24, r24
    1fb2:	89 2b       	or	r24, r25
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	22 1f       	adc	r18, r18
    1fb8:	22 27       	eor	r18, r18
    1fba:	22 1f       	adc	r18, r18
    1fbc:	21 83       	std	Z+1, r18	; 0x01
    1fbe:	00 97       	sbiw	r24, 0x00	; 0
    1fc0:	39 f5       	brne	.+78     	; 0x2010 <__unpack_f+0x88>
    1fc2:	41 15       	cp	r20, r1
    1fc4:	51 05       	cpc	r21, r1
    1fc6:	61 05       	cpc	r22, r1
    1fc8:	71 05       	cpc	r23, r1
    1fca:	11 f4       	brne	.+4      	; 0x1fd0 <__unpack_f+0x48>
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	29 c0       	rjmp	.+82     	; 0x2022 <__unpack_f+0x9a>
    1fd0:	82 e8       	ldi	r24, 0x82	; 130
    1fd2:	9f ef       	ldi	r25, 0xFF	; 255
    1fd4:	93 83       	std	Z+3, r25	; 0x03
    1fd6:	82 83       	std	Z+2, r24	; 0x02
    1fd8:	27 e0       	ldi	r18, 0x07	; 7
    1fda:	44 0f       	add	r20, r20
    1fdc:	55 1f       	adc	r21, r21
    1fde:	66 1f       	adc	r22, r22
    1fe0:	77 1f       	adc	r23, r23
    1fe2:	2a 95       	dec	r18
    1fe4:	d1 f7       	brne	.-12     	; 0x1fda <__unpack_f+0x52>
    1fe6:	83 e0       	ldi	r24, 0x03	; 3
    1fe8:	80 83       	st	Z, r24
    1fea:	09 c0       	rjmp	.+18     	; 0x1ffe <__unpack_f+0x76>
    1fec:	44 0f       	add	r20, r20
    1fee:	55 1f       	adc	r21, r21
    1ff0:	66 1f       	adc	r22, r22
    1ff2:	77 1f       	adc	r23, r23
    1ff4:	82 81       	ldd	r24, Z+2	; 0x02
    1ff6:	93 81       	ldd	r25, Z+3	; 0x03
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	93 83       	std	Z+3, r25	; 0x03
    1ffc:	82 83       	std	Z+2, r24	; 0x02
    1ffe:	40 30       	cpi	r20, 0x00	; 0
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	58 07       	cpc	r21, r24
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	68 07       	cpc	r22, r24
    2008:	80 e4       	ldi	r24, 0x40	; 64
    200a:	78 07       	cpc	r23, r24
    200c:	78 f3       	brcs	.-34     	; 0x1fec <__unpack_f+0x64>
    200e:	20 c0       	rjmp	.+64     	; 0x2050 <__unpack_f+0xc8>
    2010:	8f 3f       	cpi	r24, 0xFF	; 255
    2012:	91 05       	cpc	r25, r1
    2014:	79 f4       	brne	.+30     	; 0x2034 <__unpack_f+0xac>
    2016:	41 15       	cp	r20, r1
    2018:	51 05       	cpc	r21, r1
    201a:	61 05       	cpc	r22, r1
    201c:	71 05       	cpc	r23, r1
    201e:	19 f4       	brne	.+6      	; 0x2026 <__unpack_f+0x9e>
    2020:	84 e0       	ldi	r24, 0x04	; 4
    2022:	80 83       	st	Z, r24
    2024:	08 95       	ret
    2026:	64 ff       	sbrs	r22, 4
    2028:	03 c0       	rjmp	.+6      	; 0x2030 <__unpack_f+0xa8>
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	80 83       	st	Z, r24
    202e:	10 c0       	rjmp	.+32     	; 0x2050 <__unpack_f+0xc8>
    2030:	10 82       	st	Z, r1
    2032:	0e c0       	rjmp	.+28     	; 0x2050 <__unpack_f+0xc8>
    2034:	8f 57       	subi	r24, 0x7F	; 127
    2036:	90 40       	sbci	r25, 0x00	; 0
    2038:	93 83       	std	Z+3, r25	; 0x03
    203a:	82 83       	std	Z+2, r24	; 0x02
    203c:	83 e0       	ldi	r24, 0x03	; 3
    203e:	80 83       	st	Z, r24
    2040:	87 e0       	ldi	r24, 0x07	; 7
    2042:	44 0f       	add	r20, r20
    2044:	55 1f       	adc	r21, r21
    2046:	66 1f       	adc	r22, r22
    2048:	77 1f       	adc	r23, r23
    204a:	8a 95       	dec	r24
    204c:	d1 f7       	brne	.-12     	; 0x2042 <__unpack_f+0xba>
    204e:	70 64       	ori	r23, 0x40	; 64
    2050:	44 83       	std	Z+4, r20	; 0x04
    2052:	55 83       	std	Z+5, r21	; 0x05
    2054:	66 83       	std	Z+6, r22	; 0x06
    2056:	77 83       	std	Z+7, r23	; 0x07
    2058:	08 95       	ret

0000205a <__fpcmp_parts_f>:
    205a:	cf 93       	push	r28
    205c:	fc 01       	movw	r30, r24
    205e:	db 01       	movw	r26, r22
    2060:	90 81       	ld	r25, Z
    2062:	92 30       	cpi	r25, 0x02	; 2
    2064:	08 f4       	brcc	.+2      	; 0x2068 <__fpcmp_parts_f+0xe>
    2066:	4c c0       	rjmp	.+152    	; 0x2100 <__fpcmp_parts_f+0xa6>
    2068:	8c 91       	ld	r24, X
    206a:	82 30       	cpi	r24, 0x02	; 2
    206c:	08 f4       	brcc	.+2      	; 0x2070 <__fpcmp_parts_f+0x16>
    206e:	48 c0       	rjmp	.+144    	; 0x2100 <__fpcmp_parts_f+0xa6>
    2070:	94 30       	cpi	r25, 0x04	; 4
    2072:	69 f4       	brne	.+26     	; 0x208e <__fpcmp_parts_f+0x34>
    2074:	21 81       	ldd	r18, Z+1	; 0x01
    2076:	84 30       	cpi	r24, 0x04	; 4
    2078:	39 f4       	brne	.+14     	; 0x2088 <__fpcmp_parts_f+0x2e>
    207a:	11 96       	adiw	r26, 0x01	; 1
    207c:	8c 91       	ld	r24, X
    207e:	11 97       	sbiw	r26, 0x01	; 1
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	82 1b       	sub	r24, r18
    2084:	91 09       	sbc	r25, r1
    2086:	44 c0       	rjmp	.+136    	; 0x2110 <__fpcmp_parts_f+0xb6>
    2088:	22 23       	and	r18, r18
    208a:	d1 f1       	breq	.+116    	; 0x2100 <__fpcmp_parts_f+0xa6>
    208c:	3f c0       	rjmp	.+126    	; 0x210c <__fpcmp_parts_f+0xb2>
    208e:	84 30       	cpi	r24, 0x04	; 4
    2090:	21 f0       	breq	.+8      	; 0x209a <__fpcmp_parts_f+0x40>
    2092:	92 30       	cpi	r25, 0x02	; 2
    2094:	41 f4       	brne	.+16     	; 0x20a6 <__fpcmp_parts_f+0x4c>
    2096:	82 30       	cpi	r24, 0x02	; 2
    2098:	b1 f1       	breq	.+108    	; 0x2106 <__fpcmp_parts_f+0xac>
    209a:	11 96       	adiw	r26, 0x01	; 1
    209c:	8c 91       	ld	r24, X
    209e:	11 97       	sbiw	r26, 0x01	; 1
    20a0:	88 23       	and	r24, r24
    20a2:	a1 f1       	breq	.+104    	; 0x210c <__fpcmp_parts_f+0xb2>
    20a4:	2d c0       	rjmp	.+90     	; 0x2100 <__fpcmp_parts_f+0xa6>
    20a6:	c1 81       	ldd	r28, Z+1	; 0x01
    20a8:	82 30       	cpi	r24, 0x02	; 2
    20aa:	01 f1       	breq	.+64     	; 0x20ec <__fpcmp_parts_f+0x92>
    20ac:	11 96       	adiw	r26, 0x01	; 1
    20ae:	8c 91       	ld	r24, X
    20b0:	11 97       	sbiw	r26, 0x01	; 1
    20b2:	c8 17       	cp	r28, r24
    20b4:	d9 f4       	brne	.+54     	; 0x20ec <__fpcmp_parts_f+0x92>
    20b6:	82 81       	ldd	r24, Z+2	; 0x02
    20b8:	93 81       	ldd	r25, Z+3	; 0x03
    20ba:	12 96       	adiw	r26, 0x02	; 2
    20bc:	2d 91       	ld	r18, X+
    20be:	3c 91       	ld	r19, X
    20c0:	13 97       	sbiw	r26, 0x03	; 3
    20c2:	28 17       	cp	r18, r24
    20c4:	39 07       	cpc	r19, r25
    20c6:	94 f0       	brlt	.+36     	; 0x20ec <__fpcmp_parts_f+0x92>
    20c8:	82 17       	cp	r24, r18
    20ca:	93 07       	cpc	r25, r19
    20cc:	bc f0       	brlt	.+46     	; 0x20fc <__fpcmp_parts_f+0xa2>
    20ce:	44 81       	ldd	r20, Z+4	; 0x04
    20d0:	55 81       	ldd	r21, Z+5	; 0x05
    20d2:	66 81       	ldd	r22, Z+6	; 0x06
    20d4:	77 81       	ldd	r23, Z+7	; 0x07
    20d6:	14 96       	adiw	r26, 0x04	; 4
    20d8:	8d 91       	ld	r24, X+
    20da:	9d 91       	ld	r25, X+
    20dc:	0d 90       	ld	r0, X+
    20de:	bc 91       	ld	r27, X
    20e0:	a0 2d       	mov	r26, r0
    20e2:	84 17       	cp	r24, r20
    20e4:	95 07       	cpc	r25, r21
    20e6:	a6 07       	cpc	r26, r22
    20e8:	b7 07       	cpc	r27, r23
    20ea:	18 f4       	brcc	.+6      	; 0x20f2 <__fpcmp_parts_f+0x98>
    20ec:	cc 23       	and	r28, r28
    20ee:	41 f0       	breq	.+16     	; 0x2100 <__fpcmp_parts_f+0xa6>
    20f0:	0d c0       	rjmp	.+26     	; 0x210c <__fpcmp_parts_f+0xb2>
    20f2:	48 17       	cp	r20, r24
    20f4:	59 07       	cpc	r21, r25
    20f6:	6a 07       	cpc	r22, r26
    20f8:	7b 07       	cpc	r23, r27
    20fa:	28 f4       	brcc	.+10     	; 0x2106 <__fpcmp_parts_f+0xac>
    20fc:	cc 23       	and	r28, r28
    20fe:	31 f0       	breq	.+12     	; 0x210c <__fpcmp_parts_f+0xb2>
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	05 c0       	rjmp	.+10     	; 0x2110 <__fpcmp_parts_f+0xb6>
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <__fpcmp_parts_f+0xb6>
    210c:	8f ef       	ldi	r24, 0xFF	; 255
    210e:	9f ef       	ldi	r25, 0xFF	; 255
    2110:	cf 91       	pop	r28
    2112:	08 95       	ret

00002114 <__divmodhi4>:
    2114:	97 fb       	bst	r25, 7
    2116:	09 2e       	mov	r0, r25
    2118:	07 26       	eor	r0, r23
    211a:	0a d0       	rcall	.+20     	; 0x2130 <__divmodhi4_neg1>
    211c:	77 fd       	sbrc	r23, 7
    211e:	04 d0       	rcall	.+8      	; 0x2128 <__divmodhi4_neg2>
    2120:	0c d0       	rcall	.+24     	; 0x213a <__udivmodhi4>
    2122:	06 d0       	rcall	.+12     	; 0x2130 <__divmodhi4_neg1>
    2124:	00 20       	and	r0, r0
    2126:	1a f4       	brpl	.+6      	; 0x212e <__divmodhi4_exit>

00002128 <__divmodhi4_neg2>:
    2128:	70 95       	com	r23
    212a:	61 95       	neg	r22
    212c:	7f 4f       	sbci	r23, 0xFF	; 255

0000212e <__divmodhi4_exit>:
    212e:	08 95       	ret

00002130 <__divmodhi4_neg1>:
    2130:	f6 f7       	brtc	.-4      	; 0x212e <__divmodhi4_exit>
    2132:	90 95       	com	r25
    2134:	81 95       	neg	r24
    2136:	9f 4f       	sbci	r25, 0xFF	; 255
    2138:	08 95       	ret

0000213a <__udivmodhi4>:
    213a:	aa 1b       	sub	r26, r26
    213c:	bb 1b       	sub	r27, r27
    213e:	51 e1       	ldi	r21, 0x11	; 17
    2140:	07 c0       	rjmp	.+14     	; 0x2150 <__udivmodhi4_ep>

00002142 <__udivmodhi4_loop>:
    2142:	aa 1f       	adc	r26, r26
    2144:	bb 1f       	adc	r27, r27
    2146:	a6 17       	cp	r26, r22
    2148:	b7 07       	cpc	r27, r23
    214a:	10 f0       	brcs	.+4      	; 0x2150 <__udivmodhi4_ep>
    214c:	a6 1b       	sub	r26, r22
    214e:	b7 0b       	sbc	r27, r23

00002150 <__udivmodhi4_ep>:
    2150:	88 1f       	adc	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	5a 95       	dec	r21
    2156:	a9 f7       	brne	.-22     	; 0x2142 <__udivmodhi4_loop>
    2158:	80 95       	com	r24
    215a:	90 95       	com	r25
    215c:	bc 01       	movw	r22, r24
    215e:	cd 01       	movw	r24, r26
    2160:	08 95       	ret

00002162 <__prologue_saves__>:
    2162:	2f 92       	push	r2
    2164:	3f 92       	push	r3
    2166:	4f 92       	push	r4
    2168:	5f 92       	push	r5
    216a:	6f 92       	push	r6
    216c:	7f 92       	push	r7
    216e:	8f 92       	push	r8
    2170:	9f 92       	push	r9
    2172:	af 92       	push	r10
    2174:	bf 92       	push	r11
    2176:	cf 92       	push	r12
    2178:	df 92       	push	r13
    217a:	ef 92       	push	r14
    217c:	ff 92       	push	r15
    217e:	0f 93       	push	r16
    2180:	1f 93       	push	r17
    2182:	cf 93       	push	r28
    2184:	df 93       	push	r29
    2186:	cd b7       	in	r28, 0x3d	; 61
    2188:	de b7       	in	r29, 0x3e	; 62
    218a:	ca 1b       	sub	r28, r26
    218c:	db 0b       	sbc	r29, r27
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	f8 94       	cli
    2192:	de bf       	out	0x3e, r29	; 62
    2194:	0f be       	out	0x3f, r0	; 63
    2196:	cd bf       	out	0x3d, r28	; 61
    2198:	09 94       	ijmp

0000219a <__epilogue_restores__>:
    219a:	2a 88       	ldd	r2, Y+18	; 0x12
    219c:	39 88       	ldd	r3, Y+17	; 0x11
    219e:	48 88       	ldd	r4, Y+16	; 0x10
    21a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    21a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    21a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    21a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    21a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    21aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    21ac:	b9 84       	ldd	r11, Y+9	; 0x09
    21ae:	c8 84       	ldd	r12, Y+8	; 0x08
    21b0:	df 80       	ldd	r13, Y+7	; 0x07
    21b2:	ee 80       	ldd	r14, Y+6	; 0x06
    21b4:	fd 80       	ldd	r15, Y+5	; 0x05
    21b6:	0c 81       	ldd	r16, Y+4	; 0x04
    21b8:	1b 81       	ldd	r17, Y+3	; 0x03
    21ba:	aa 81       	ldd	r26, Y+2	; 0x02
    21bc:	b9 81       	ldd	r27, Y+1	; 0x01
    21be:	ce 0f       	add	r28, r30
    21c0:	d1 1d       	adc	r29, r1
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	f8 94       	cli
    21c6:	de bf       	out	0x3e, r29	; 62
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	ed 01       	movw	r28, r26
    21ce:	08 95       	ret

000021d0 <sprintf>:
    21d0:	0f 93       	push	r16
    21d2:	1f 93       	push	r17
    21d4:	cf 93       	push	r28
    21d6:	df 93       	push	r29
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
    21dc:	2e 97       	sbiw	r28, 0x0e	; 14
    21de:	0f b6       	in	r0, 0x3f	; 63
    21e0:	f8 94       	cli
    21e2:	de bf       	out	0x3e, r29	; 62
    21e4:	0f be       	out	0x3f, r0	; 63
    21e6:	cd bf       	out	0x3d, r28	; 61
    21e8:	0d 89       	ldd	r16, Y+21	; 0x15
    21ea:	1e 89       	ldd	r17, Y+22	; 0x16
    21ec:	86 e0       	ldi	r24, 0x06	; 6
    21ee:	8c 83       	std	Y+4, r24	; 0x04
    21f0:	1a 83       	std	Y+2, r17	; 0x02
    21f2:	09 83       	std	Y+1, r16	; 0x01
    21f4:	8f ef       	ldi	r24, 0xFF	; 255
    21f6:	9f e7       	ldi	r25, 0x7F	; 127
    21f8:	9e 83       	std	Y+6, r25	; 0x06
    21fa:	8d 83       	std	Y+5, r24	; 0x05
    21fc:	ae 01       	movw	r20, r28
    21fe:	47 5e       	subi	r20, 0xE7	; 231
    2200:	5f 4f       	sbci	r21, 0xFF	; 255
    2202:	ce 01       	movw	r24, r28
    2204:	01 96       	adiw	r24, 0x01	; 1
    2206:	6f 89       	ldd	r22, Y+23	; 0x17
    2208:	78 8d       	ldd	r23, Y+24	; 0x18
    220a:	0e 94 17 11 	call	0x222e	; 0x222e <vfprintf>
    220e:	ef 81       	ldd	r30, Y+7	; 0x07
    2210:	f8 85       	ldd	r31, Y+8	; 0x08
    2212:	e0 0f       	add	r30, r16
    2214:	f1 1f       	adc	r31, r17
    2216:	10 82       	st	Z, r1
    2218:	2e 96       	adiw	r28, 0x0e	; 14
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	cd bf       	out	0x3d, r28	; 61
    2224:	df 91       	pop	r29
    2226:	cf 91       	pop	r28
    2228:	1f 91       	pop	r17
    222a:	0f 91       	pop	r16
    222c:	08 95       	ret

0000222e <vfprintf>:
    222e:	2f 92       	push	r2
    2230:	3f 92       	push	r3
    2232:	4f 92       	push	r4
    2234:	5f 92       	push	r5
    2236:	6f 92       	push	r6
    2238:	7f 92       	push	r7
    223a:	8f 92       	push	r8
    223c:	9f 92       	push	r9
    223e:	af 92       	push	r10
    2240:	bf 92       	push	r11
    2242:	cf 92       	push	r12
    2244:	df 92       	push	r13
    2246:	ef 92       	push	r14
    2248:	ff 92       	push	r15
    224a:	0f 93       	push	r16
    224c:	1f 93       	push	r17
    224e:	cf 93       	push	r28
    2250:	df 93       	push	r29
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	2d 97       	sbiw	r28, 0x0d	; 13
    2258:	0f b6       	in	r0, 0x3f	; 63
    225a:	f8 94       	cli
    225c:	de bf       	out	0x3e, r29	; 62
    225e:	0f be       	out	0x3f, r0	; 63
    2260:	cd bf       	out	0x3d, r28	; 61
    2262:	3c 01       	movw	r6, r24
    2264:	7d 87       	std	Y+13, r23	; 0x0d
    2266:	6c 87       	std	Y+12, r22	; 0x0c
    2268:	5a 01       	movw	r10, r20
    226a:	fc 01       	movw	r30, r24
    226c:	17 82       	std	Z+7, r1	; 0x07
    226e:	16 82       	std	Z+6, r1	; 0x06
    2270:	83 81       	ldd	r24, Z+3	; 0x03
    2272:	81 ff       	sbrs	r24, 1
    2274:	c8 c1       	rjmp	.+912    	; 0x2606 <vfprintf+0x3d8>
    2276:	2e 01       	movw	r4, r28
    2278:	08 94       	sec
    227a:	41 1c       	adc	r4, r1
    227c:	51 1c       	adc	r5, r1
    227e:	f3 01       	movw	r30, r6
    2280:	93 81       	ldd	r25, Z+3	; 0x03
    2282:	ec 85       	ldd	r30, Y+12	; 0x0c
    2284:	fd 85       	ldd	r31, Y+13	; 0x0d
    2286:	93 fd       	sbrc	r25, 3
    2288:	85 91       	lpm	r24, Z+
    228a:	93 ff       	sbrs	r25, 3
    228c:	81 91       	ld	r24, Z+
    228e:	fd 87       	std	Y+13, r31	; 0x0d
    2290:	ec 87       	std	Y+12, r30	; 0x0c
    2292:	88 23       	and	r24, r24
    2294:	09 f4       	brne	.+2      	; 0x2298 <vfprintf+0x6a>
    2296:	b3 c1       	rjmp	.+870    	; 0x25fe <vfprintf+0x3d0>
    2298:	85 32       	cpi	r24, 0x25	; 37
    229a:	41 f4       	brne	.+16     	; 0x22ac <vfprintf+0x7e>
    229c:	93 fd       	sbrc	r25, 3
    229e:	85 91       	lpm	r24, Z+
    22a0:	93 ff       	sbrs	r25, 3
    22a2:	81 91       	ld	r24, Z+
    22a4:	fd 87       	std	Y+13, r31	; 0x0d
    22a6:	ec 87       	std	Y+12, r30	; 0x0c
    22a8:	85 32       	cpi	r24, 0x25	; 37
    22aa:	29 f4       	brne	.+10     	; 0x22b6 <vfprintf+0x88>
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	b3 01       	movw	r22, r6
    22b0:	0e 94 34 13 	call	0x2668	; 0x2668 <fputc>
    22b4:	e4 cf       	rjmp	.-56     	; 0x227e <vfprintf+0x50>
    22b6:	ff 24       	eor	r15, r15
    22b8:	ee 24       	eor	r14, r14
    22ba:	10 e0       	ldi	r17, 0x00	; 0
    22bc:	10 32       	cpi	r17, 0x20	; 32
    22be:	b0 f4       	brcc	.+44     	; 0x22ec <vfprintf+0xbe>
    22c0:	8b 32       	cpi	r24, 0x2B	; 43
    22c2:	69 f0       	breq	.+26     	; 0x22de <vfprintf+0xb0>
    22c4:	8c 32       	cpi	r24, 0x2C	; 44
    22c6:	28 f4       	brcc	.+10     	; 0x22d2 <vfprintf+0xa4>
    22c8:	80 32       	cpi	r24, 0x20	; 32
    22ca:	51 f0       	breq	.+20     	; 0x22e0 <vfprintf+0xb2>
    22cc:	83 32       	cpi	r24, 0x23	; 35
    22ce:	71 f4       	brne	.+28     	; 0x22ec <vfprintf+0xbe>
    22d0:	0b c0       	rjmp	.+22     	; 0x22e8 <vfprintf+0xba>
    22d2:	8d 32       	cpi	r24, 0x2D	; 45
    22d4:	39 f0       	breq	.+14     	; 0x22e4 <vfprintf+0xb6>
    22d6:	80 33       	cpi	r24, 0x30	; 48
    22d8:	49 f4       	brne	.+18     	; 0x22ec <vfprintf+0xbe>
    22da:	11 60       	ori	r17, 0x01	; 1
    22dc:	2c c0       	rjmp	.+88     	; 0x2336 <vfprintf+0x108>
    22de:	12 60       	ori	r17, 0x02	; 2
    22e0:	14 60       	ori	r17, 0x04	; 4
    22e2:	29 c0       	rjmp	.+82     	; 0x2336 <vfprintf+0x108>
    22e4:	18 60       	ori	r17, 0x08	; 8
    22e6:	27 c0       	rjmp	.+78     	; 0x2336 <vfprintf+0x108>
    22e8:	10 61       	ori	r17, 0x10	; 16
    22ea:	25 c0       	rjmp	.+74     	; 0x2336 <vfprintf+0x108>
    22ec:	17 fd       	sbrc	r17, 7
    22ee:	2e c0       	rjmp	.+92     	; 0x234c <vfprintf+0x11e>
    22f0:	28 2f       	mov	r18, r24
    22f2:	20 53       	subi	r18, 0x30	; 48
    22f4:	2a 30       	cpi	r18, 0x0A	; 10
    22f6:	98 f4       	brcc	.+38     	; 0x231e <vfprintf+0xf0>
    22f8:	16 ff       	sbrs	r17, 6
    22fa:	08 c0       	rjmp	.+16     	; 0x230c <vfprintf+0xde>
    22fc:	8f 2d       	mov	r24, r15
    22fe:	88 0f       	add	r24, r24
    2300:	f8 2e       	mov	r15, r24
    2302:	ff 0c       	add	r15, r15
    2304:	ff 0c       	add	r15, r15
    2306:	f8 0e       	add	r15, r24
    2308:	f2 0e       	add	r15, r18
    230a:	15 c0       	rjmp	.+42     	; 0x2336 <vfprintf+0x108>
    230c:	8e 2d       	mov	r24, r14
    230e:	88 0f       	add	r24, r24
    2310:	e8 2e       	mov	r14, r24
    2312:	ee 0c       	add	r14, r14
    2314:	ee 0c       	add	r14, r14
    2316:	e8 0e       	add	r14, r24
    2318:	e2 0e       	add	r14, r18
    231a:	10 62       	ori	r17, 0x20	; 32
    231c:	0c c0       	rjmp	.+24     	; 0x2336 <vfprintf+0x108>
    231e:	8e 32       	cpi	r24, 0x2E	; 46
    2320:	21 f4       	brne	.+8      	; 0x232a <vfprintf+0xfc>
    2322:	16 fd       	sbrc	r17, 6
    2324:	6c c1       	rjmp	.+728    	; 0x25fe <vfprintf+0x3d0>
    2326:	10 64       	ori	r17, 0x40	; 64
    2328:	06 c0       	rjmp	.+12     	; 0x2336 <vfprintf+0x108>
    232a:	8c 36       	cpi	r24, 0x6C	; 108
    232c:	11 f4       	brne	.+4      	; 0x2332 <vfprintf+0x104>
    232e:	10 68       	ori	r17, 0x80	; 128
    2330:	02 c0       	rjmp	.+4      	; 0x2336 <vfprintf+0x108>
    2332:	88 36       	cpi	r24, 0x68	; 104
    2334:	59 f4       	brne	.+22     	; 0x234c <vfprintf+0x11e>
    2336:	ec 85       	ldd	r30, Y+12	; 0x0c
    2338:	fd 85       	ldd	r31, Y+13	; 0x0d
    233a:	93 fd       	sbrc	r25, 3
    233c:	85 91       	lpm	r24, Z+
    233e:	93 ff       	sbrs	r25, 3
    2340:	81 91       	ld	r24, Z+
    2342:	fd 87       	std	Y+13, r31	; 0x0d
    2344:	ec 87       	std	Y+12, r30	; 0x0c
    2346:	88 23       	and	r24, r24
    2348:	09 f0       	breq	.+2      	; 0x234c <vfprintf+0x11e>
    234a:	b8 cf       	rjmp	.-144    	; 0x22bc <vfprintf+0x8e>
    234c:	98 2f       	mov	r25, r24
    234e:	95 54       	subi	r25, 0x45	; 69
    2350:	93 30       	cpi	r25, 0x03	; 3
    2352:	18 f0       	brcs	.+6      	; 0x235a <vfprintf+0x12c>
    2354:	90 52       	subi	r25, 0x20	; 32
    2356:	93 30       	cpi	r25, 0x03	; 3
    2358:	38 f4       	brcc	.+14     	; 0x2368 <vfprintf+0x13a>
    235a:	24 e0       	ldi	r18, 0x04	; 4
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	a2 0e       	add	r10, r18
    2360:	b3 1e       	adc	r11, r19
    2362:	3f e3       	ldi	r19, 0x3F	; 63
    2364:	39 83       	std	Y+1, r19	; 0x01
    2366:	0f c0       	rjmp	.+30     	; 0x2386 <vfprintf+0x158>
    2368:	83 36       	cpi	r24, 0x63	; 99
    236a:	31 f0       	breq	.+12     	; 0x2378 <vfprintf+0x14a>
    236c:	83 37       	cpi	r24, 0x73	; 115
    236e:	81 f0       	breq	.+32     	; 0x2390 <vfprintf+0x162>
    2370:	83 35       	cpi	r24, 0x53	; 83
    2372:	09 f0       	breq	.+2      	; 0x2376 <vfprintf+0x148>
    2374:	5a c0       	rjmp	.+180    	; 0x242a <vfprintf+0x1fc>
    2376:	22 c0       	rjmp	.+68     	; 0x23bc <vfprintf+0x18e>
    2378:	f5 01       	movw	r30, r10
    237a:	80 81       	ld	r24, Z
    237c:	89 83       	std	Y+1, r24	; 0x01
    237e:	22 e0       	ldi	r18, 0x02	; 2
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	a2 0e       	add	r10, r18
    2384:	b3 1e       	adc	r11, r19
    2386:	21 e0       	ldi	r18, 0x01	; 1
    2388:	c2 2e       	mov	r12, r18
    238a:	d1 2c       	mov	r13, r1
    238c:	42 01       	movw	r8, r4
    238e:	14 c0       	rjmp	.+40     	; 0x23b8 <vfprintf+0x18a>
    2390:	92 e0       	ldi	r25, 0x02	; 2
    2392:	29 2e       	mov	r2, r25
    2394:	31 2c       	mov	r3, r1
    2396:	2a 0c       	add	r2, r10
    2398:	3b 1c       	adc	r3, r11
    239a:	f5 01       	movw	r30, r10
    239c:	80 80       	ld	r8, Z
    239e:	91 80       	ldd	r9, Z+1	; 0x01
    23a0:	16 ff       	sbrs	r17, 6
    23a2:	03 c0       	rjmp	.+6      	; 0x23aa <vfprintf+0x17c>
    23a4:	6f 2d       	mov	r22, r15
    23a6:	70 e0       	ldi	r23, 0x00	; 0
    23a8:	02 c0       	rjmp	.+4      	; 0x23ae <vfprintf+0x180>
    23aa:	6f ef       	ldi	r22, 0xFF	; 255
    23ac:	7f ef       	ldi	r23, 0xFF	; 255
    23ae:	c4 01       	movw	r24, r8
    23b0:	0e 94 29 13 	call	0x2652	; 0x2652 <strnlen>
    23b4:	6c 01       	movw	r12, r24
    23b6:	51 01       	movw	r10, r2
    23b8:	1f 77       	andi	r17, 0x7F	; 127
    23ba:	15 c0       	rjmp	.+42     	; 0x23e6 <vfprintf+0x1b8>
    23bc:	82 e0       	ldi	r24, 0x02	; 2
    23be:	28 2e       	mov	r2, r24
    23c0:	31 2c       	mov	r3, r1
    23c2:	2a 0c       	add	r2, r10
    23c4:	3b 1c       	adc	r3, r11
    23c6:	f5 01       	movw	r30, r10
    23c8:	80 80       	ld	r8, Z
    23ca:	91 80       	ldd	r9, Z+1	; 0x01
    23cc:	16 ff       	sbrs	r17, 6
    23ce:	03 c0       	rjmp	.+6      	; 0x23d6 <vfprintf+0x1a8>
    23d0:	6f 2d       	mov	r22, r15
    23d2:	70 e0       	ldi	r23, 0x00	; 0
    23d4:	02 c0       	rjmp	.+4      	; 0x23da <vfprintf+0x1ac>
    23d6:	6f ef       	ldi	r22, 0xFF	; 255
    23d8:	7f ef       	ldi	r23, 0xFF	; 255
    23da:	c4 01       	movw	r24, r8
    23dc:	0e 94 1e 13 	call	0x263c	; 0x263c <strnlen_P>
    23e0:	6c 01       	movw	r12, r24
    23e2:	10 68       	ori	r17, 0x80	; 128
    23e4:	51 01       	movw	r10, r2
    23e6:	13 fd       	sbrc	r17, 3
    23e8:	1c c0       	rjmp	.+56     	; 0x2422 <vfprintf+0x1f4>
    23ea:	06 c0       	rjmp	.+12     	; 0x23f8 <vfprintf+0x1ca>
    23ec:	80 e2       	ldi	r24, 0x20	; 32
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	b3 01       	movw	r22, r6
    23f2:	0e 94 34 13 	call	0x2668	; 0x2668 <fputc>
    23f6:	ea 94       	dec	r14
    23f8:	8e 2d       	mov	r24, r14
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	c8 16       	cp	r12, r24
    23fe:	d9 06       	cpc	r13, r25
    2400:	a8 f3       	brcs	.-22     	; 0x23ec <vfprintf+0x1be>
    2402:	0f c0       	rjmp	.+30     	; 0x2422 <vfprintf+0x1f4>
    2404:	f4 01       	movw	r30, r8
    2406:	17 fd       	sbrc	r17, 7
    2408:	85 91       	lpm	r24, Z+
    240a:	17 ff       	sbrs	r17, 7
    240c:	81 91       	ld	r24, Z+
    240e:	4f 01       	movw	r8, r30
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	b3 01       	movw	r22, r6
    2414:	0e 94 34 13 	call	0x2668	; 0x2668 <fputc>
    2418:	e1 10       	cpse	r14, r1
    241a:	ea 94       	dec	r14
    241c:	08 94       	sec
    241e:	c1 08       	sbc	r12, r1
    2420:	d1 08       	sbc	r13, r1
    2422:	c1 14       	cp	r12, r1
    2424:	d1 04       	cpc	r13, r1
    2426:	71 f7       	brne	.-36     	; 0x2404 <vfprintf+0x1d6>
    2428:	e7 c0       	rjmp	.+462    	; 0x25f8 <vfprintf+0x3ca>
    242a:	84 36       	cpi	r24, 0x64	; 100
    242c:	11 f0       	breq	.+4      	; 0x2432 <vfprintf+0x204>
    242e:	89 36       	cpi	r24, 0x69	; 105
    2430:	51 f5       	brne	.+84     	; 0x2486 <vfprintf+0x258>
    2432:	f5 01       	movw	r30, r10
    2434:	17 ff       	sbrs	r17, 7
    2436:	07 c0       	rjmp	.+14     	; 0x2446 <vfprintf+0x218>
    2438:	80 81       	ld	r24, Z
    243a:	91 81       	ldd	r25, Z+1	; 0x01
    243c:	a2 81       	ldd	r26, Z+2	; 0x02
    243e:	b3 81       	ldd	r27, Z+3	; 0x03
    2440:	24 e0       	ldi	r18, 0x04	; 4
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	08 c0       	rjmp	.+16     	; 0x2456 <vfprintf+0x228>
    2446:	80 81       	ld	r24, Z
    2448:	91 81       	ldd	r25, Z+1	; 0x01
    244a:	aa 27       	eor	r26, r26
    244c:	97 fd       	sbrc	r25, 7
    244e:	a0 95       	com	r26
    2450:	ba 2f       	mov	r27, r26
    2452:	22 e0       	ldi	r18, 0x02	; 2
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	a2 0e       	add	r10, r18
    2458:	b3 1e       	adc	r11, r19
    245a:	01 2f       	mov	r16, r17
    245c:	0f 76       	andi	r16, 0x6F	; 111
    245e:	b7 ff       	sbrs	r27, 7
    2460:	08 c0       	rjmp	.+16     	; 0x2472 <vfprintf+0x244>
    2462:	b0 95       	com	r27
    2464:	a0 95       	com	r26
    2466:	90 95       	com	r25
    2468:	81 95       	neg	r24
    246a:	9f 4f       	sbci	r25, 0xFF	; 255
    246c:	af 4f       	sbci	r26, 0xFF	; 255
    246e:	bf 4f       	sbci	r27, 0xFF	; 255
    2470:	00 68       	ori	r16, 0x80	; 128
    2472:	bc 01       	movw	r22, r24
    2474:	cd 01       	movw	r24, r26
    2476:	a2 01       	movw	r20, r4
    2478:	2a e0       	ldi	r18, 0x0A	; 10
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__ultoa_invert>
    2480:	d8 2e       	mov	r13, r24
    2482:	d4 18       	sub	r13, r4
    2484:	3f c0       	rjmp	.+126    	; 0x2504 <vfprintf+0x2d6>
    2486:	85 37       	cpi	r24, 0x75	; 117
    2488:	21 f4       	brne	.+8      	; 0x2492 <vfprintf+0x264>
    248a:	1f 7e       	andi	r17, 0xEF	; 239
    248c:	2a e0       	ldi	r18, 0x0A	; 10
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	20 c0       	rjmp	.+64     	; 0x24d2 <vfprintf+0x2a4>
    2492:	19 7f       	andi	r17, 0xF9	; 249
    2494:	8f 36       	cpi	r24, 0x6F	; 111
    2496:	a9 f0       	breq	.+42     	; 0x24c2 <vfprintf+0x294>
    2498:	80 37       	cpi	r24, 0x70	; 112
    249a:	20 f4       	brcc	.+8      	; 0x24a4 <vfprintf+0x276>
    249c:	88 35       	cpi	r24, 0x58	; 88
    249e:	09 f0       	breq	.+2      	; 0x24a2 <vfprintf+0x274>
    24a0:	ae c0       	rjmp	.+348    	; 0x25fe <vfprintf+0x3d0>
    24a2:	0b c0       	rjmp	.+22     	; 0x24ba <vfprintf+0x28c>
    24a4:	80 37       	cpi	r24, 0x70	; 112
    24a6:	21 f0       	breq	.+8      	; 0x24b0 <vfprintf+0x282>
    24a8:	88 37       	cpi	r24, 0x78	; 120
    24aa:	09 f0       	breq	.+2      	; 0x24ae <vfprintf+0x280>
    24ac:	a8 c0       	rjmp	.+336    	; 0x25fe <vfprintf+0x3d0>
    24ae:	01 c0       	rjmp	.+2      	; 0x24b2 <vfprintf+0x284>
    24b0:	10 61       	ori	r17, 0x10	; 16
    24b2:	14 ff       	sbrs	r17, 4
    24b4:	09 c0       	rjmp	.+18     	; 0x24c8 <vfprintf+0x29a>
    24b6:	14 60       	ori	r17, 0x04	; 4
    24b8:	07 c0       	rjmp	.+14     	; 0x24c8 <vfprintf+0x29a>
    24ba:	14 ff       	sbrs	r17, 4
    24bc:	08 c0       	rjmp	.+16     	; 0x24ce <vfprintf+0x2a0>
    24be:	16 60       	ori	r17, 0x06	; 6
    24c0:	06 c0       	rjmp	.+12     	; 0x24ce <vfprintf+0x2a0>
    24c2:	28 e0       	ldi	r18, 0x08	; 8
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	05 c0       	rjmp	.+10     	; 0x24d2 <vfprintf+0x2a4>
    24c8:	20 e1       	ldi	r18, 0x10	; 16
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	02 c0       	rjmp	.+4      	; 0x24d2 <vfprintf+0x2a4>
    24ce:	20 e1       	ldi	r18, 0x10	; 16
    24d0:	32 e0       	ldi	r19, 0x02	; 2
    24d2:	f5 01       	movw	r30, r10
    24d4:	17 ff       	sbrs	r17, 7
    24d6:	07 c0       	rjmp	.+14     	; 0x24e6 <vfprintf+0x2b8>
    24d8:	60 81       	ld	r22, Z
    24da:	71 81       	ldd	r23, Z+1	; 0x01
    24dc:	82 81       	ldd	r24, Z+2	; 0x02
    24de:	93 81       	ldd	r25, Z+3	; 0x03
    24e0:	44 e0       	ldi	r20, 0x04	; 4
    24e2:	50 e0       	ldi	r21, 0x00	; 0
    24e4:	06 c0       	rjmp	.+12     	; 0x24f2 <vfprintf+0x2c4>
    24e6:	60 81       	ld	r22, Z
    24e8:	71 81       	ldd	r23, Z+1	; 0x01
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	42 e0       	ldi	r20, 0x02	; 2
    24f0:	50 e0       	ldi	r21, 0x00	; 0
    24f2:	a4 0e       	add	r10, r20
    24f4:	b5 1e       	adc	r11, r21
    24f6:	a2 01       	movw	r20, r4
    24f8:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__ultoa_invert>
    24fc:	d8 2e       	mov	r13, r24
    24fe:	d4 18       	sub	r13, r4
    2500:	01 2f       	mov	r16, r17
    2502:	0f 77       	andi	r16, 0x7F	; 127
    2504:	06 ff       	sbrs	r16, 6
    2506:	09 c0       	rjmp	.+18     	; 0x251a <vfprintf+0x2ec>
    2508:	0e 7f       	andi	r16, 0xFE	; 254
    250a:	df 14       	cp	r13, r15
    250c:	30 f4       	brcc	.+12     	; 0x251a <vfprintf+0x2ec>
    250e:	04 ff       	sbrs	r16, 4
    2510:	06 c0       	rjmp	.+12     	; 0x251e <vfprintf+0x2f0>
    2512:	02 fd       	sbrc	r16, 2
    2514:	04 c0       	rjmp	.+8      	; 0x251e <vfprintf+0x2f0>
    2516:	0f 7e       	andi	r16, 0xEF	; 239
    2518:	02 c0       	rjmp	.+4      	; 0x251e <vfprintf+0x2f0>
    251a:	1d 2d       	mov	r17, r13
    251c:	01 c0       	rjmp	.+2      	; 0x2520 <vfprintf+0x2f2>
    251e:	1f 2d       	mov	r17, r15
    2520:	80 2f       	mov	r24, r16
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	04 ff       	sbrs	r16, 4
    2526:	0c c0       	rjmp	.+24     	; 0x2540 <vfprintf+0x312>
    2528:	fe 01       	movw	r30, r28
    252a:	ed 0d       	add	r30, r13
    252c:	f1 1d       	adc	r31, r1
    252e:	20 81       	ld	r18, Z
    2530:	20 33       	cpi	r18, 0x30	; 48
    2532:	11 f4       	brne	.+4      	; 0x2538 <vfprintf+0x30a>
    2534:	09 7e       	andi	r16, 0xE9	; 233
    2536:	09 c0       	rjmp	.+18     	; 0x254a <vfprintf+0x31c>
    2538:	02 ff       	sbrs	r16, 2
    253a:	06 c0       	rjmp	.+12     	; 0x2548 <vfprintf+0x31a>
    253c:	1e 5f       	subi	r17, 0xFE	; 254
    253e:	05 c0       	rjmp	.+10     	; 0x254a <vfprintf+0x31c>
    2540:	86 78       	andi	r24, 0x86	; 134
    2542:	90 70       	andi	r25, 0x00	; 0
    2544:	00 97       	sbiw	r24, 0x00	; 0
    2546:	09 f0       	breq	.+2      	; 0x254a <vfprintf+0x31c>
    2548:	1f 5f       	subi	r17, 0xFF	; 255
    254a:	80 2e       	mov	r8, r16
    254c:	99 24       	eor	r9, r9
    254e:	03 fd       	sbrc	r16, 3
    2550:	12 c0       	rjmp	.+36     	; 0x2576 <vfprintf+0x348>
    2552:	00 ff       	sbrs	r16, 0
    2554:	0d c0       	rjmp	.+26     	; 0x2570 <vfprintf+0x342>
    2556:	fd 2c       	mov	r15, r13
    2558:	1e 15       	cp	r17, r14
    255a:	50 f4       	brcc	.+20     	; 0x2570 <vfprintf+0x342>
    255c:	fe 0c       	add	r15, r14
    255e:	f1 1a       	sub	r15, r17
    2560:	1e 2d       	mov	r17, r14
    2562:	06 c0       	rjmp	.+12     	; 0x2570 <vfprintf+0x342>
    2564:	80 e2       	ldi	r24, 0x20	; 32
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	b3 01       	movw	r22, r6
    256a:	0e 94 34 13 	call	0x2668	; 0x2668 <fputc>
    256e:	1f 5f       	subi	r17, 0xFF	; 255
    2570:	1e 15       	cp	r17, r14
    2572:	c0 f3       	brcs	.-16     	; 0x2564 <vfprintf+0x336>
    2574:	04 c0       	rjmp	.+8      	; 0x257e <vfprintf+0x350>
    2576:	1e 15       	cp	r17, r14
    2578:	10 f4       	brcc	.+4      	; 0x257e <vfprintf+0x350>
    257a:	e1 1a       	sub	r14, r17
    257c:	01 c0       	rjmp	.+2      	; 0x2580 <vfprintf+0x352>
    257e:	ee 24       	eor	r14, r14
    2580:	84 fe       	sbrs	r8, 4
    2582:	0f c0       	rjmp	.+30     	; 0x25a2 <vfprintf+0x374>
    2584:	80 e3       	ldi	r24, 0x30	; 48
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	b3 01       	movw	r22, r6
    258a:	0e 94 34 13 	call	0x2668	; 0x2668 <fputc>
    258e:	82 fe       	sbrs	r8, 2
    2590:	1f c0       	rjmp	.+62     	; 0x25d0 <vfprintf+0x3a2>
    2592:	81 fe       	sbrs	r8, 1
    2594:	03 c0       	rjmp	.+6      	; 0x259c <vfprintf+0x36e>
    2596:	88 e5       	ldi	r24, 0x58	; 88
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	10 c0       	rjmp	.+32     	; 0x25bc <vfprintf+0x38e>
    259c:	88 e7       	ldi	r24, 0x78	; 120
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	0d c0       	rjmp	.+26     	; 0x25bc <vfprintf+0x38e>
    25a2:	c4 01       	movw	r24, r8
    25a4:	86 78       	andi	r24, 0x86	; 134
    25a6:	90 70       	andi	r25, 0x00	; 0
    25a8:	00 97       	sbiw	r24, 0x00	; 0
    25aa:	91 f0       	breq	.+36     	; 0x25d0 <vfprintf+0x3a2>
    25ac:	81 fc       	sbrc	r8, 1
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <vfprintf+0x386>
    25b0:	80 e2       	ldi	r24, 0x20	; 32
    25b2:	01 c0       	rjmp	.+2      	; 0x25b6 <vfprintf+0x388>
    25b4:	8b e2       	ldi	r24, 0x2B	; 43
    25b6:	07 fd       	sbrc	r16, 7
    25b8:	8d e2       	ldi	r24, 0x2D	; 45
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	b3 01       	movw	r22, r6
    25be:	0e 94 34 13 	call	0x2668	; 0x2668 <fputc>
    25c2:	06 c0       	rjmp	.+12     	; 0x25d0 <vfprintf+0x3a2>
    25c4:	80 e3       	ldi	r24, 0x30	; 48
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	b3 01       	movw	r22, r6
    25ca:	0e 94 34 13 	call	0x2668	; 0x2668 <fputc>
    25ce:	fa 94       	dec	r15
    25d0:	df 14       	cp	r13, r15
    25d2:	c0 f3       	brcs	.-16     	; 0x25c4 <vfprintf+0x396>
    25d4:	da 94       	dec	r13
    25d6:	f2 01       	movw	r30, r4
    25d8:	ed 0d       	add	r30, r13
    25da:	f1 1d       	adc	r31, r1
    25dc:	80 81       	ld	r24, Z
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	b3 01       	movw	r22, r6
    25e2:	0e 94 34 13 	call	0x2668	; 0x2668 <fputc>
    25e6:	dd 20       	and	r13, r13
    25e8:	a9 f7       	brne	.-22     	; 0x25d4 <vfprintf+0x3a6>
    25ea:	06 c0       	rjmp	.+12     	; 0x25f8 <vfprintf+0x3ca>
    25ec:	80 e2       	ldi	r24, 0x20	; 32
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	b3 01       	movw	r22, r6
    25f2:	0e 94 34 13 	call	0x2668	; 0x2668 <fputc>
    25f6:	ea 94       	dec	r14
    25f8:	ee 20       	and	r14, r14
    25fa:	c1 f7       	brne	.-16     	; 0x25ec <vfprintf+0x3be>
    25fc:	40 ce       	rjmp	.-896    	; 0x227e <vfprintf+0x50>
    25fe:	f3 01       	movw	r30, r6
    2600:	86 81       	ldd	r24, Z+6	; 0x06
    2602:	97 81       	ldd	r25, Z+7	; 0x07
    2604:	02 c0       	rjmp	.+4      	; 0x260a <vfprintf+0x3dc>
    2606:	8f ef       	ldi	r24, 0xFF	; 255
    2608:	9f ef       	ldi	r25, 0xFF	; 255
    260a:	2d 96       	adiw	r28, 0x0d	; 13
    260c:	0f b6       	in	r0, 0x3f	; 63
    260e:	f8 94       	cli
    2610:	de bf       	out	0x3e, r29	; 62
    2612:	0f be       	out	0x3f, r0	; 63
    2614:	cd bf       	out	0x3d, r28	; 61
    2616:	df 91       	pop	r29
    2618:	cf 91       	pop	r28
    261a:	1f 91       	pop	r17
    261c:	0f 91       	pop	r16
    261e:	ff 90       	pop	r15
    2620:	ef 90       	pop	r14
    2622:	df 90       	pop	r13
    2624:	cf 90       	pop	r12
    2626:	bf 90       	pop	r11
    2628:	af 90       	pop	r10
    262a:	9f 90       	pop	r9
    262c:	8f 90       	pop	r8
    262e:	7f 90       	pop	r7
    2630:	6f 90       	pop	r6
    2632:	5f 90       	pop	r5
    2634:	4f 90       	pop	r4
    2636:	3f 90       	pop	r3
    2638:	2f 90       	pop	r2
    263a:	08 95       	ret

0000263c <strnlen_P>:
    263c:	fc 01       	movw	r30, r24
    263e:	05 90       	lpm	r0, Z+
    2640:	61 50       	subi	r22, 0x01	; 1
    2642:	70 40       	sbci	r23, 0x00	; 0
    2644:	01 10       	cpse	r0, r1
    2646:	d8 f7       	brcc	.-10     	; 0x263e <strnlen_P+0x2>
    2648:	80 95       	com	r24
    264a:	90 95       	com	r25
    264c:	8e 0f       	add	r24, r30
    264e:	9f 1f       	adc	r25, r31
    2650:	08 95       	ret

00002652 <strnlen>:
    2652:	fc 01       	movw	r30, r24
    2654:	61 50       	subi	r22, 0x01	; 1
    2656:	70 40       	sbci	r23, 0x00	; 0
    2658:	01 90       	ld	r0, Z+
    265a:	01 10       	cpse	r0, r1
    265c:	d8 f7       	brcc	.-10     	; 0x2654 <strnlen+0x2>
    265e:	80 95       	com	r24
    2660:	90 95       	com	r25
    2662:	8e 0f       	add	r24, r30
    2664:	9f 1f       	adc	r25, r31
    2666:	08 95       	ret

00002668 <fputc>:
    2668:	0f 93       	push	r16
    266a:	1f 93       	push	r17
    266c:	cf 93       	push	r28
    266e:	df 93       	push	r29
    2670:	8c 01       	movw	r16, r24
    2672:	eb 01       	movw	r28, r22
    2674:	8b 81       	ldd	r24, Y+3	; 0x03
    2676:	81 ff       	sbrs	r24, 1
    2678:	1b c0       	rjmp	.+54     	; 0x26b0 <fputc+0x48>
    267a:	82 ff       	sbrs	r24, 2
    267c:	0d c0       	rjmp	.+26     	; 0x2698 <fputc+0x30>
    267e:	2e 81       	ldd	r18, Y+6	; 0x06
    2680:	3f 81       	ldd	r19, Y+7	; 0x07
    2682:	8c 81       	ldd	r24, Y+4	; 0x04
    2684:	9d 81       	ldd	r25, Y+5	; 0x05
    2686:	28 17       	cp	r18, r24
    2688:	39 07       	cpc	r19, r25
    268a:	64 f4       	brge	.+24     	; 0x26a4 <fputc+0x3c>
    268c:	e8 81       	ld	r30, Y
    268e:	f9 81       	ldd	r31, Y+1	; 0x01
    2690:	01 93       	st	Z+, r16
    2692:	f9 83       	std	Y+1, r31	; 0x01
    2694:	e8 83       	st	Y, r30
    2696:	06 c0       	rjmp	.+12     	; 0x26a4 <fputc+0x3c>
    2698:	e8 85       	ldd	r30, Y+8	; 0x08
    269a:	f9 85       	ldd	r31, Y+9	; 0x09
    269c:	80 2f       	mov	r24, r16
    269e:	09 95       	icall
    26a0:	00 97       	sbiw	r24, 0x00	; 0
    26a2:	31 f4       	brne	.+12     	; 0x26b0 <fputc+0x48>
    26a4:	8e 81       	ldd	r24, Y+6	; 0x06
    26a6:	9f 81       	ldd	r25, Y+7	; 0x07
    26a8:	01 96       	adiw	r24, 0x01	; 1
    26aa:	9f 83       	std	Y+7, r25	; 0x07
    26ac:	8e 83       	std	Y+6, r24	; 0x06
    26ae:	02 c0       	rjmp	.+4      	; 0x26b4 <fputc+0x4c>
    26b0:	0f ef       	ldi	r16, 0xFF	; 255
    26b2:	1f ef       	ldi	r17, 0xFF	; 255
    26b4:	c8 01       	movw	r24, r16
    26b6:	df 91       	pop	r29
    26b8:	cf 91       	pop	r28
    26ba:	1f 91       	pop	r17
    26bc:	0f 91       	pop	r16
    26be:	08 95       	ret

000026c0 <__ultoa_invert>:
    26c0:	fa 01       	movw	r30, r20
    26c2:	aa 27       	eor	r26, r26
    26c4:	28 30       	cpi	r18, 0x08	; 8
    26c6:	51 f1       	breq	.+84     	; 0x271c <__ultoa_invert+0x5c>
    26c8:	20 31       	cpi	r18, 0x10	; 16
    26ca:	81 f1       	breq	.+96     	; 0x272c <__ultoa_invert+0x6c>
    26cc:	e8 94       	clt
    26ce:	6f 93       	push	r22
    26d0:	6e 7f       	andi	r22, 0xFE	; 254
    26d2:	6e 5f       	subi	r22, 0xFE	; 254
    26d4:	7f 4f       	sbci	r23, 0xFF	; 255
    26d6:	8f 4f       	sbci	r24, 0xFF	; 255
    26d8:	9f 4f       	sbci	r25, 0xFF	; 255
    26da:	af 4f       	sbci	r26, 0xFF	; 255
    26dc:	b1 e0       	ldi	r27, 0x01	; 1
    26de:	3e d0       	rcall	.+124    	; 0x275c <__ultoa_invert+0x9c>
    26e0:	b4 e0       	ldi	r27, 0x04	; 4
    26e2:	3c d0       	rcall	.+120    	; 0x275c <__ultoa_invert+0x9c>
    26e4:	67 0f       	add	r22, r23
    26e6:	78 1f       	adc	r23, r24
    26e8:	89 1f       	adc	r24, r25
    26ea:	9a 1f       	adc	r25, r26
    26ec:	a1 1d       	adc	r26, r1
    26ee:	68 0f       	add	r22, r24
    26f0:	79 1f       	adc	r23, r25
    26f2:	8a 1f       	adc	r24, r26
    26f4:	91 1d       	adc	r25, r1
    26f6:	a1 1d       	adc	r26, r1
    26f8:	6a 0f       	add	r22, r26
    26fa:	71 1d       	adc	r23, r1
    26fc:	81 1d       	adc	r24, r1
    26fe:	91 1d       	adc	r25, r1
    2700:	a1 1d       	adc	r26, r1
    2702:	20 d0       	rcall	.+64     	; 0x2744 <__ultoa_invert+0x84>
    2704:	09 f4       	brne	.+2      	; 0x2708 <__ultoa_invert+0x48>
    2706:	68 94       	set
    2708:	3f 91       	pop	r19
    270a:	2a e0       	ldi	r18, 0x0A	; 10
    270c:	26 9f       	mul	r18, r22
    270e:	11 24       	eor	r1, r1
    2710:	30 19       	sub	r19, r0
    2712:	30 5d       	subi	r19, 0xD0	; 208
    2714:	31 93       	st	Z+, r19
    2716:	de f6       	brtc	.-74     	; 0x26ce <__ultoa_invert+0xe>
    2718:	cf 01       	movw	r24, r30
    271a:	08 95       	ret
    271c:	46 2f       	mov	r20, r22
    271e:	47 70       	andi	r20, 0x07	; 7
    2720:	40 5d       	subi	r20, 0xD0	; 208
    2722:	41 93       	st	Z+, r20
    2724:	b3 e0       	ldi	r27, 0x03	; 3
    2726:	0f d0       	rcall	.+30     	; 0x2746 <__ultoa_invert+0x86>
    2728:	c9 f7       	brne	.-14     	; 0x271c <__ultoa_invert+0x5c>
    272a:	f6 cf       	rjmp	.-20     	; 0x2718 <__ultoa_invert+0x58>
    272c:	46 2f       	mov	r20, r22
    272e:	4f 70       	andi	r20, 0x0F	; 15
    2730:	40 5d       	subi	r20, 0xD0	; 208
    2732:	4a 33       	cpi	r20, 0x3A	; 58
    2734:	18 f0       	brcs	.+6      	; 0x273c <__ultoa_invert+0x7c>
    2736:	49 5d       	subi	r20, 0xD9	; 217
    2738:	31 fd       	sbrc	r19, 1
    273a:	40 52       	subi	r20, 0x20	; 32
    273c:	41 93       	st	Z+, r20
    273e:	02 d0       	rcall	.+4      	; 0x2744 <__ultoa_invert+0x84>
    2740:	a9 f7       	brne	.-22     	; 0x272c <__ultoa_invert+0x6c>
    2742:	ea cf       	rjmp	.-44     	; 0x2718 <__ultoa_invert+0x58>
    2744:	b4 e0       	ldi	r27, 0x04	; 4
    2746:	a6 95       	lsr	r26
    2748:	97 95       	ror	r25
    274a:	87 95       	ror	r24
    274c:	77 95       	ror	r23
    274e:	67 95       	ror	r22
    2750:	ba 95       	dec	r27
    2752:	c9 f7       	brne	.-14     	; 0x2746 <__ultoa_invert+0x86>
    2754:	00 97       	sbiw	r24, 0x00	; 0
    2756:	61 05       	cpc	r22, r1
    2758:	71 05       	cpc	r23, r1
    275a:	08 95       	ret
    275c:	9b 01       	movw	r18, r22
    275e:	ac 01       	movw	r20, r24
    2760:	0a 2e       	mov	r0, r26
    2762:	06 94       	lsr	r0
    2764:	57 95       	ror	r21
    2766:	47 95       	ror	r20
    2768:	37 95       	ror	r19
    276a:	27 95       	ror	r18
    276c:	ba 95       	dec	r27
    276e:	c9 f7       	brne	.-14     	; 0x2762 <__ultoa_invert+0xa2>
    2770:	62 0f       	add	r22, r18
    2772:	73 1f       	adc	r23, r19
    2774:	84 1f       	adc	r24, r20
    2776:	95 1f       	adc	r25, r21
    2778:	a0 1d       	adc	r26, r0
    277a:	08 95       	ret

0000277c <_exit>:
    277c:	f8 94       	cli

0000277e <__stop_program>:
    277e:	ff cf       	rjmp	.-2      	; 0x277e <__stop_program>
