
lab5_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00002166  000021da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002166  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00002e98  00000000  00000000  000021e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000083d  00000000  00000000  00005080  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  000058c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000126d  00000000  00000000  000059a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f2  00000000  00000000  00006c0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b43  00000000  00000000  000070ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002bc  00000000  00000000  00007c44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000338  00000000  00000000  00007f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000dbb  00000000  00000000  00008238  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00008ff3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__ctors_end>
       4:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
       8:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
       c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      10:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      14:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      18:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      1c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      20:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      24:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      28:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      2c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      30:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      34:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      38:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      3c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      40:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      44:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      48:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      4c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      50:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      54:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      58:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      5c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      60:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      64:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      68:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      6c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      70:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      74:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      78:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      7c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      80:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      84:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      88:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>

0000008c <__c.1905>:
      8c:	6e 61 6e 00                                         nan.

00000090 <__c.1903>:
      90:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      a0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      b0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      c0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      d0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      e0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      f0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     100:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     110:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     120:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     130:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     140:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     150:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     160:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     170:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     180:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000018e <__ctors_end>:
     18e:	11 24       	eor	r1, r1
     190:	1f be       	out	0x3f, r1	; 63
     192:	cf ef       	ldi	r28, 0xFF	; 255
     194:	d0 e1       	ldi	r29, 0x10	; 16
     196:	de bf       	out	0x3e, r29	; 62
     198:	cd bf       	out	0x3d, r28	; 61

0000019a <__do_copy_data>:
     19a:	11 e0       	ldi	r17, 0x01	; 1
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	b1 e0       	ldi	r27, 0x01	; 1
     1a0:	e6 e6       	ldi	r30, 0x66	; 102
     1a2:	f1 e2       	ldi	r31, 0x21	; 33
     1a4:	00 e0       	ldi	r16, 0x00	; 0
     1a6:	0b bf       	out	0x3b, r16	; 59
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <__do_copy_data+0x14>
     1aa:	07 90       	elpm	r0, Z+
     1ac:	0d 92       	st	X+, r0
     1ae:	ae 30       	cpi	r26, 0x0E	; 14
     1b0:	b1 07       	cpc	r27, r17
     1b2:	d9 f7       	brne	.-10     	; 0x1aa <__do_copy_data+0x10>
     1b4:	1b be       	out	0x3b, r1	; 59

000001b6 <__do_clear_bss>:
     1b6:	11 e0       	ldi	r17, 0x01	; 1
     1b8:	ae e0       	ldi	r26, 0x0E	; 14
     1ba:	b1 e0       	ldi	r27, 0x01	; 1
     1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <.do_clear_bss_start>

000001be <.do_clear_bss_loop>:
     1be:	1d 92       	st	X+, r1

000001c0 <.do_clear_bss_start>:
     1c0:	ae 30       	cpi	r26, 0x0E	; 14
     1c2:	b1 07       	cpc	r27, r17
     1c4:	e1 f7       	brne	.-8      	; 0x1be <.do_clear_bss_loop>
     1c6:	0e 94 ff 07 	call	0xffe	; 0xffe <main>
     1ca:	0c 94 b1 10 	jmp	0x2162	; 0x2162 <_exit>

000001ce <__bad_interrupt>:
     1ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001d2 <lcd_busy>:
void lcd_busy(void)
{
     1d2:	0f 93       	push	r16
     1d4:	1f 93       	push	r17
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	cd b7       	in	r28, 0x3d	; 61
     1dc:	de b7       	in	r29, 0x3e	; 62
     1de:	2e 97       	sbiw	r28, 0x0e	; 14
     1e0:	0f b6       	in	r0, 0x3f	; 63
     1e2:	f8 94       	cli
     1e4:	de bf       	out	0x3e, r29	; 62
     1e6:	0f be       	out	0x3f, r0	; 63
     1e8:	cd bf       	out	0x3d, r28	; 61
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	a8 e4       	ldi	r26, 0x48	; 72
     1f0:	b2 e4       	ldi	r27, 0x42	; 66
     1f2:	89 83       	std	Y+1, r24	; 0x01
     1f4:	9a 83       	std	Y+2, r25	; 0x02
     1f6:	ab 83       	std	Y+3, r26	; 0x03
     1f8:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     1fa:	69 81       	ldd	r22, Y+1	; 0x01
     1fc:	7a 81       	ldd	r23, Y+2	; 0x02
     1fe:	8b 81       	ldd	r24, Y+3	; 0x03
     200:	9c 81       	ldd	r25, Y+4	; 0x04
     202:	20 e0       	ldi	r18, 0x00	; 0
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	4a ef       	ldi	r20, 0xFA	; 250
     208:	54 e4       	ldi	r21, 0x44	; 68
     20a:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__mulsf3>
     20e:	dc 01       	movw	r26, r24
     210:	cb 01       	movw	r24, r22
     212:	8d 83       	std	Y+5, r24	; 0x05
     214:	9e 83       	std	Y+6, r25	; 0x06
     216:	af 83       	std	Y+7, r26	; 0x07
     218:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     21a:	11 e0       	ldi	r17, 0x01	; 1
     21c:	6d 81       	ldd	r22, Y+5	; 0x05
     21e:	7e 81       	ldd	r23, Y+6	; 0x06
     220:	8f 81       	ldd	r24, Y+7	; 0x07
     222:	98 85       	ldd	r25, Y+8	; 0x08
     224:	20 e0       	ldi	r18, 0x00	; 0
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	40 e8       	ldi	r20, 0x80	; 128
     22a:	5f e3       	ldi	r21, 0x3F	; 63
     22c:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__cmpsf2>
     230:	88 23       	and	r24, r24
     232:	0c f0       	brlt	.+2      	; 0x236 <lcd_busy+0x64>
     234:	10 e0       	ldi	r17, 0x00	; 0
     236:	11 23       	and	r17, r17
     238:	29 f0       	breq	.+10     	; 0x244 <lcd_busy+0x72>
		__ticks = 1;
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	9a 87       	std	Y+10, r25	; 0x0a
     240:	89 87       	std	Y+9, r24	; 0x09
     242:	46 c0       	rjmp	.+140    	; 0x2d0 <lcd_busy+0xfe>
	else if (__tmp > 65535)
     244:	11 e0       	ldi	r17, 0x01	; 1
     246:	6d 81       	ldd	r22, Y+5	; 0x05
     248:	7e 81       	ldd	r23, Y+6	; 0x06
     24a:	8f 81       	ldd	r24, Y+7	; 0x07
     24c:	98 85       	ldd	r25, Y+8	; 0x08
     24e:	20 e0       	ldi	r18, 0x00	; 0
     250:	3f ef       	ldi	r19, 0xFF	; 255
     252:	4f e7       	ldi	r20, 0x7F	; 127
     254:	57 e4       	ldi	r21, 0x47	; 71
     256:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__gesf2>
     25a:	18 16       	cp	r1, r24
     25c:	0c f0       	brlt	.+2      	; 0x260 <lcd_busy+0x8e>
     25e:	10 e0       	ldi	r17, 0x00	; 0
     260:	11 23       	and	r17, r17
     262:	61 f1       	breq	.+88     	; 0x2bc <lcd_busy+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     264:	69 81       	ldd	r22, Y+1	; 0x01
     266:	7a 81       	ldd	r23, Y+2	; 0x02
     268:	8b 81       	ldd	r24, Y+3	; 0x03
     26a:	9c 81       	ldd	r25, Y+4	; 0x04
     26c:	20 e0       	ldi	r18, 0x00	; 0
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	40 e2       	ldi	r20, 0x20	; 32
     272:	51 e4       	ldi	r21, 0x41	; 65
     274:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__mulsf3>
     278:	dc 01       	movw	r26, r24
     27a:	cb 01       	movw	r24, r22
     27c:	bc 01       	movw	r22, r24
     27e:	cd 01       	movw	r24, r26
     280:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fixunssfsi>
     284:	dc 01       	movw	r26, r24
     286:	cb 01       	movw	r24, r22
     288:	9a 87       	std	Y+10, r25	; 0x0a
     28a:	89 87       	std	Y+9, r24	; 0x09
     28c:	12 c0       	rjmp	.+36     	; 0x2b2 <lcd_busy+0xe0>
     28e:	88 ec       	ldi	r24, 0xC8	; 200
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	9c 87       	std	Y+12, r25	; 0x0c
     294:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     296:	8b 85       	ldd	r24, Y+11	; 0x0b
     298:	9c 85       	ldd	r25, Y+12	; 0x0c
     29a:	8c 01       	movw	r16, r24
     29c:	c8 01       	movw	r24, r16
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	f1 f7       	brne	.-4      	; 0x29e <lcd_busy+0xcc>
     2a2:	8c 01       	movw	r16, r24
     2a4:	1c 87       	std	Y+12, r17	; 0x0c
     2a6:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2a8:	89 85       	ldd	r24, Y+9	; 0x09
     2aa:	9a 85       	ldd	r25, Y+10	; 0x0a
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	9a 87       	std	Y+10, r25	; 0x0a
     2b0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2b2:	89 85       	ldd	r24, Y+9	; 0x09
     2b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     2b6:	00 97       	sbiw	r24, 0x00	; 0
     2b8:	51 f7       	brne	.-44     	; 0x28e <lcd_busy+0xbc>
     2ba:	17 c0       	rjmp	.+46     	; 0x2ea <lcd_busy+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2bc:	6d 81       	ldd	r22, Y+5	; 0x05
     2be:	7e 81       	ldd	r23, Y+6	; 0x06
     2c0:	8f 81       	ldd	r24, Y+7	; 0x07
     2c2:	98 85       	ldd	r25, Y+8	; 0x08
     2c4:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fixunssfsi>
     2c8:	dc 01       	movw	r26, r24
     2ca:	cb 01       	movw	r24, r22
     2cc:	9a 87       	std	Y+10, r25	; 0x0a
     2ce:	89 87       	std	Y+9, r24	; 0x09
     2d0:	89 85       	ldd	r24, Y+9	; 0x09
     2d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     2d4:	9e 87       	std	Y+14, r25	; 0x0e
     2d6:	8d 87       	std	Y+13, r24	; 0x0d
     2d8:	8d 85       	ldd	r24, Y+13	; 0x0d
     2da:	9e 85       	ldd	r25, Y+14	; 0x0e
     2dc:	8c 01       	movw	r16, r24
     2de:	c8 01       	movw	r24, r16
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <lcd_busy+0x10e>
     2e4:	8c 01       	movw	r16, r24
     2e6:	1e 87       	std	Y+14, r17	; 0x0e
     2e8:	0d 87       	std	Y+13, r16	; 0x0d

	DDRA = 0xff;
*/

	_delay_ms(50);
}
     2ea:	2e 96       	adiw	r28, 0x0e	; 14
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	f8 94       	cli
     2f0:	de bf       	out	0x3e, r29	; 62
     2f2:	0f be       	out	0x3f, r0	; 63
     2f4:	cd bf       	out	0x3d, r28	; 61
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	1f 91       	pop	r17
     2fc:	0f 91       	pop	r16
     2fe:	08 95       	ret

00000300 <lcd_command>:

void lcd_command(unsigned char cmd)
{
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
     30c:	69 97       	sbiw	r28, 0x19	; 25
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	de bf       	out	0x3e, r29	; 62
     314:	0f be       	out	0x3f, r0	; 63
     316:	cd bf       	out	0x3d, r28	; 61
     318:	89 8f       	std	Y+25, r24	; 0x19
	lcd_busy();
     31a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_busy>

	PORTA = cmd;
     31e:	8b e3       	ldi	r24, 0x3B	; 59
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	29 8d       	ldd	r18, Y+25	; 0x19
     324:	fc 01       	movw	r30, r24
     326:	20 83       	st	Z, r18
	PORTC &= 0b00000110; // RS = 0
     328:	85 e3       	ldi	r24, 0x35	; 53
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	25 e3       	ldi	r18, 0x35	; 53
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	f9 01       	movw	r30, r18
     332:	20 81       	ld	r18, Z
     334:	26 70       	andi	r18, 0x06	; 6
     336:	fc 01       	movw	r30, r24
     338:	20 83       	st	Z, r18
	PORTC &= 0b00000101; // RW = 0
     33a:	85 e3       	ldi	r24, 0x35	; 53
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	25 e3       	ldi	r18, 0x35	; 53
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	f9 01       	movw	r30, r18
     344:	20 81       	ld	r18, Z
     346:	25 70       	andi	r18, 0x05	; 5
     348:	fc 01       	movw	r30, r24
     34a:	20 83       	st	Z, r18
	PORTC |= 0b00000100; // E = 1
     34c:	85 e3       	ldi	r24, 0x35	; 53
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	25 e3       	ldi	r18, 0x35	; 53
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	f9 01       	movw	r30, r18
     356:	20 81       	ld	r18, Z
     358:	24 60       	ori	r18, 0x04	; 4
     35a:	fc 01       	movw	r30, r24
     35c:	20 83       	st	Z, r18
	PORTC &= 0b00000011; // E = 0, Depending on LCD light timing, E=1 -> 0
     35e:	85 e3       	ldi	r24, 0x35	; 53
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	25 e3       	ldi	r18, 0x35	; 53
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	f9 01       	movw	r30, r18
     368:	20 81       	ld	r18, Z
     36a:	23 70       	andi	r18, 0x03	; 3
     36c:	fc 01       	movw	r30, r24
     36e:	20 83       	st	Z, r18
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	a0 e8       	ldi	r26, 0x80	; 128
     376:	bf e3       	ldi	r27, 0x3F	; 63
     378:	89 83       	std	Y+1, r24	; 0x01
     37a:	9a 83       	std	Y+2, r25	; 0x02
     37c:	ab 83       	std	Y+3, r26	; 0x03
     37e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     380:	69 81       	ldd	r22, Y+1	; 0x01
     382:	7a 81       	ldd	r23, Y+2	; 0x02
     384:	8b 81       	ldd	r24, Y+3	; 0x03
     386:	9c 81       	ldd	r25, Y+4	; 0x04
     388:	2b ea       	ldi	r18, 0xAB	; 171
     38a:	3a ea       	ldi	r19, 0xAA	; 170
     38c:	4a e2       	ldi	r20, 0x2A	; 42
     38e:	50 e4       	ldi	r21, 0x40	; 64
     390:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__mulsf3>
     394:	dc 01       	movw	r26, r24
     396:	cb 01       	movw	r24, r22
     398:	8d 83       	std	Y+5, r24	; 0x05
     39a:	9e 83       	std	Y+6, r25	; 0x06
     39c:	af 83       	std	Y+7, r26	; 0x07
     39e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     3a0:	11 e0       	ldi	r17, 0x01	; 1
     3a2:	6d 81       	ldd	r22, Y+5	; 0x05
     3a4:	7e 81       	ldd	r23, Y+6	; 0x06
     3a6:	8f 81       	ldd	r24, Y+7	; 0x07
     3a8:	98 85       	ldd	r25, Y+8	; 0x08
     3aa:	20 e0       	ldi	r18, 0x00	; 0
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	40 e8       	ldi	r20, 0x80	; 128
     3b0:	5f e3       	ldi	r21, 0x3F	; 63
     3b2:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__cmpsf2>
     3b6:	88 23       	and	r24, r24
     3b8:	0c f0       	brlt	.+2      	; 0x3bc <lcd_command+0xbc>
     3ba:	10 e0       	ldi	r17, 0x00	; 0
     3bc:	11 23       	and	r17, r17
     3be:	19 f0       	breq	.+6      	; 0x3c6 <lcd_command+0xc6>
		__ticks = 1;
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	89 87       	std	Y+9, r24	; 0x09
     3c4:	a3 c0       	rjmp	.+326    	; 0x50c <lcd_command+0x20c>
	else if (__tmp > 255)
     3c6:	11 e0       	ldi	r17, 0x01	; 1
     3c8:	6d 81       	ldd	r22, Y+5	; 0x05
     3ca:	7e 81       	ldd	r23, Y+6	; 0x06
     3cc:	8f 81       	ldd	r24, Y+7	; 0x07
     3ce:	98 85       	ldd	r25, Y+8	; 0x08
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	4f e7       	ldi	r20, 0x7F	; 127
     3d6:	53 e4       	ldi	r21, 0x43	; 67
     3d8:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__gesf2>
     3dc:	18 16       	cp	r1, r24
     3de:	0c f0       	brlt	.+2      	; 0x3e2 <lcd_command+0xe2>
     3e0:	10 e0       	ldi	r17, 0x00	; 0
     3e2:	11 23       	and	r17, r17
     3e4:	09 f4       	brne	.+2      	; 0x3e8 <lcd_command+0xe8>
     3e6:	89 c0       	rjmp	.+274    	; 0x4fa <lcd_command+0x1fa>
	{
		_delay_ms(__us / 1000.0);
     3e8:	69 81       	ldd	r22, Y+1	; 0x01
     3ea:	7a 81       	ldd	r23, Y+2	; 0x02
     3ec:	8b 81       	ldd	r24, Y+3	; 0x03
     3ee:	9c 81       	ldd	r25, Y+4	; 0x04
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	4a e7       	ldi	r20, 0x7A	; 122
     3f6:	54 e4       	ldi	r21, 0x44	; 68
     3f8:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__divsf3>
     3fc:	dc 01       	movw	r26, r24
     3fe:	cb 01       	movw	r24, r22
     400:	8a 87       	std	Y+10, r24	; 0x0a
     402:	9b 87       	std	Y+11, r25	; 0x0b
     404:	ac 87       	std	Y+12, r26	; 0x0c
     406:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     408:	6a 85       	ldd	r22, Y+10	; 0x0a
     40a:	7b 85       	ldd	r23, Y+11	; 0x0b
     40c:	8c 85       	ldd	r24, Y+12	; 0x0c
     40e:	9d 85       	ldd	r25, Y+13	; 0x0d
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	4a ef       	ldi	r20, 0xFA	; 250
     416:	54 e4       	ldi	r21, 0x44	; 68
     418:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__mulsf3>
     41c:	dc 01       	movw	r26, r24
     41e:	cb 01       	movw	r24, r22
     420:	8e 87       	std	Y+14, r24	; 0x0e
     422:	9f 87       	std	Y+15, r25	; 0x0f
     424:	a8 8b       	std	Y+16, r26	; 0x10
     426:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     428:	11 e0       	ldi	r17, 0x01	; 1
     42a:	6e 85       	ldd	r22, Y+14	; 0x0e
     42c:	7f 85       	ldd	r23, Y+15	; 0x0f
     42e:	88 89       	ldd	r24, Y+16	; 0x10
     430:	99 89       	ldd	r25, Y+17	; 0x11
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	40 e8       	ldi	r20, 0x80	; 128
     438:	5f e3       	ldi	r21, 0x3F	; 63
     43a:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__cmpsf2>
     43e:	88 23       	and	r24, r24
     440:	0c f0       	brlt	.+2      	; 0x444 <lcd_command+0x144>
     442:	10 e0       	ldi	r17, 0x00	; 0
     444:	11 23       	and	r17, r17
     446:	29 f0       	breq	.+10     	; 0x452 <lcd_command+0x152>
		__ticks = 1;
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	9b 8b       	std	Y+19, r25	; 0x13
     44e:	8a 8b       	std	Y+18, r24	; 0x12
     450:	46 c0       	rjmp	.+140    	; 0x4de <lcd_command+0x1de>
	else if (__tmp > 65535)
     452:	11 e0       	ldi	r17, 0x01	; 1
     454:	6e 85       	ldd	r22, Y+14	; 0x0e
     456:	7f 85       	ldd	r23, Y+15	; 0x0f
     458:	88 89       	ldd	r24, Y+16	; 0x10
     45a:	99 89       	ldd	r25, Y+17	; 0x11
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	3f ef       	ldi	r19, 0xFF	; 255
     460:	4f e7       	ldi	r20, 0x7F	; 127
     462:	57 e4       	ldi	r21, 0x47	; 71
     464:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__gesf2>
     468:	18 16       	cp	r1, r24
     46a:	0c f0       	brlt	.+2      	; 0x46e <lcd_command+0x16e>
     46c:	10 e0       	ldi	r17, 0x00	; 0
     46e:	11 23       	and	r17, r17
     470:	61 f1       	breq	.+88     	; 0x4ca <lcd_command+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     472:	6a 85       	ldd	r22, Y+10	; 0x0a
     474:	7b 85       	ldd	r23, Y+11	; 0x0b
     476:	8c 85       	ldd	r24, Y+12	; 0x0c
     478:	9d 85       	ldd	r25, Y+13	; 0x0d
     47a:	20 e0       	ldi	r18, 0x00	; 0
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	40 e2       	ldi	r20, 0x20	; 32
     480:	51 e4       	ldi	r21, 0x41	; 65
     482:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__mulsf3>
     486:	dc 01       	movw	r26, r24
     488:	cb 01       	movw	r24, r22
     48a:	bc 01       	movw	r22, r24
     48c:	cd 01       	movw	r24, r26
     48e:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fixunssfsi>
     492:	dc 01       	movw	r26, r24
     494:	cb 01       	movw	r24, r22
     496:	9b 8b       	std	Y+19, r25	; 0x13
     498:	8a 8b       	std	Y+18, r24	; 0x12
     49a:	12 c0       	rjmp	.+36     	; 0x4c0 <lcd_command+0x1c0>
     49c:	88 ec       	ldi	r24, 0xC8	; 200
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	9d 8b       	std	Y+21, r25	; 0x15
     4a2:	8c 8b       	std	Y+20, r24	; 0x14
     4a4:	8c 89       	ldd	r24, Y+20	; 0x14
     4a6:	9d 89       	ldd	r25, Y+21	; 0x15
     4a8:	8c 01       	movw	r16, r24
     4aa:	c8 01       	movw	r24, r16
     4ac:	01 97       	sbiw	r24, 0x01	; 1
     4ae:	f1 f7       	brne	.-4      	; 0x4ac <lcd_command+0x1ac>
     4b0:	8c 01       	movw	r16, r24
     4b2:	1d 8b       	std	Y+21, r17	; 0x15
     4b4:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4b6:	8a 89       	ldd	r24, Y+18	; 0x12
     4b8:	9b 89       	ldd	r25, Y+19	; 0x13
     4ba:	01 97       	sbiw	r24, 0x01	; 1
     4bc:	9b 8b       	std	Y+19, r25	; 0x13
     4be:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4c0:	8a 89       	ldd	r24, Y+18	; 0x12
     4c2:	9b 89       	ldd	r25, Y+19	; 0x13
     4c4:	00 97       	sbiw	r24, 0x00	; 0
     4c6:	51 f7       	brne	.-44     	; 0x49c <lcd_command+0x19c>
     4c8:	28 c0       	rjmp	.+80     	; 0x51a <lcd_command+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4ca:	6e 85       	ldd	r22, Y+14	; 0x0e
     4cc:	7f 85       	ldd	r23, Y+15	; 0x0f
     4ce:	88 89       	ldd	r24, Y+16	; 0x10
     4d0:	99 89       	ldd	r25, Y+17	; 0x11
     4d2:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fixunssfsi>
     4d6:	dc 01       	movw	r26, r24
     4d8:	cb 01       	movw	r24, r22
     4da:	9b 8b       	std	Y+19, r25	; 0x13
     4dc:	8a 8b       	std	Y+18, r24	; 0x12
     4de:	8a 89       	ldd	r24, Y+18	; 0x12
     4e0:	9b 89       	ldd	r25, Y+19	; 0x13
     4e2:	9f 8b       	std	Y+23, r25	; 0x17
     4e4:	8e 8b       	std	Y+22, r24	; 0x16
     4e6:	8e 89       	ldd	r24, Y+22	; 0x16
     4e8:	9f 89       	ldd	r25, Y+23	; 0x17
     4ea:	8c 01       	movw	r16, r24
     4ec:	f8 01       	movw	r30, r16
     4ee:	31 97       	sbiw	r30, 0x01	; 1
     4f0:	f1 f7       	brne	.-4      	; 0x4ee <lcd_command+0x1ee>
     4f2:	8f 01       	movw	r16, r30
     4f4:	1f 8b       	std	Y+23, r17	; 0x17
     4f6:	0e 8b       	std	Y+22, r16	; 0x16
     4f8:	10 c0       	rjmp	.+32     	; 0x51a <lcd_command+0x21a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     4fa:	6d 81       	ldd	r22, Y+5	; 0x05
     4fc:	7e 81       	ldd	r23, Y+6	; 0x06
     4fe:	8f 81       	ldd	r24, Y+7	; 0x07
     500:	98 85       	ldd	r25, Y+8	; 0x08
     502:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fixunssfsi>
     506:	dc 01       	movw	r26, r24
     508:	cb 01       	movw	r24, r22
     50a:	89 87       	std	Y+9, r24	; 0x09
     50c:	89 85       	ldd	r24, Y+9	; 0x09
     50e:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     510:	88 8d       	ldd	r24, Y+24	; 0x18
     512:	18 2f       	mov	r17, r24
     514:	1a 95       	dec	r17
     516:	f1 f7       	brne	.-4      	; 0x514 <lcd_command+0x214>
     518:	18 8f       	std	Y+24, r17	; 0x18
	_delay_us(1);		 // constant time delay
}
     51a:	69 96       	adiw	r28, 0x19	; 25
     51c:	0f b6       	in	r0, 0x3f	; 63
     51e:	f8 94       	cli
     520:	de bf       	out	0x3e, r29	; 62
     522:	0f be       	out	0x3f, r0	; 63
     524:	cd bf       	out	0x3d, r28	; 61
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	1f 91       	pop	r17
     52c:	0f 91       	pop	r16
     52e:	08 95       	ret

00000530 <lcd_init>:

void lcd_init()
{
     530:	0f 93       	push	r16
     532:	1f 93       	push	r17
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	cd b7       	in	r28, 0x3d	; 61
     53a:	de b7       	in	r29, 0x3e	; 62
     53c:	ee 97       	sbiw	r28, 0x3e	; 62
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	f8 94       	cli
     542:	de bf       	out	0x3e, r29	; 62
     544:	0f be       	out	0x3f, r0	; 63
     546:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xff;
     548:	8a e3       	ldi	r24, 0x3A	; 58
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	2f ef       	ldi	r18, 0xFF	; 255
     54e:	fc 01       	movw	r30, r24
     550:	20 83       	st	Z, r18
	DDRC = DDRC | 0x0f;
     552:	84 e3       	ldi	r24, 0x34	; 52
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	24 e3       	ldi	r18, 0x34	; 52
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	f9 01       	movw	r30, r18
     55c:	20 81       	ld	r18, Z
     55e:	2f 60       	ori	r18, 0x0F	; 15
     560:	fc 01       	movw	r30, r24
     562:	20 83       	st	Z, r18
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	a0 e7       	ldi	r26, 0x70	; 112
     56a:	b1 e4       	ldi	r27, 0x41	; 65
     56c:	89 83       	std	Y+1, r24	; 0x01
     56e:	9a 83       	std	Y+2, r25	; 0x02
     570:	ab 83       	std	Y+3, r26	; 0x03
     572:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     574:	69 81       	ldd	r22, Y+1	; 0x01
     576:	7a 81       	ldd	r23, Y+2	; 0x02
     578:	8b 81       	ldd	r24, Y+3	; 0x03
     57a:	9c 81       	ldd	r25, Y+4	; 0x04
     57c:	20 e0       	ldi	r18, 0x00	; 0
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	4a ef       	ldi	r20, 0xFA	; 250
     582:	54 e4       	ldi	r21, 0x44	; 68
     584:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__mulsf3>
     588:	dc 01       	movw	r26, r24
     58a:	cb 01       	movw	r24, r22
     58c:	8d 83       	std	Y+5, r24	; 0x05
     58e:	9e 83       	std	Y+6, r25	; 0x06
     590:	af 83       	std	Y+7, r26	; 0x07
     592:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     594:	11 e0       	ldi	r17, 0x01	; 1
     596:	6d 81       	ldd	r22, Y+5	; 0x05
     598:	7e 81       	ldd	r23, Y+6	; 0x06
     59a:	8f 81       	ldd	r24, Y+7	; 0x07
     59c:	98 85       	ldd	r25, Y+8	; 0x08
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	40 e8       	ldi	r20, 0x80	; 128
     5a4:	5f e3       	ldi	r21, 0x3F	; 63
     5a6:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__cmpsf2>
     5aa:	88 23       	and	r24, r24
     5ac:	0c f0       	brlt	.+2      	; 0x5b0 <lcd_init+0x80>
     5ae:	10 e0       	ldi	r17, 0x00	; 0
     5b0:	11 23       	and	r17, r17
     5b2:	29 f0       	breq	.+10     	; 0x5be <lcd_init+0x8e>
		__ticks = 1;
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	9a 87       	std	Y+10, r25	; 0x0a
     5ba:	89 87       	std	Y+9, r24	; 0x09
     5bc:	46 c0       	rjmp	.+140    	; 0x64a <lcd_init+0x11a>
	else if (__tmp > 65535)
     5be:	11 e0       	ldi	r17, 0x01	; 1
     5c0:	6d 81       	ldd	r22, Y+5	; 0x05
     5c2:	7e 81       	ldd	r23, Y+6	; 0x06
     5c4:	8f 81       	ldd	r24, Y+7	; 0x07
     5c6:	98 85       	ldd	r25, Y+8	; 0x08
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	3f ef       	ldi	r19, 0xFF	; 255
     5cc:	4f e7       	ldi	r20, 0x7F	; 127
     5ce:	57 e4       	ldi	r21, 0x47	; 71
     5d0:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__gesf2>
     5d4:	18 16       	cp	r1, r24
     5d6:	0c f0       	brlt	.+2      	; 0x5da <lcd_init+0xaa>
     5d8:	10 e0       	ldi	r17, 0x00	; 0
     5da:	11 23       	and	r17, r17
     5dc:	61 f1       	breq	.+88     	; 0x636 <lcd_init+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5de:	69 81       	ldd	r22, Y+1	; 0x01
     5e0:	7a 81       	ldd	r23, Y+2	; 0x02
     5e2:	8b 81       	ldd	r24, Y+3	; 0x03
     5e4:	9c 81       	ldd	r25, Y+4	; 0x04
     5e6:	20 e0       	ldi	r18, 0x00	; 0
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	40 e2       	ldi	r20, 0x20	; 32
     5ec:	51 e4       	ldi	r21, 0x41	; 65
     5ee:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__mulsf3>
     5f2:	dc 01       	movw	r26, r24
     5f4:	cb 01       	movw	r24, r22
     5f6:	bc 01       	movw	r22, r24
     5f8:	cd 01       	movw	r24, r26
     5fa:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fixunssfsi>
     5fe:	dc 01       	movw	r26, r24
     600:	cb 01       	movw	r24, r22
     602:	9a 87       	std	Y+10, r25	; 0x0a
     604:	89 87       	std	Y+9, r24	; 0x09
     606:	12 c0       	rjmp	.+36     	; 0x62c <lcd_init+0xfc>
     608:	88 ec       	ldi	r24, 0xC8	; 200
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	9c 87       	std	Y+12, r25	; 0x0c
     60e:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     610:	8b 85       	ldd	r24, Y+11	; 0x0b
     612:	9c 85       	ldd	r25, Y+12	; 0x0c
     614:	8c 01       	movw	r16, r24
     616:	c8 01       	movw	r24, r16
     618:	01 97       	sbiw	r24, 0x01	; 1
     61a:	f1 f7       	brne	.-4      	; 0x618 <lcd_init+0xe8>
     61c:	8c 01       	movw	r16, r24
     61e:	1c 87       	std	Y+12, r17	; 0x0c
     620:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     622:	89 85       	ldd	r24, Y+9	; 0x09
     624:	9a 85       	ldd	r25, Y+10	; 0x0a
     626:	01 97       	sbiw	r24, 0x01	; 1
     628:	9a 87       	std	Y+10, r25	; 0x0a
     62a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     62c:	89 85       	ldd	r24, Y+9	; 0x09
     62e:	9a 85       	ldd	r25, Y+10	; 0x0a
     630:	00 97       	sbiw	r24, 0x00	; 0
     632:	51 f7       	brne	.-44     	; 0x608 <lcd_init+0xd8>
     634:	17 c0       	rjmp	.+46     	; 0x664 <lcd_init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     636:	6d 81       	ldd	r22, Y+5	; 0x05
     638:	7e 81       	ldd	r23, Y+6	; 0x06
     63a:	8f 81       	ldd	r24, Y+7	; 0x07
     63c:	98 85       	ldd	r25, Y+8	; 0x08
     63e:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fixunssfsi>
     642:	dc 01       	movw	r26, r24
     644:	cb 01       	movw	r24, r22
     646:	9a 87       	std	Y+10, r25	; 0x0a
     648:	89 87       	std	Y+9, r24	; 0x09
     64a:	89 85       	ldd	r24, Y+9	; 0x09
     64c:	9a 85       	ldd	r25, Y+10	; 0x0a
     64e:	9e 87       	std	Y+14, r25	; 0x0e
     650:	8d 87       	std	Y+13, r24	; 0x0d
     652:	8d 85       	ldd	r24, Y+13	; 0x0d
     654:	9e 85       	ldd	r25, Y+14	; 0x0e
     656:	8c 01       	movw	r16, r24
     658:	f8 01       	movw	r30, r16
     65a:	31 97       	sbiw	r30, 0x01	; 1
     65c:	f1 f7       	brne	.-4      	; 0x65a <lcd_init+0x12a>
     65e:	8f 01       	movw	r16, r30
     660:	1e 87       	std	Y+14, r17	; 0x0e
     662:	0d 87       	std	Y+13, r16	; 0x0d

	_delay_ms(15);		 // wait more than 15ms
	
	PORTA = 0b00110000;
     664:	8b e3       	ldi	r24, 0x3B	; 59
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	20 e3       	ldi	r18, 0x30	; 48
     66a:	fc 01       	movw	r30, r24
     66c:	20 83       	st	Z, r18
	PORTC &= 0b00000000; // E,RW,RS = 0,0,0
     66e:	85 e3       	ldi	r24, 0x35	; 53
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	fc 01       	movw	r30, r24
     674:	80 81       	ld	r24, Z
     676:	85 e3       	ldi	r24, 0x35	; 53
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	fc 01       	movw	r30, r24
     67c:	10 82       	st	Z, r1
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e2       	ldi	r25, 0x20	; 32
     682:	a0 e8       	ldi	r26, 0x80	; 128
     684:	b5 e4       	ldi	r27, 0x45	; 69
     686:	8f 87       	std	Y+15, r24	; 0x0f
     688:	98 8b       	std	Y+16, r25	; 0x10
     68a:	a9 8b       	std	Y+17, r26	; 0x11
     68c:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     68e:	6f 85       	ldd	r22, Y+15	; 0x0f
     690:	78 89       	ldd	r23, Y+16	; 0x10
     692:	89 89       	ldd	r24, Y+17	; 0x11
     694:	9a 89       	ldd	r25, Y+18	; 0x12
     696:	2b ea       	ldi	r18, 0xAB	; 171
     698:	3a ea       	ldi	r19, 0xAA	; 170
     69a:	4a e2       	ldi	r20, 0x2A	; 42
     69c:	50 e4       	ldi	r21, 0x40	; 64
     69e:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__mulsf3>
     6a2:	dc 01       	movw	r26, r24
     6a4:	cb 01       	movw	r24, r22
     6a6:	8b 8b       	std	Y+19, r24	; 0x13
     6a8:	9c 8b       	std	Y+20, r25	; 0x14
     6aa:	ad 8b       	std	Y+21, r26	; 0x15
     6ac:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     6ae:	11 e0       	ldi	r17, 0x01	; 1
     6b0:	6b 89       	ldd	r22, Y+19	; 0x13
     6b2:	7c 89       	ldd	r23, Y+20	; 0x14
     6b4:	8d 89       	ldd	r24, Y+21	; 0x15
     6b6:	9e 89       	ldd	r25, Y+22	; 0x16
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	40 e8       	ldi	r20, 0x80	; 128
     6be:	5f e3       	ldi	r21, 0x3F	; 63
     6c0:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__cmpsf2>
     6c4:	88 23       	and	r24, r24
     6c6:	0c f0       	brlt	.+2      	; 0x6ca <lcd_init+0x19a>
     6c8:	10 e0       	ldi	r17, 0x00	; 0
     6ca:	11 23       	and	r17, r17
     6cc:	19 f0       	breq	.+6      	; 0x6d4 <lcd_init+0x1a4>
		__ticks = 1;
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	8f 8b       	std	Y+23, r24	; 0x17
     6d2:	a3 c0       	rjmp	.+326    	; 0x81a <lcd_init+0x2ea>
	else if (__tmp > 255)
     6d4:	11 e0       	ldi	r17, 0x01	; 1
     6d6:	6b 89       	ldd	r22, Y+19	; 0x13
     6d8:	7c 89       	ldd	r23, Y+20	; 0x14
     6da:	8d 89       	ldd	r24, Y+21	; 0x15
     6dc:	9e 89       	ldd	r25, Y+22	; 0x16
     6de:	20 e0       	ldi	r18, 0x00	; 0
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	4f e7       	ldi	r20, 0x7F	; 127
     6e4:	53 e4       	ldi	r21, 0x43	; 67
     6e6:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__gesf2>
     6ea:	18 16       	cp	r1, r24
     6ec:	0c f0       	brlt	.+2      	; 0x6f0 <lcd_init+0x1c0>
     6ee:	10 e0       	ldi	r17, 0x00	; 0
     6f0:	11 23       	and	r17, r17
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <lcd_init+0x1c6>
     6f4:	89 c0       	rjmp	.+274    	; 0x808 <lcd_init+0x2d8>
	{
		_delay_ms(__us / 1000.0);
     6f6:	6f 85       	ldd	r22, Y+15	; 0x0f
     6f8:	78 89       	ldd	r23, Y+16	; 0x10
     6fa:	89 89       	ldd	r24, Y+17	; 0x11
     6fc:	9a 89       	ldd	r25, Y+18	; 0x12
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	4a e7       	ldi	r20, 0x7A	; 122
     704:	54 e4       	ldi	r21, 0x44	; 68
     706:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__divsf3>
     70a:	dc 01       	movw	r26, r24
     70c:	cb 01       	movw	r24, r22
     70e:	88 8f       	std	Y+24, r24	; 0x18
     710:	99 8f       	std	Y+25, r25	; 0x19
     712:	aa 8f       	std	Y+26, r26	; 0x1a
     714:	bb 8f       	std	Y+27, r27	; 0x1b
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     716:	68 8d       	ldd	r22, Y+24	; 0x18
     718:	79 8d       	ldd	r23, Y+25	; 0x19
     71a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     71c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	4a ef       	ldi	r20, 0xFA	; 250
     724:	54 e4       	ldi	r21, 0x44	; 68
     726:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__mulsf3>
     72a:	dc 01       	movw	r26, r24
     72c:	cb 01       	movw	r24, r22
     72e:	8c 8f       	std	Y+28, r24	; 0x1c
     730:	9d 8f       	std	Y+29, r25	; 0x1d
     732:	ae 8f       	std	Y+30, r26	; 0x1e
     734:	bf 8f       	std	Y+31, r27	; 0x1f
	if (__tmp < 1.0)
     736:	11 e0       	ldi	r17, 0x01	; 1
     738:	6c 8d       	ldd	r22, Y+28	; 0x1c
     73a:	7d 8d       	ldd	r23, Y+29	; 0x1d
     73c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     73e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	40 e8       	ldi	r20, 0x80	; 128
     746:	5f e3       	ldi	r21, 0x3F	; 63
     748:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__cmpsf2>
     74c:	88 23       	and	r24, r24
     74e:	0c f0       	brlt	.+2      	; 0x752 <lcd_init+0x222>
     750:	10 e0       	ldi	r17, 0x00	; 0
     752:	11 23       	and	r17, r17
     754:	29 f0       	breq	.+10     	; 0x760 <lcd_init+0x230>
		__ticks = 1;
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	99 a3       	lds	r25, 0x59
     75c:	88 a3       	lds	r24, 0x58
     75e:	46 c0       	rjmp	.+140    	; 0x7ec <lcd_init+0x2bc>
	else if (__tmp > 65535)
     760:	11 e0       	ldi	r17, 0x01	; 1
     762:	6c 8d       	ldd	r22, Y+28	; 0x1c
     764:	7d 8d       	ldd	r23, Y+29	; 0x1d
     766:	8e 8d       	ldd	r24, Y+30	; 0x1e
     768:	9f 8d       	ldd	r25, Y+31	; 0x1f
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	3f ef       	ldi	r19, 0xFF	; 255
     76e:	4f e7       	ldi	r20, 0x7F	; 127
     770:	57 e4       	ldi	r21, 0x47	; 71
     772:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__gesf2>
     776:	18 16       	cp	r1, r24
     778:	0c f0       	brlt	.+2      	; 0x77c <lcd_init+0x24c>
     77a:	10 e0       	ldi	r17, 0x00	; 0
     77c:	11 23       	and	r17, r17
     77e:	61 f1       	breq	.+88     	; 0x7d8 <lcd_init+0x2a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     780:	68 8d       	ldd	r22, Y+24	; 0x18
     782:	79 8d       	ldd	r23, Y+25	; 0x19
     784:	8a 8d       	ldd	r24, Y+26	; 0x1a
     786:	9b 8d       	ldd	r25, Y+27	; 0x1b
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	40 e2       	ldi	r20, 0x20	; 32
     78e:	51 e4       	ldi	r21, 0x41	; 65
     790:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__mulsf3>
     794:	dc 01       	movw	r26, r24
     796:	cb 01       	movw	r24, r22
     798:	bc 01       	movw	r22, r24
     79a:	cd 01       	movw	r24, r26
     79c:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fixunssfsi>
     7a0:	dc 01       	movw	r26, r24
     7a2:	cb 01       	movw	r24, r22
     7a4:	99 a3       	lds	r25, 0x59
     7a6:	88 a3       	lds	r24, 0x58
     7a8:	12 c0       	rjmp	.+36     	; 0x7ce <lcd_init+0x29e>
     7aa:	88 ec       	ldi	r24, 0xC8	; 200
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	9b a3       	lds	r25, 0x5b
     7b0:	8a a3       	lds	r24, 0x5a
     7b2:	8a a1       	lds	r24, 0x4a
     7b4:	9b a1       	lds	r25, 0x4b
     7b6:	8c 01       	movw	r16, r24
     7b8:	c8 01       	movw	r24, r16
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	f1 f7       	brne	.-4      	; 0x7ba <lcd_init+0x28a>
     7be:	8c 01       	movw	r16, r24
     7c0:	1b a3       	lds	r17, 0x5b
     7c2:	0a a3       	lds	r16, 0x5a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7c4:	88 a1       	lds	r24, 0x48
     7c6:	99 a1       	lds	r25, 0x49
     7c8:	01 97       	sbiw	r24, 0x01	; 1
     7ca:	99 a3       	lds	r25, 0x59
     7cc:	88 a3       	lds	r24, 0x58
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7ce:	88 a1       	lds	r24, 0x48
     7d0:	99 a1       	lds	r25, 0x49
     7d2:	00 97       	sbiw	r24, 0x00	; 0
     7d4:	51 f7       	brne	.-44     	; 0x7aa <lcd_init+0x27a>
     7d6:	28 c0       	rjmp	.+80     	; 0x828 <lcd_init+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7d8:	6c 8d       	ldd	r22, Y+28	; 0x1c
     7da:	7d 8d       	ldd	r23, Y+29	; 0x1d
     7dc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     7de:	9f 8d       	ldd	r25, Y+31	; 0x1f
     7e0:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fixunssfsi>
     7e4:	dc 01       	movw	r26, r24
     7e6:	cb 01       	movw	r24, r22
     7e8:	99 a3       	lds	r25, 0x59
     7ea:	88 a3       	lds	r24, 0x58
     7ec:	88 a1       	lds	r24, 0x48
     7ee:	99 a1       	lds	r25, 0x49
     7f0:	9d a3       	lds	r25, 0x5d
     7f2:	8c a3       	lds	r24, 0x5c
     7f4:	8c a1       	lds	r24, 0x4c
     7f6:	9d a1       	lds	r25, 0x4d
     7f8:	8c 01       	movw	r16, r24
     7fa:	f8 01       	movw	r30, r16
     7fc:	31 97       	sbiw	r30, 0x01	; 1
     7fe:	f1 f7       	brne	.-4      	; 0x7fc <lcd_init+0x2cc>
     800:	8f 01       	movw	r16, r30
     802:	1d a3       	lds	r17, 0x5d
     804:	0c a3       	lds	r16, 0x5c
     806:	10 c0       	rjmp	.+32     	; 0x828 <lcd_init+0x2f8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     808:	6b 89       	ldd	r22, Y+19	; 0x13
     80a:	7c 89       	ldd	r23, Y+20	; 0x14
     80c:	8d 89       	ldd	r24, Y+21	; 0x15
     80e:	9e 89       	ldd	r25, Y+22	; 0x16
     810:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fixunssfsi>
     814:	dc 01       	movw	r26, r24
     816:	cb 01       	movw	r24, r22
     818:	8f 8b       	std	Y+23, r24	; 0x17
     81a:	8f 89       	ldd	r24, Y+23	; 0x17
     81c:	8e a3       	lds	r24, 0x5e
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     81e:	8e a1       	lds	r24, 0x4e
     820:	18 2f       	mov	r17, r24
     822:	1a 95       	dec	r17
     824:	f1 f7       	brne	.-4      	; 0x822 <lcd_init+0x2f2>
     826:	1e a3       	lds	r17, 0x5e
	_delay_us(4100);	 // wait more than 4.1ms
	PORTC &= 0b00000000; // E,RW,RS = 0,0,0
     828:	85 e3       	ldi	r24, 0x35	; 53
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	fc 01       	movw	r30, r24
     82e:	80 81       	ld	r24, Z
     830:	85 e3       	ldi	r24, 0x35	; 53
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	fc 01       	movw	r30, r24
     836:	10 82       	st	Z, r1
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	a8 ec       	ldi	r26, 0xC8	; 200
     83e:	b2 e4       	ldi	r27, 0x42	; 66
     840:	8f a3       	lds	r24, 0x5f
     842:	98 a7       	lds	r25, 0x78
     844:	a9 a7       	lds	r26, 0x79
     846:	ba a7       	lds	r27, 0x7a
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     848:	6f a1       	lds	r22, 0x4f
     84a:	78 a5       	lds	r23, 0x68
     84c:	89 a5       	lds	r24, 0x69
     84e:	9a a5       	lds	r25, 0x6a
     850:	2b ea       	ldi	r18, 0xAB	; 171
     852:	3a ea       	ldi	r19, 0xAA	; 170
     854:	4a e2       	ldi	r20, 0x2A	; 42
     856:	50 e4       	ldi	r21, 0x40	; 64
     858:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__mulsf3>
     85c:	dc 01       	movw	r26, r24
     85e:	cb 01       	movw	r24, r22
     860:	8b a7       	lds	r24, 0x7b
     862:	9c a7       	lds	r25, 0x7c
     864:	ad a7       	lds	r26, 0x7d
     866:	be a7       	lds	r27, 0x7e
	if (__tmp < 1.0)
     868:	11 e0       	ldi	r17, 0x01	; 1
     86a:	6b a5       	lds	r22, 0x6b
     86c:	7c a5       	lds	r23, 0x6c
     86e:	8d a5       	lds	r24, 0x6d
     870:	9e a5       	lds	r25, 0x6e
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	40 e8       	ldi	r20, 0x80	; 128
     878:	5f e3       	ldi	r21, 0x3F	; 63
     87a:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__cmpsf2>
     87e:	88 23       	and	r24, r24
     880:	0c f0       	brlt	.+2      	; 0x884 <lcd_init+0x354>
     882:	10 e0       	ldi	r17, 0x00	; 0
     884:	11 23       	and	r17, r17
     886:	19 f0       	breq	.+6      	; 0x88e <lcd_init+0x35e>
		__ticks = 1;
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	8f a7       	lds	r24, 0x7f
     88c:	a3 c0       	rjmp	.+326    	; 0x9d4 <lcd_init+0x4a4>
	else if (__tmp > 255)
     88e:	11 e0       	ldi	r17, 0x01	; 1
     890:	6b a5       	lds	r22, 0x6b
     892:	7c a5       	lds	r23, 0x6c
     894:	8d a5       	lds	r24, 0x6d
     896:	9e a5       	lds	r25, 0x6e
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	4f e7       	ldi	r20, 0x7F	; 127
     89e:	53 e4       	ldi	r21, 0x43	; 67
     8a0:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__gesf2>
     8a4:	18 16       	cp	r1, r24
     8a6:	0c f0       	brlt	.+2      	; 0x8aa <lcd_init+0x37a>
     8a8:	10 e0       	ldi	r17, 0x00	; 0
     8aa:	11 23       	and	r17, r17
     8ac:	09 f4       	brne	.+2      	; 0x8b0 <lcd_init+0x380>
     8ae:	89 c0       	rjmp	.+274    	; 0x9c2 <lcd_init+0x492>
	{
		_delay_ms(__us / 1000.0);
     8b0:	6f a1       	lds	r22, 0x4f
     8b2:	78 a5       	lds	r23, 0x68
     8b4:	89 a5       	lds	r24, 0x69
     8b6:	9a a5       	lds	r25, 0x6a
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	4a e7       	ldi	r20, 0x7A	; 122
     8be:	54 e4       	ldi	r21, 0x44	; 68
     8c0:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__divsf3>
     8c4:	dc 01       	movw	r26, r24
     8c6:	cb 01       	movw	r24, r22
     8c8:	88 ab       	sts	0x58, r24
     8ca:	99 ab       	sts	0x59, r25
     8cc:	aa ab       	sts	0x5a, r26
     8ce:	bb ab       	sts	0x5b, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     8d0:	68 a9       	sts	0x48, r22
     8d2:	79 a9       	sts	0x49, r23
     8d4:	8a a9       	sts	0x4a, r24
     8d6:	9b a9       	sts	0x4b, r25
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	4a ef       	ldi	r20, 0xFA	; 250
     8de:	54 e4       	ldi	r21, 0x44	; 68
     8e0:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__mulsf3>
     8e4:	dc 01       	movw	r26, r24
     8e6:	cb 01       	movw	r24, r22
     8e8:	8c ab       	sts	0x5c, r24
     8ea:	9d ab       	sts	0x5d, r25
     8ec:	ae ab       	sts	0x5e, r26
     8ee:	bf ab       	sts	0x5f, r27
	if (__tmp < 1.0)
     8f0:	11 e0       	ldi	r17, 0x01	; 1
     8f2:	6c a9       	sts	0x4c, r22
     8f4:	7d a9       	sts	0x4d, r23
     8f6:	8e a9       	sts	0x4e, r24
     8f8:	9f a9       	sts	0x4f, r25
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	40 e8       	ldi	r20, 0x80	; 128
     900:	5f e3       	ldi	r21, 0x3F	; 63
     902:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__cmpsf2>
     906:	88 23       	and	r24, r24
     908:	0c f0       	brlt	.+2      	; 0x90c <lcd_init+0x3dc>
     90a:	10 e0       	ldi	r17, 0x00	; 0
     90c:	11 23       	and	r17, r17
     90e:	29 f0       	breq	.+10     	; 0x91a <lcd_init+0x3ea>
		__ticks = 1;
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	99 af       	sts	0x79, r25
     916:	88 af       	sts	0x78, r24
     918:	46 c0       	rjmp	.+140    	; 0x9a6 <lcd_init+0x476>
	else if (__tmp > 65535)
     91a:	11 e0       	ldi	r17, 0x01	; 1
     91c:	6c a9       	sts	0x4c, r22
     91e:	7d a9       	sts	0x4d, r23
     920:	8e a9       	sts	0x4e, r24
     922:	9f a9       	sts	0x4f, r25
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f e7       	ldi	r20, 0x7F	; 127
     92a:	57 e4       	ldi	r21, 0x47	; 71
     92c:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__gesf2>
     930:	18 16       	cp	r1, r24
     932:	0c f0       	brlt	.+2      	; 0x936 <lcd_init+0x406>
     934:	10 e0       	ldi	r17, 0x00	; 0
     936:	11 23       	and	r17, r17
     938:	61 f1       	breq	.+88     	; 0x992 <lcd_init+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     93a:	68 a9       	sts	0x48, r22
     93c:	79 a9       	sts	0x49, r23
     93e:	8a a9       	sts	0x4a, r24
     940:	9b a9       	sts	0x4b, r25
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	40 e2       	ldi	r20, 0x20	; 32
     948:	51 e4       	ldi	r21, 0x41	; 65
     94a:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__mulsf3>
     94e:	dc 01       	movw	r26, r24
     950:	cb 01       	movw	r24, r22
     952:	bc 01       	movw	r22, r24
     954:	cd 01       	movw	r24, r26
     956:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fixunssfsi>
     95a:	dc 01       	movw	r26, r24
     95c:	cb 01       	movw	r24, r22
     95e:	99 af       	sts	0x79, r25
     960:	88 af       	sts	0x78, r24
     962:	12 c0       	rjmp	.+36     	; 0x988 <lcd_init+0x458>
     964:	88 ec       	ldi	r24, 0xC8	; 200
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	9b af       	sts	0x7b, r25
     96a:	8a af       	sts	0x7a, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     96c:	8a ad       	sts	0x6a, r24
     96e:	9b ad       	sts	0x6b, r25
     970:	8c 01       	movw	r16, r24
     972:	c8 01       	movw	r24, r16
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	f1 f7       	brne	.-4      	; 0x974 <lcd_init+0x444>
     978:	8c 01       	movw	r16, r24
     97a:	1b af       	sts	0x7b, r17
     97c:	0a af       	sts	0x7a, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     97e:	88 ad       	sts	0x68, r24
     980:	99 ad       	sts	0x69, r25
     982:	01 97       	sbiw	r24, 0x01	; 1
     984:	99 af       	sts	0x79, r25
     986:	88 af       	sts	0x78, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     988:	88 ad       	sts	0x68, r24
     98a:	99 ad       	sts	0x69, r25
     98c:	00 97       	sbiw	r24, 0x00	; 0
     98e:	51 f7       	brne	.-44     	; 0x964 <lcd_init+0x434>
     990:	28 c0       	rjmp	.+80     	; 0x9e2 <lcd_init+0x4b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     992:	6c a9       	sts	0x4c, r22
     994:	7d a9       	sts	0x4d, r23
     996:	8e a9       	sts	0x4e, r24
     998:	9f a9       	sts	0x4f, r25
     99a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fixunssfsi>
     99e:	dc 01       	movw	r26, r24
     9a0:	cb 01       	movw	r24, r22
     9a2:	99 af       	sts	0x79, r25
     9a4:	88 af       	sts	0x78, r24
     9a6:	88 ad       	sts	0x68, r24
     9a8:	99 ad       	sts	0x69, r25
     9aa:	9d af       	sts	0x7d, r25
     9ac:	8c af       	sts	0x7c, r24
     9ae:	8c ad       	sts	0x6c, r24
     9b0:	9d ad       	sts	0x6d, r25
     9b2:	8c 01       	movw	r16, r24
     9b4:	f8 01       	movw	r30, r16
     9b6:	31 97       	sbiw	r30, 0x01	; 1
     9b8:	f1 f7       	brne	.-4      	; 0x9b6 <lcd_init+0x486>
     9ba:	8f 01       	movw	r16, r30
     9bc:	1d af       	sts	0x7d, r17
     9be:	0c af       	sts	0x7c, r16
     9c0:	10 c0       	rjmp	.+32     	; 0x9e2 <lcd_init+0x4b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     9c2:	6b a5       	lds	r22, 0x6b
     9c4:	7c a5       	lds	r23, 0x6c
     9c6:	8d a5       	lds	r24, 0x6d
     9c8:	9e a5       	lds	r25, 0x6e
     9ca:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fixunssfsi>
     9ce:	dc 01       	movw	r26, r24
     9d0:	cb 01       	movw	r24, r22
     9d2:	8f a7       	lds	r24, 0x7f
     9d4:	8f a5       	lds	r24, 0x6f
     9d6:	8e af       	sts	0x7e, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     9d8:	8e ad       	sts	0x6e, r24
     9da:	18 2f       	mov	r17, r24
     9dc:	1a 95       	dec	r17
     9de:	f1 f7       	brne	.-4      	; 0x9dc <lcd_init+0x4ac>
     9e0:	1e af       	sts	0x7e, r17
	_delay_us(100);		 // wait more than 100us
	PORTC &= 0b00000000; // E,RW,RS = 0,0,0
     9e2:	85 e3       	ldi	r24, 0x35	; 53
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	fc 01       	movw	r30, r24
     9e8:	80 81       	ld	r24, Z
     9ea:	85 e3       	ldi	r24, 0x35	; 53
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	fc 01       	movw	r30, r24
     9f0:	10 82       	st	Z, r1

	lcd_command(0b00111000); // function set : 8-bit mode
     9f2:	88 e3       	ldi	r24, 0x38	; 56
     9f4:	0e 94 80 01 	call	0x300	; 0x300 <lcd_command>
	lcd_command(0b00001000); // display off
     9f8:	88 e0       	ldi	r24, 0x08	; 8
     9fa:	0e 94 80 01 	call	0x300	; 0x300 <lcd_command>
	lcd_command(0b00000001); // display clear
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	0e 94 80 01 	call	0x300	; 0x300 <lcd_command>
	lcd_command(0b00000110); // entry mode
     a04:	86 e0       	ldi	r24, 0x06	; 6
     a06:	0e 94 80 01 	call	0x300	; 0x300 <lcd_command>

	lcd_command(0b00001111); // display on, cursor on, cursor blank
     a0a:	8f e0       	ldi	r24, 0x0F	; 15
     a0c:	0e 94 80 01 	call	0x300	; 0x300 <lcd_command>
}
     a10:	ee 96       	adiw	r28, 0x3e	; 62
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	f8 94       	cli
     a16:	de bf       	out	0x3e, r29	; 62
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	cd bf       	out	0x3d, r28	; 61
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	08 95       	ret

00000a26 <lcd_data>:

void lcd_data(unsigned char byte)
{
     a26:	0f 93       	push	r16
     a28:	1f 93       	push	r17
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	cd b7       	in	r28, 0x3d	; 61
     a30:	de b7       	in	r29, 0x3e	; 62
     a32:	e1 97       	sbiw	r28, 0x31	; 49
     a34:	0f b6       	in	r0, 0x3f	; 63
     a36:	f8 94       	cli
     a38:	de bf       	out	0x3e, r29	; 62
     a3a:	0f be       	out	0x3f, r0	; 63
     a3c:	cd bf       	out	0x3d, r28	; 61
     a3e:	89 ab       	sts	0x59, r24
	lcd_busy();
     a40:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_busy>

	PORTC |= 0b00000001;	// RS=1
     a44:	85 e3       	ldi	r24, 0x35	; 53
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	25 e3       	ldi	r18, 0x35	; 53
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	f9 01       	movw	r30, r18
     a4e:	20 81       	ld	r18, Z
     a50:	21 60       	ori	r18, 0x01	; 1
     a52:	fc 01       	movw	r30, r24
     a54:	20 83       	st	Z, r18
	PORTC &= 0b00000101;	// RW=0
     a56:	85 e3       	ldi	r24, 0x35	; 53
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	25 e3       	ldi	r18, 0x35	; 53
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	f9 01       	movw	r30, r18
     a60:	20 81       	ld	r18, Z
     a62:	25 70       	andi	r18, 0x05	; 5
     a64:	fc 01       	movw	r30, r24
     a66:	20 83       	st	Z, r18
	PORTC |= 0b00000100;	// E=1
     a68:	85 e3       	ldi	r24, 0x35	; 53
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	25 e3       	ldi	r18, 0x35	; 53
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	f9 01       	movw	r30, r18
     a72:	20 81       	ld	r18, Z
     a74:	24 60       	ori	r18, 0x04	; 4
     a76:	fc 01       	movw	r30, r24
     a78:	20 83       	st	Z, r18
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a8 e4       	ldi	r26, 0x48	; 72
     a80:	b2 e4       	ldi	r27, 0x42	; 66
     a82:	89 83       	std	Y+1, r24	; 0x01
     a84:	9a 83       	std	Y+2, r25	; 0x02
     a86:	ab 83       	std	Y+3, r26	; 0x03
     a88:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     a8a:	69 81       	ldd	r22, Y+1	; 0x01
     a8c:	7a 81       	ldd	r23, Y+2	; 0x02
     a8e:	8b 81       	ldd	r24, Y+3	; 0x03
     a90:	9c 81       	ldd	r25, Y+4	; 0x04
     a92:	2b ea       	ldi	r18, 0xAB	; 171
     a94:	3a ea       	ldi	r19, 0xAA	; 170
     a96:	4a e2       	ldi	r20, 0x2A	; 42
     a98:	50 e4       	ldi	r21, 0x40	; 64
     a9a:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__mulsf3>
     a9e:	dc 01       	movw	r26, r24
     aa0:	cb 01       	movw	r24, r22
     aa2:	8d 83       	std	Y+5, r24	; 0x05
     aa4:	9e 83       	std	Y+6, r25	; 0x06
     aa6:	af 83       	std	Y+7, r26	; 0x07
     aa8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     aaa:	11 e0       	ldi	r17, 0x01	; 1
     aac:	6d 81       	ldd	r22, Y+5	; 0x05
     aae:	7e 81       	ldd	r23, Y+6	; 0x06
     ab0:	8f 81       	ldd	r24, Y+7	; 0x07
     ab2:	98 85       	ldd	r25, Y+8	; 0x08
     ab4:	20 e0       	ldi	r18, 0x00	; 0
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	40 e8       	ldi	r20, 0x80	; 128
     aba:	5f e3       	ldi	r21, 0x3F	; 63
     abc:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__cmpsf2>
     ac0:	88 23       	and	r24, r24
     ac2:	0c f0       	brlt	.+2      	; 0xac6 <lcd_data+0xa0>
     ac4:	10 e0       	ldi	r17, 0x00	; 0
     ac6:	11 23       	and	r17, r17
     ac8:	19 f0       	breq	.+6      	; 0xad0 <lcd_data+0xaa>
		__ticks = 1;
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	89 87       	std	Y+9, r24	; 0x09
     ace:	a3 c0       	rjmp	.+326    	; 0xc16 <lcd_data+0x1f0>
	else if (__tmp > 255)
     ad0:	11 e0       	ldi	r17, 0x01	; 1
     ad2:	6d 81       	ldd	r22, Y+5	; 0x05
     ad4:	7e 81       	ldd	r23, Y+6	; 0x06
     ad6:	8f 81       	ldd	r24, Y+7	; 0x07
     ad8:	98 85       	ldd	r25, Y+8	; 0x08
     ada:	20 e0       	ldi	r18, 0x00	; 0
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	4f e7       	ldi	r20, 0x7F	; 127
     ae0:	53 e4       	ldi	r21, 0x43	; 67
     ae2:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__gesf2>
     ae6:	18 16       	cp	r1, r24
     ae8:	0c f0       	brlt	.+2      	; 0xaec <lcd_data+0xc6>
     aea:	10 e0       	ldi	r17, 0x00	; 0
     aec:	11 23       	and	r17, r17
     aee:	09 f4       	brne	.+2      	; 0xaf2 <lcd_data+0xcc>
     af0:	89 c0       	rjmp	.+274    	; 0xc04 <lcd_data+0x1de>
	{
		_delay_ms(__us / 1000.0);
     af2:	69 81       	ldd	r22, Y+1	; 0x01
     af4:	7a 81       	ldd	r23, Y+2	; 0x02
     af6:	8b 81       	ldd	r24, Y+3	; 0x03
     af8:	9c 81       	ldd	r25, Y+4	; 0x04
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	4a e7       	ldi	r20, 0x7A	; 122
     b00:	54 e4       	ldi	r21, 0x44	; 68
     b02:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__divsf3>
     b06:	dc 01       	movw	r26, r24
     b08:	cb 01       	movw	r24, r22
     b0a:	8a 87       	std	Y+10, r24	; 0x0a
     b0c:	9b 87       	std	Y+11, r25	; 0x0b
     b0e:	ac 87       	std	Y+12, r26	; 0x0c
     b10:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     b12:	6a 85       	ldd	r22, Y+10	; 0x0a
     b14:	7b 85       	ldd	r23, Y+11	; 0x0b
     b16:	8c 85       	ldd	r24, Y+12	; 0x0c
     b18:	9d 85       	ldd	r25, Y+13	; 0x0d
     b1a:	20 e0       	ldi	r18, 0x00	; 0
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	4a ef       	ldi	r20, 0xFA	; 250
     b20:	54 e4       	ldi	r21, 0x44	; 68
     b22:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__mulsf3>
     b26:	dc 01       	movw	r26, r24
     b28:	cb 01       	movw	r24, r22
     b2a:	8e 87       	std	Y+14, r24	; 0x0e
     b2c:	9f 87       	std	Y+15, r25	; 0x0f
     b2e:	a8 8b       	std	Y+16, r26	; 0x10
     b30:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     b32:	11 e0       	ldi	r17, 0x01	; 1
     b34:	6e 85       	ldd	r22, Y+14	; 0x0e
     b36:	7f 85       	ldd	r23, Y+15	; 0x0f
     b38:	88 89       	ldd	r24, Y+16	; 0x10
     b3a:	99 89       	ldd	r25, Y+17	; 0x11
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	40 e8       	ldi	r20, 0x80	; 128
     b42:	5f e3       	ldi	r21, 0x3F	; 63
     b44:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__cmpsf2>
     b48:	88 23       	and	r24, r24
     b4a:	0c f0       	brlt	.+2      	; 0xb4e <lcd_data+0x128>
     b4c:	10 e0       	ldi	r17, 0x00	; 0
     b4e:	11 23       	and	r17, r17
     b50:	29 f0       	breq	.+10     	; 0xb5c <lcd_data+0x136>
		__ticks = 1;
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	9b 8b       	std	Y+19, r25	; 0x13
     b58:	8a 8b       	std	Y+18, r24	; 0x12
     b5a:	46 c0       	rjmp	.+140    	; 0xbe8 <lcd_data+0x1c2>
	else if (__tmp > 65535)
     b5c:	11 e0       	ldi	r17, 0x01	; 1
     b5e:	6e 85       	ldd	r22, Y+14	; 0x0e
     b60:	7f 85       	ldd	r23, Y+15	; 0x0f
     b62:	88 89       	ldd	r24, Y+16	; 0x10
     b64:	99 89       	ldd	r25, Y+17	; 0x11
     b66:	20 e0       	ldi	r18, 0x00	; 0
     b68:	3f ef       	ldi	r19, 0xFF	; 255
     b6a:	4f e7       	ldi	r20, 0x7F	; 127
     b6c:	57 e4       	ldi	r21, 0x47	; 71
     b6e:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__gesf2>
     b72:	18 16       	cp	r1, r24
     b74:	0c f0       	brlt	.+2      	; 0xb78 <lcd_data+0x152>
     b76:	10 e0       	ldi	r17, 0x00	; 0
     b78:	11 23       	and	r17, r17
     b7a:	61 f1       	breq	.+88     	; 0xbd4 <lcd_data+0x1ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b7c:	6a 85       	ldd	r22, Y+10	; 0x0a
     b7e:	7b 85       	ldd	r23, Y+11	; 0x0b
     b80:	8c 85       	ldd	r24, Y+12	; 0x0c
     b82:	9d 85       	ldd	r25, Y+13	; 0x0d
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	40 e2       	ldi	r20, 0x20	; 32
     b8a:	51 e4       	ldi	r21, 0x41	; 65
     b8c:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__mulsf3>
     b90:	dc 01       	movw	r26, r24
     b92:	cb 01       	movw	r24, r22
     b94:	bc 01       	movw	r22, r24
     b96:	cd 01       	movw	r24, r26
     b98:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fixunssfsi>
     b9c:	dc 01       	movw	r26, r24
     b9e:	cb 01       	movw	r24, r22
     ba0:	9b 8b       	std	Y+19, r25	; 0x13
     ba2:	8a 8b       	std	Y+18, r24	; 0x12
     ba4:	12 c0       	rjmp	.+36     	; 0xbca <lcd_data+0x1a4>
     ba6:	88 ec       	ldi	r24, 0xC8	; 200
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	9d 8b       	std	Y+21, r25	; 0x15
     bac:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bae:	8c 89       	ldd	r24, Y+20	; 0x14
     bb0:	9d 89       	ldd	r25, Y+21	; 0x15
     bb2:	8c 01       	movw	r16, r24
     bb4:	c8 01       	movw	r24, r16
     bb6:	01 97       	sbiw	r24, 0x01	; 1
     bb8:	f1 f7       	brne	.-4      	; 0xbb6 <lcd_data+0x190>
     bba:	8c 01       	movw	r16, r24
     bbc:	1d 8b       	std	Y+21, r17	; 0x15
     bbe:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bc0:	8a 89       	ldd	r24, Y+18	; 0x12
     bc2:	9b 89       	ldd	r25, Y+19	; 0x13
     bc4:	01 97       	sbiw	r24, 0x01	; 1
     bc6:	9b 8b       	std	Y+19, r25	; 0x13
     bc8:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bca:	8a 89       	ldd	r24, Y+18	; 0x12
     bcc:	9b 89       	ldd	r25, Y+19	; 0x13
     bce:	00 97       	sbiw	r24, 0x00	; 0
     bd0:	51 f7       	brne	.-44     	; 0xba6 <lcd_data+0x180>
     bd2:	28 c0       	rjmp	.+80     	; 0xc24 <lcd_data+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bd4:	6e 85       	ldd	r22, Y+14	; 0x0e
     bd6:	7f 85       	ldd	r23, Y+15	; 0x0f
     bd8:	88 89       	ldd	r24, Y+16	; 0x10
     bda:	99 89       	ldd	r25, Y+17	; 0x11
     bdc:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fixunssfsi>
     be0:	dc 01       	movw	r26, r24
     be2:	cb 01       	movw	r24, r22
     be4:	9b 8b       	std	Y+19, r25	; 0x13
     be6:	8a 8b       	std	Y+18, r24	; 0x12
     be8:	8a 89       	ldd	r24, Y+18	; 0x12
     bea:	9b 89       	ldd	r25, Y+19	; 0x13
     bec:	9f 8b       	std	Y+23, r25	; 0x17
     bee:	8e 8b       	std	Y+22, r24	; 0x16
     bf0:	8e 89       	ldd	r24, Y+22	; 0x16
     bf2:	9f 89       	ldd	r25, Y+23	; 0x17
     bf4:	8c 01       	movw	r16, r24
     bf6:	f8 01       	movw	r30, r16
     bf8:	31 97       	sbiw	r30, 0x01	; 1
     bfa:	f1 f7       	brne	.-4      	; 0xbf8 <lcd_data+0x1d2>
     bfc:	8f 01       	movw	r16, r30
     bfe:	1f 8b       	std	Y+23, r17	; 0x17
     c00:	0e 8b       	std	Y+22, r16	; 0x16
     c02:	10 c0       	rjmp	.+32     	; 0xc24 <lcd_data+0x1fe>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     c04:	6d 81       	ldd	r22, Y+5	; 0x05
     c06:	7e 81       	ldd	r23, Y+6	; 0x06
     c08:	8f 81       	ldd	r24, Y+7	; 0x07
     c0a:	98 85       	ldd	r25, Y+8	; 0x08
     c0c:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fixunssfsi>
     c10:	dc 01       	movw	r26, r24
     c12:	cb 01       	movw	r24, r22
     c14:	89 87       	std	Y+9, r24	; 0x09
     c16:	89 85       	ldd	r24, Y+9	; 0x09
     c18:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     c1a:	88 8d       	ldd	r24, Y+24	; 0x18
     c1c:	18 2f       	mov	r17, r24
     c1e:	1a 95       	dec	r17
     c20:	f1 f7       	brne	.-4      	; 0xc1e <lcd_data+0x1f8>
     c22:	18 8f       	std	Y+24, r17	; 0x18
	_delay_us(50);			// constant time delay
	PORTA = byte;
     c24:	8b e3       	ldi	r24, 0x3B	; 59
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	29 a9       	sts	0x49, r18
     c2a:	fc 01       	movw	r30, r24
     c2c:	20 83       	st	Z, r18
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	a8 e4       	ldi	r26, 0x48	; 72
     c34:	b2 e4       	ldi	r27, 0x42	; 66
     c36:	89 8f       	std	Y+25, r24	; 0x19
     c38:	9a 8f       	std	Y+26, r25	; 0x1a
     c3a:	ab 8f       	std	Y+27, r26	; 0x1b
     c3c:	bc 8f       	std	Y+28, r27	; 0x1c
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     c3e:	69 8d       	ldd	r22, Y+25	; 0x19
     c40:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c42:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c44:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c46:	2b ea       	ldi	r18, 0xAB	; 171
     c48:	3a ea       	ldi	r19, 0xAA	; 170
     c4a:	4a e2       	ldi	r20, 0x2A	; 42
     c4c:	50 e4       	ldi	r21, 0x40	; 64
     c4e:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__mulsf3>
     c52:	dc 01       	movw	r26, r24
     c54:	cb 01       	movw	r24, r22
     c56:	8d 8f       	std	Y+29, r24	; 0x1d
     c58:	9e 8f       	std	Y+30, r25	; 0x1e
     c5a:	af 8f       	std	Y+31, r26	; 0x1f
     c5c:	b8 a3       	lds	r27, 0x58
	if (__tmp < 1.0)
     c5e:	11 e0       	ldi	r17, 0x01	; 1
     c60:	6d 8d       	ldd	r22, Y+29	; 0x1d
     c62:	7e 8d       	ldd	r23, Y+30	; 0x1e
     c64:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c66:	98 a1       	lds	r25, 0x48
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	40 e8       	ldi	r20, 0x80	; 128
     c6e:	5f e3       	ldi	r21, 0x3F	; 63
     c70:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__cmpsf2>
     c74:	88 23       	and	r24, r24
     c76:	0c f0       	brlt	.+2      	; 0xc7a <lcd_data+0x254>
     c78:	10 e0       	ldi	r17, 0x00	; 0
     c7a:	11 23       	and	r17, r17
     c7c:	19 f0       	breq	.+6      	; 0xc84 <lcd_data+0x25e>
		__ticks = 1;
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	89 a3       	lds	r24, 0x59
     c82:	a3 c0       	rjmp	.+326    	; 0xdca <lcd_data+0x3a4>
	else if (__tmp > 255)
     c84:	11 e0       	ldi	r17, 0x01	; 1
     c86:	6d 8d       	ldd	r22, Y+29	; 0x1d
     c88:	7e 8d       	ldd	r23, Y+30	; 0x1e
     c8a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c8c:	98 a1       	lds	r25, 0x48
     c8e:	20 e0       	ldi	r18, 0x00	; 0
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	4f e7       	ldi	r20, 0x7F	; 127
     c94:	53 e4       	ldi	r21, 0x43	; 67
     c96:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__gesf2>
     c9a:	18 16       	cp	r1, r24
     c9c:	0c f0       	brlt	.+2      	; 0xca0 <lcd_data+0x27a>
     c9e:	10 e0       	ldi	r17, 0x00	; 0
     ca0:	11 23       	and	r17, r17
     ca2:	09 f4       	brne	.+2      	; 0xca6 <lcd_data+0x280>
     ca4:	89 c0       	rjmp	.+274    	; 0xdb8 <lcd_data+0x392>
	{
		_delay_ms(__us / 1000.0);
     ca6:	69 8d       	ldd	r22, Y+25	; 0x19
     ca8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     caa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cac:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	4a e7       	ldi	r20, 0x7A	; 122
     cb4:	54 e4       	ldi	r21, 0x44	; 68
     cb6:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__divsf3>
     cba:	dc 01       	movw	r26, r24
     cbc:	cb 01       	movw	r24, r22
     cbe:	8a a3       	lds	r24, 0x5a
     cc0:	9b a3       	lds	r25, 0x5b
     cc2:	ac a3       	lds	r26, 0x5c
     cc4:	bd a3       	lds	r27, 0x5d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     cc6:	6a a1       	lds	r22, 0x4a
     cc8:	7b a1       	lds	r23, 0x4b
     cca:	8c a1       	lds	r24, 0x4c
     ccc:	9d a1       	lds	r25, 0x4d
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	4a ef       	ldi	r20, 0xFA	; 250
     cd4:	54 e4       	ldi	r21, 0x44	; 68
     cd6:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__mulsf3>
     cda:	dc 01       	movw	r26, r24
     cdc:	cb 01       	movw	r24, r22
     cde:	8e a3       	lds	r24, 0x5e
     ce0:	9f a3       	lds	r25, 0x5f
     ce2:	a8 a7       	lds	r26, 0x78
     ce4:	b9 a7       	lds	r27, 0x79
	if (__tmp < 1.0)
     ce6:	11 e0       	ldi	r17, 0x01	; 1
     ce8:	6e a1       	lds	r22, 0x4e
     cea:	7f a1       	lds	r23, 0x4f
     cec:	88 a5       	lds	r24, 0x68
     cee:	99 a5       	lds	r25, 0x69
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	40 e8       	ldi	r20, 0x80	; 128
     cf6:	5f e3       	ldi	r21, 0x3F	; 63
     cf8:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__cmpsf2>
     cfc:	88 23       	and	r24, r24
     cfe:	0c f0       	brlt	.+2      	; 0xd02 <lcd_data+0x2dc>
     d00:	10 e0       	ldi	r17, 0x00	; 0
     d02:	11 23       	and	r17, r17
     d04:	29 f0       	breq	.+10     	; 0xd10 <lcd_data+0x2ea>
		__ticks = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9b a7       	lds	r25, 0x7b
     d0c:	8a a7       	lds	r24, 0x7a
     d0e:	46 c0       	rjmp	.+140    	; 0xd9c <lcd_data+0x376>
	else if (__tmp > 65535)
     d10:	11 e0       	ldi	r17, 0x01	; 1
     d12:	6e a1       	lds	r22, 0x4e
     d14:	7f a1       	lds	r23, 0x4f
     d16:	88 a5       	lds	r24, 0x68
     d18:	99 a5       	lds	r25, 0x69
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	3f ef       	ldi	r19, 0xFF	; 255
     d1e:	4f e7       	ldi	r20, 0x7F	; 127
     d20:	57 e4       	ldi	r21, 0x47	; 71
     d22:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__gesf2>
     d26:	18 16       	cp	r1, r24
     d28:	0c f0       	brlt	.+2      	; 0xd2c <lcd_data+0x306>
     d2a:	10 e0       	ldi	r17, 0x00	; 0
     d2c:	11 23       	and	r17, r17
     d2e:	61 f1       	breq	.+88     	; 0xd88 <lcd_data+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d30:	6a a1       	lds	r22, 0x4a
     d32:	7b a1       	lds	r23, 0x4b
     d34:	8c a1       	lds	r24, 0x4c
     d36:	9d a1       	lds	r25, 0x4d
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	40 e2       	ldi	r20, 0x20	; 32
     d3e:	51 e4       	ldi	r21, 0x41	; 65
     d40:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__mulsf3>
     d44:	dc 01       	movw	r26, r24
     d46:	cb 01       	movw	r24, r22
     d48:	bc 01       	movw	r22, r24
     d4a:	cd 01       	movw	r24, r26
     d4c:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fixunssfsi>
     d50:	dc 01       	movw	r26, r24
     d52:	cb 01       	movw	r24, r22
     d54:	9b a7       	lds	r25, 0x7b
     d56:	8a a7       	lds	r24, 0x7a
     d58:	12 c0       	rjmp	.+36     	; 0xd7e <lcd_data+0x358>
     d5a:	88 ec       	ldi	r24, 0xC8	; 200
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	9d a7       	lds	r25, 0x7d
     d60:	8c a7       	lds	r24, 0x7c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d62:	8c a5       	lds	r24, 0x6c
     d64:	9d a5       	lds	r25, 0x6d
     d66:	8c 01       	movw	r16, r24
     d68:	c8 01       	movw	r24, r16
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	f1 f7       	brne	.-4      	; 0xd6a <lcd_data+0x344>
     d6e:	8c 01       	movw	r16, r24
     d70:	1d a7       	lds	r17, 0x7d
     d72:	0c a7       	lds	r16, 0x7c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d74:	8a a5       	lds	r24, 0x6a
     d76:	9b a5       	lds	r25, 0x6b
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	9b a7       	lds	r25, 0x7b
     d7c:	8a a7       	lds	r24, 0x7a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d7e:	8a a5       	lds	r24, 0x6a
     d80:	9b a5       	lds	r25, 0x6b
     d82:	00 97       	sbiw	r24, 0x00	; 0
     d84:	51 f7       	brne	.-44     	; 0xd5a <lcd_data+0x334>
     d86:	28 c0       	rjmp	.+80     	; 0xdd8 <lcd_data+0x3b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d88:	6e a1       	lds	r22, 0x4e
     d8a:	7f a1       	lds	r23, 0x4f
     d8c:	88 a5       	lds	r24, 0x68
     d8e:	99 a5       	lds	r25, 0x69
     d90:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fixunssfsi>
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
     d98:	9b a7       	lds	r25, 0x7b
     d9a:	8a a7       	lds	r24, 0x7a
     d9c:	8a a5       	lds	r24, 0x6a
     d9e:	9b a5       	lds	r25, 0x6b
     da0:	9f a7       	lds	r25, 0x7f
     da2:	8e a7       	lds	r24, 0x7e
     da4:	8e a5       	lds	r24, 0x6e
     da6:	9f a5       	lds	r25, 0x6f
     da8:	8c 01       	movw	r16, r24
     daa:	f8 01       	movw	r30, r16
     dac:	31 97       	sbiw	r30, 0x01	; 1
     dae:	f1 f7       	brne	.-4      	; 0xdac <lcd_data+0x386>
     db0:	8f 01       	movw	r16, r30
     db2:	1f a7       	lds	r17, 0x7f
     db4:	0e a7       	lds	r16, 0x7e
     db6:	10 c0       	rjmp	.+32     	; 0xdd8 <lcd_data+0x3b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     db8:	6d 8d       	ldd	r22, Y+29	; 0x1d
     dba:	7e 8d       	ldd	r23, Y+30	; 0x1e
     dbc:	8f 8d       	ldd	r24, Y+31	; 0x1f
     dbe:	98 a1       	lds	r25, 0x48
     dc0:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fixunssfsi>
     dc4:	dc 01       	movw	r26, r24
     dc6:	cb 01       	movw	r24, r22
     dc8:	89 a3       	lds	r24, 0x59
     dca:	89 a1       	lds	r24, 0x49
     dcc:	88 ab       	sts	0x58, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     dce:	88 a9       	sts	0x48, r24
     dd0:	18 2f       	mov	r17, r24
     dd2:	1a 95       	dec	r17
     dd4:	f1 f7       	brne	.-4      	; 0xdd2 <lcd_data+0x3ac>
     dd6:	18 ab       	sts	0x58, r17
	_delay_us(50);			// constant time delay
	PORTC &= 0b00000011;	// E = 0, Depending on LCD light timing, E=1 -> 0
     dd8:	85 e3       	ldi	r24, 0x35	; 53
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	25 e3       	ldi	r18, 0x35	; 53
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	f9 01       	movw	r30, r18
     de2:	20 81       	ld	r18, Z
     de4:	23 70       	andi	r18, 0x03	; 3
     de6:	fc 01       	movw	r30, r24
     de8:	20 83       	st	Z, r18
}
     dea:	e1 96       	adiw	r28, 0x31	; 49
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	de bf       	out	0x3e, r29	; 62
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	cd bf       	out	0x3d, r28	; 61
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	1f 91       	pop	r17
     dfc:	0f 91       	pop	r16
     dfe:	08 95       	ret

00000e00 <lcd_string>:

void lcd_string(char *str)
{
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	00 d0       	rcall	.+0      	; 0xe06 <lcd_string+0x6>
     e06:	00 d0       	rcall	.+0      	; 0xe08 <lcd_string+0x8>
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	9c 83       	std	Y+4, r25	; 0x04
     e0e:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0;
     e10:	1a 82       	std	Y+2, r1	; 0x02
     e12:	19 82       	std	Y+1, r1	; 0x01

	while(1)
	{
		if(str[i] == '\0') break;
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	9a 81       	ldd	r25, Y+2	; 0x02
     e18:	2b 81       	ldd	r18, Y+3	; 0x03
     e1a:	3c 81       	ldd	r19, Y+4	; 0x04
     e1c:	82 0f       	add	r24, r18
     e1e:	93 1f       	adc	r25, r19
     e20:	fc 01       	movw	r30, r24
     e22:	80 81       	ld	r24, Z
     e24:	88 23       	and	r24, r24
     e26:	89 f0       	breq	.+34     	; 0xe4a <lcd_string+0x4a>
		lcd_data(str[i++]);
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	9a 81       	ldd	r25, Y+2	; 0x02
     e2c:	2b 81       	ldd	r18, Y+3	; 0x03
     e2e:	3c 81       	ldd	r19, Y+4	; 0x04
     e30:	82 0f       	add	r24, r18
     e32:	93 1f       	adc	r25, r19
     e34:	fc 01       	movw	r30, r24
     e36:	20 81       	ld	r18, Z
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	9a 81       	ldd	r25, Y+2	; 0x02
     e3c:	01 96       	adiw	r24, 0x01	; 1
     e3e:	9a 83       	std	Y+2, r25	; 0x02
     e40:	89 83       	std	Y+1, r24	; 0x01
     e42:	82 2f       	mov	r24, r18
     e44:	0e 94 13 05 	call	0xa26	; 0xa26 <lcd_data>
	}
     e48:	e5 cf       	rjmp	.-54     	; 0xe14 <lcd_string+0x14>
{
	int i = 0;

	while(1)
	{
		if(str[i] == '\0') break;
     e4a:	00 00       	nop
		lcd_data(str[i++]);
	}
}
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	08 95       	ret

00000e5a <lcd_display_clear>:

void lcd_display_clear()
{
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
	lcd_command(0b00000001);
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	0e 94 80 01 	call	0x300	; 0x300 <lcd_command>
}
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	08 95       	ret

00000e6e <lcd_cursor_home>:

void lcd_cursor_home()
{
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
	lcd_command(0b00000010);
     e76:	82 e0       	ldi	r24, 0x02	; 2
     e78:	0e 94 80 01 	call	0x300	; 0x300 <lcd_command>
}
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	08 95       	ret

00000e82 <lcd_entry_mode>:

void lcd_entry_mode(int ID, int S)
{
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	00 d0       	rcall	.+0      	; 0xe88 <lcd_entry_mode+0x6>
     e88:	00 d0       	rcall	.+0      	; 0xe8a <lcd_entry_mode+0x8>
     e8a:	0f 92       	push	r0
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	9b 83       	std	Y+3, r25	; 0x03
     e92:	8a 83       	std	Y+2, r24	; 0x02
     e94:	7d 83       	std	Y+5, r23	; 0x05
     e96:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char cmd;

	cmd = 0b00000100;
     e98:	84 e0       	ldi	r24, 0x04	; 4
     e9a:	89 83       	std	Y+1, r24	; 0x01
	if (ID == 1) cmd = cmd | 0b00000010;
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	9b 81       	ldd	r25, Y+3	; 0x03
     ea0:	81 30       	cpi	r24, 0x01	; 1
     ea2:	91 05       	cpc	r25, r1
     ea4:	19 f4       	brne	.+6      	; 0xeac <lcd_entry_mode+0x2a>
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	82 60       	ori	r24, 0x02	; 2
     eaa:	89 83       	std	Y+1, r24	; 0x01
	if (S == 1) cmd = cmd | 0b00000001;
     eac:	8c 81       	ldd	r24, Y+4	; 0x04
     eae:	9d 81       	ldd	r25, Y+5	; 0x05
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	91 05       	cpc	r25, r1
     eb4:	19 f4       	brne	.+6      	; 0xebc <lcd_entry_mode+0x3a>
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	81 60       	ori	r24, 0x01	; 1
     eba:	89 83       	std	Y+1, r24	; 0x01
	lcd_command(cmd);
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	0e 94 80 01 	call	0x300	; 0x300 <lcd_command>
}
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	08 95       	ret

00000ed2 <lcd_display_OnOff>:

void lcd_display_OnOff(int D, int C, int B)
{
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	28 97       	sbiw	r28, 0x08	; 8
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	de bf       	out	0x3e, r29	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	cd bf       	out	0x3d, r28	; 61
     ee6:	9c 83       	std	Y+4, r25	; 0x04
     ee8:	8b 83       	std	Y+3, r24	; 0x03
     eea:	7e 83       	std	Y+6, r23	; 0x06
     eec:	6d 83       	std	Y+5, r22	; 0x05
     eee:	58 87       	std	Y+8, r21	; 0x08
     ef0:	4f 83       	std	Y+7, r20	; 0x07
	unsigned cmd;

	cmd = 0b00001000;
     ef2:	88 e0       	ldi	r24, 0x08	; 8
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	9a 83       	std	Y+2, r25	; 0x02
     ef8:	89 83       	std	Y+1, r24	; 0x01
	if (D == 1) cmd = cmd | 0b00000100;
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	9c 81       	ldd	r25, Y+4	; 0x04
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	91 05       	cpc	r25, r1
     f02:	29 f4       	brne	.+10     	; 0xf0e <lcd_display_OnOff+0x3c>
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	9a 81       	ldd	r25, Y+2	; 0x02
     f08:	84 60       	ori	r24, 0x04	; 4
     f0a:	9a 83       	std	Y+2, r25	; 0x02
     f0c:	89 83       	std	Y+1, r24	; 0x01
	if (C == 1) cmd = cmd | 0b00000010;
     f0e:	8d 81       	ldd	r24, Y+5	; 0x05
     f10:	9e 81       	ldd	r25, Y+6	; 0x06
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	91 05       	cpc	r25, r1
     f16:	29 f4       	brne	.+10     	; 0xf22 <lcd_display_OnOff+0x50>
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	9a 81       	ldd	r25, Y+2	; 0x02
     f1c:	82 60       	ori	r24, 0x02	; 2
     f1e:	9a 83       	std	Y+2, r25	; 0x02
     f20:	89 83       	std	Y+1, r24	; 0x01
	if (B == 1) cmd = cmd | 0b00000001;
     f22:	8f 81       	ldd	r24, Y+7	; 0x07
     f24:	98 85       	ldd	r25, Y+8	; 0x08
     f26:	81 30       	cpi	r24, 0x01	; 1
     f28:	91 05       	cpc	r25, r1
     f2a:	29 f4       	brne	.+10     	; 0xf36 <lcd_display_OnOff+0x64>
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	9a 81       	ldd	r25, Y+2	; 0x02
     f30:	81 60       	ori	r24, 0x01	; 1
     f32:	9a 83       	std	Y+2, r25	; 0x02
     f34:	89 83       	std	Y+1, r24	; 0x01
	lcd_command(cmd);
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	0e 94 80 01 	call	0x300	; 0x300 <lcd_command>
}
     f3c:	28 96       	adiw	r28, 0x08	; 8
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	de bf       	out	0x3e, r29	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	cd bf       	out	0x3d, r28	; 61
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	08 95       	ret

00000f4e <lcd_cursordisplay_shift>:

void lcd_cursordisplay_shift(int SC, int RL)
{
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	00 d0       	rcall	.+0      	; 0xf54 <lcd_cursordisplay_shift+0x6>
     f54:	00 d0       	rcall	.+0      	; 0xf56 <lcd_cursordisplay_shift+0x8>
     f56:	00 d0       	rcall	.+0      	; 0xf58 <lcd_cursordisplay_shift+0xa>
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
     f5c:	9c 83       	std	Y+4, r25	; 0x04
     f5e:	8b 83       	std	Y+3, r24	; 0x03
     f60:	7e 83       	std	Y+6, r23	; 0x06
     f62:	6d 83       	std	Y+5, r22	; 0x05
	unsigned cmd;

	cmd = 0b00010000;
     f64:	80 e1       	ldi	r24, 0x10	; 16
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	9a 83       	std	Y+2, r25	; 0x02
     f6a:	89 83       	std	Y+1, r24	; 0x01
	if (SC == 1) cmd = cmd | 0b00001000;
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	9c 81       	ldd	r25, Y+4	; 0x04
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	91 05       	cpc	r25, r1
     f74:	29 f4       	brne	.+10     	; 0xf80 <lcd_cursordisplay_shift+0x32>
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	9a 81       	ldd	r25, Y+2	; 0x02
     f7a:	88 60       	ori	r24, 0x08	; 8
     f7c:	9a 83       	std	Y+2, r25	; 0x02
     f7e:	89 83       	std	Y+1, r24	; 0x01
	if (RL == 1) cmd = cmd | 0b00000100;
     f80:	8d 81       	ldd	r24, Y+5	; 0x05
     f82:	9e 81       	ldd	r25, Y+6	; 0x06
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	91 05       	cpc	r25, r1
     f88:	29 f4       	brne	.+10     	; 0xf94 <lcd_cursordisplay_shift+0x46>
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	9a 81       	ldd	r25, Y+2	; 0x02
     f8e:	84 60       	ori	r24, 0x04	; 4
     f90:	9a 83       	std	Y+2, r25	; 0x02
     f92:	89 83       	std	Y+1, r24	; 0x01
	lcd_command(cmd);
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	0e 94 80 01 	call	0x300	; 0x300 <lcd_command>
}
     f9a:	26 96       	adiw	r28, 0x06	; 6
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	08 95       	ret

00000fac <lcd_display_position>:

void lcd_display_position(unsigned char row, unsigned char col)
{
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <lcd_display_position+0x6>
     fb2:	00 d0       	rcall	.+0      	; 0xfb4 <lcd_display_position+0x8>
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	8b 83       	std	Y+3, r24	; 0x03
     fba:	6c 83       	std	Y+4, r22	; 0x04
	unsigned cmd;

	cmd = 0b10000000 | ((row-1)*0x40+(col-1));
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	88 2f       	mov	r24, r24
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	01 97       	sbiw	r24, 0x01	; 1
     fc4:	9c 01       	movw	r18, r24
     fc6:	00 24       	eor	r0, r0
     fc8:	36 95       	lsr	r19
     fca:	27 95       	ror	r18
     fcc:	07 94       	ror	r0
     fce:	36 95       	lsr	r19
     fd0:	27 95       	ror	r18
     fd2:	07 94       	ror	r0
     fd4:	32 2f       	mov	r19, r18
     fd6:	20 2d       	mov	r18, r0
     fd8:	8c 81       	ldd	r24, Y+4	; 0x04
     fda:	88 2f       	mov	r24, r24
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	01 97       	sbiw	r24, 0x01	; 1
     fe0:	82 0f       	add	r24, r18
     fe2:	93 1f       	adc	r25, r19
     fe4:	80 68       	ori	r24, 0x80	; 128
     fe6:	9a 83       	std	Y+2, r25	; 0x02
     fe8:	89 83       	std	Y+1, r24	; 0x01
	lcd_command(cmd);
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	0e 94 80 01 	call	0x300	; 0x300 <lcd_command>
}
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	df 91       	pop	r29
     ffa:	cf 91       	pop	r28
     ffc:	08 95       	ret

00000ffe <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "lcdFunc.h"

int main(){
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	e6 97       	sbiw	r28, 0x36	; 54
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	f8 94       	cli
    1010:	de bf       	out	0x3e, r29	; 62
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	cd bf       	out	0x3d, r28	; 61
	int ADval;		
	float Vin, Vref = 5.0;
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	a0 ea       	ldi	r26, 0xA0	; 160
    101c:	b0 e4       	ldi	r27, 0x40	; 64
    101e:	89 83       	std	Y+1, r24	; 0x01
    1020:	9a 83       	std	Y+2, r25	; 0x02
    1022:	ab 83       	std	Y+3, r26	; 0x03
    1024:	bc 83       	std	Y+4, r27	; 0x04
	char msg[16];

	lcd_init();
    1026:	0e 94 98 02 	call	0x530	; 0x530 <lcd_init>

	DDRF &= 0xFE; //PF0입력
    102a:	81 e6       	ldi	r24, 0x61	; 97
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	21 e6       	ldi	r18, 0x61	; 97
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	f9 01       	movw	r30, r18
    1034:	20 81       	ld	r18, Z
    1036:	2e 7f       	andi	r18, 0xFE	; 254
    1038:	fc 01       	movw	r30, r24
    103a:	20 83       	st	Z, r18
	ADMUX = 0b00000000; //VREF = AVCC,ADLAR=0하여 LSB로 10bit 사용, ADC0 단극성입력
    103c:	87 e2       	ldi	r24, 0x27	; 39
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	fc 01       	movw	r30, r24
    1042:	10 82       	st	Z, r1
	ADCSRA = 0b10000111;//A/D인에이블, 분주비128
    1044:	86 e2       	ldi	r24, 0x26	; 38
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	27 e8       	ldi	r18, 0x87	; 135
    104a:	fc 01       	movw	r30, r24
    104c:	20 83       	st	Z, r18
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	a0 ea       	ldi	r26, 0xA0	; 160
    1054:	b0 e4       	ldi	r27, 0x40	; 64
    1056:	8b 87       	std	Y+11, r24	; 0x0b
    1058:	9c 87       	std	Y+12, r25	; 0x0c
    105a:	ad 87       	std	Y+13, r26	; 0x0d
    105c:	be 87       	std	Y+14, r27	; 0x0e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    105e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1060:	7c 85       	ldd	r23, Y+12	; 0x0c
    1062:	8d 85       	ldd	r24, Y+13	; 0x0d
    1064:	9e 85       	ldd	r25, Y+14	; 0x0e
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	4a ef       	ldi	r20, 0xFA	; 250
    106c:	54 e4       	ldi	r21, 0x44	; 68
    106e:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__mulsf3>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	8f 87       	std	Y+15, r24	; 0x0f
    1078:	98 8b       	std	Y+16, r25	; 0x10
    107a:	a9 8b       	std	Y+17, r26	; 0x11
    107c:	ba 8b       	std	Y+18, r27	; 0x12
	if (__tmp < 1.0)
    107e:	11 e0       	ldi	r17, 0x01	; 1
    1080:	6f 85       	ldd	r22, Y+15	; 0x0f
    1082:	78 89       	ldd	r23, Y+16	; 0x10
    1084:	89 89       	ldd	r24, Y+17	; 0x11
    1086:	9a 89       	ldd	r25, Y+18	; 0x12
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	40 e8       	ldi	r20, 0x80	; 128
    108e:	5f e3       	ldi	r21, 0x3F	; 63
    1090:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__cmpsf2>
    1094:	88 23       	and	r24, r24
    1096:	0c f0       	brlt	.+2      	; 0x109a <main+0x9c>
    1098:	10 e0       	ldi	r17, 0x00	; 0
    109a:	11 23       	and	r17, r17
    109c:	29 f0       	breq	.+10     	; 0x10a8 <main+0xaa>
		__ticks = 1;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	9c 8b       	std	Y+20, r25	; 0x14
    10a4:	8b 8b       	std	Y+19, r24	; 0x13
    10a6:	46 c0       	rjmp	.+140    	; 0x1134 <__stack+0x35>
	else if (__tmp > 65535)
    10a8:	11 e0       	ldi	r17, 0x01	; 1
    10aa:	6f 85       	ldd	r22, Y+15	; 0x0f
    10ac:	78 89       	ldd	r23, Y+16	; 0x10
    10ae:	89 89       	ldd	r24, Y+17	; 0x11
    10b0:	9a 89       	ldd	r25, Y+18	; 0x12
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	3f ef       	ldi	r19, 0xFF	; 255
    10b6:	4f e7       	ldi	r20, 0x7F	; 127
    10b8:	57 e4       	ldi	r21, 0x47	; 71
    10ba:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__gesf2>
    10be:	18 16       	cp	r1, r24
    10c0:	0c f0       	brlt	.+2      	; 0x10c4 <main+0xc6>
    10c2:	10 e0       	ldi	r17, 0x00	; 0
    10c4:	11 23       	and	r17, r17
    10c6:	61 f1       	breq	.+88     	; 0x1120 <__stack+0x21>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    10cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	40 e2       	ldi	r20, 0x20	; 32
    10d6:	51 e4       	ldi	r21, 0x41	; 65
    10d8:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__mulsf3>
    10dc:	dc 01       	movw	r26, r24
    10de:	cb 01       	movw	r24, r22
    10e0:	bc 01       	movw	r22, r24
    10e2:	cd 01       	movw	r24, r26
    10e4:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fixunssfsi>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	9c 8b       	std	Y+20, r25	; 0x14
    10ee:	8b 8b       	std	Y+19, r24	; 0x13
    10f0:	12 c0       	rjmp	.+36     	; 0x1116 <__stack+0x17>
    10f2:	88 ec       	ldi	r24, 0xC8	; 200
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	9e 8b       	std	Y+22, r25	; 0x16
    10f8:	8d 8b       	std	Y+21, r24	; 0x15
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10fa:	8d 89       	ldd	r24, Y+21	; 0x15
    10fc:	9e 89       	ldd	r25, Y+22	; 0x16
    10fe:	8c 01       	movw	r16, r24
    1100:	c8 01       	movw	r24, r16
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	f1 f7       	brne	.-4      	; 0x1102 <__stack+0x3>
    1106:	8c 01       	movw	r16, r24
    1108:	1e 8b       	std	Y+22, r17	; 0x16
    110a:	0d 8b       	std	Y+21, r16	; 0x15
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    110c:	8b 89       	ldd	r24, Y+19	; 0x13
    110e:	9c 89       	ldd	r25, Y+20	; 0x14
    1110:	01 97       	sbiw	r24, 0x01	; 1
    1112:	9c 8b       	std	Y+20, r25	; 0x14
    1114:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1116:	8b 89       	ldd	r24, Y+19	; 0x13
    1118:	9c 89       	ldd	r25, Y+20	; 0x14
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	51 f7       	brne	.-44     	; 0x10f2 <main+0xf4>
    111e:	17 c0       	rjmp	.+46     	; 0x114e <__stack+0x4f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1120:	6f 85       	ldd	r22, Y+15	; 0x0f
    1122:	78 89       	ldd	r23, Y+16	; 0x10
    1124:	89 89       	ldd	r24, Y+17	; 0x11
    1126:	9a 89       	ldd	r25, Y+18	; 0x12
    1128:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fixunssfsi>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	9c 8b       	std	Y+20, r25	; 0x14
    1132:	8b 8b       	std	Y+19, r24	; 0x13
    1134:	8b 89       	ldd	r24, Y+19	; 0x13
    1136:	9c 89       	ldd	r25, Y+20	; 0x14
    1138:	98 8f       	std	Y+24, r25	; 0x18
    113a:	8f 8b       	std	Y+23, r24	; 0x17
    113c:	8f 89       	ldd	r24, Y+23	; 0x17
    113e:	98 8d       	ldd	r25, Y+24	; 0x18
    1140:	8c 01       	movw	r16, r24
    1142:	f8 01       	movw	r30, r16
    1144:	31 97       	sbiw	r30, 0x01	; 1
    1146:	f1 f7       	brne	.-4      	; 0x1144 <__stack+0x45>
    1148:	8f 01       	movw	r16, r30
    114a:	18 8f       	std	Y+24, r17	; 0x18
    114c:	0f 8b       	std	Y+23, r16	; 0x17
		// lcd_display_position(1, 1);			//LCD커서위치를 1행1열로 위치
		// sprintf(msg, "ADC0 = %.2f[V]\0",Vin);
		// lcd_string(msg);					
		// _delay_ms(1000);
		// Vref = PINF;
		ADCSRA = ADCSRA | 0b01000000;
    114e:	86 e2       	ldi	r24, 0x26	; 38
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	26 e2       	ldi	r18, 0x26	; 38
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	f9 01       	movw	r30, r18
    1158:	20 81       	ld	r18, Z
    115a:	20 64       	ori	r18, 0x40	; 64
    115c:	fc 01       	movw	r30, r24
    115e:	20 83       	st	Z, r18
		while((ADCSRA & 0b00010000) == 0);
    1160:	00 00       	nop
    1162:	86 e2       	ldi	r24, 0x26	; 38
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	fc 01       	movw	r30, r24
    1168:	80 81       	ld	r24, Z
    116a:	88 2f       	mov	r24, r24
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	80 71       	andi	r24, 0x10	; 16
    1170:	90 70       	andi	r25, 0x00	; 0
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	b1 f3       	breq	.-20     	; 0x1162 <__stack+0x63>
		ADval = (int)ADCL + ((int)ADCH << 8);
    1176:	84 e2       	ldi	r24, 0x24	; 36
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	fc 01       	movw	r30, r24
    117c:	80 81       	ld	r24, Z
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	85 e2       	ldi	r24, 0x25	; 37
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	fc 01       	movw	r30, r24
    1188:	80 81       	ld	r24, Z
    118a:	88 2f       	mov	r24, r24
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	98 2f       	mov	r25, r24
    1190:	88 27       	eor	r24, r24
    1192:	82 0f       	add	r24, r18
    1194:	93 1f       	adc	r25, r19
    1196:	9e 83       	std	Y+6, r25	; 0x06
    1198:	8d 83       	std	Y+5, r24	; 0x05
		Vin = (float)ADval * Vref / 1023.0;
    119a:	8d 81       	ldd	r24, Y+5	; 0x05
    119c:	9e 81       	ldd	r25, Y+6	; 0x06
    119e:	aa 27       	eor	r26, r26
    11a0:	97 fd       	sbrc	r25, 7
    11a2:	a0 95       	com	r26
    11a4:	ba 2f       	mov	r27, r26
    11a6:	bc 01       	movw	r22, r24
    11a8:	cd 01       	movw	r24, r26
    11aa:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__floatsisf>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	bc 01       	movw	r22, r24
    11b4:	cd 01       	movw	r24, r26
    11b6:	29 81       	ldd	r18, Y+1	; 0x01
    11b8:	3a 81       	ldd	r19, Y+2	; 0x02
    11ba:	4b 81       	ldd	r20, Y+3	; 0x03
    11bc:	5c 81       	ldd	r21, Y+4	; 0x04
    11be:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__mulsf3>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	bc 01       	movw	r22, r24
    11c8:	cd 01       	movw	r24, r26
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 ec       	ldi	r19, 0xC0	; 192
    11ce:	4f e7       	ldi	r20, 0x7F	; 127
    11d0:	54 e4       	ldi	r21, 0x44	; 68
    11d2:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__divsf3>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	8f 83       	std	Y+7, r24	; 0x07
    11dc:	98 87       	std	Y+8, r25	; 0x08
    11de:	a9 87       	std	Y+9, r26	; 0x09
    11e0:	ba 87       	std	Y+10, r27	; 0x0a
		lcd_display_position(1, 1);
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	61 e0       	ldi	r22, 0x01	; 1
    11e6:	0e 94 d6 07 	call	0xfac	; 0xfac <lcd_display_position>
		sprintf(msg, "ADC = %.2f[V]", Vin);
    11ea:	8d b7       	in	r24, 0x3d	; 61
    11ec:	9e b7       	in	r25, 0x3e	; 62
    11ee:	08 97       	sbiw	r24, 0x08	; 8
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	9e bf       	out	0x3e, r25	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	8d bf       	out	0x3d, r24	; 61
    11fa:	2d b7       	in	r18, 0x3d	; 61
    11fc:	3e b7       	in	r19, 0x3e	; 62
    11fe:	2f 5f       	subi	r18, 0xFF	; 255
    1200:	3f 4f       	sbci	r19, 0xFF	; 255
    1202:	ce 01       	movw	r24, r28
    1204:	87 96       	adiw	r24, 0x27	; 39
    1206:	f9 01       	movw	r30, r18
    1208:	91 83       	std	Z+1, r25	; 0x01
    120a:	80 83       	st	Z, r24
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	91 e0       	ldi	r25, 0x01	; 1
    1210:	f9 01       	movw	r30, r18
    1212:	93 83       	std	Z+3, r25	; 0x03
    1214:	82 83       	std	Z+2, r24	; 0x02
    1216:	8f 81       	ldd	r24, Y+7	; 0x07
    1218:	98 85       	ldd	r25, Y+8	; 0x08
    121a:	a9 85       	ldd	r26, Y+9	; 0x09
    121c:	ba 85       	ldd	r27, Y+10	; 0x0a
    121e:	f9 01       	movw	r30, r18
    1220:	84 83       	std	Z+4, r24	; 0x04
    1222:	95 83       	std	Z+5, r25	; 0x05
    1224:	a6 83       	std	Z+6, r26	; 0x06
    1226:	b7 83       	std	Z+7, r27	; 0x07
    1228:	0e 94 24 10 	call	0x2048	; 0x2048 <sprintf>
    122c:	8d b7       	in	r24, 0x3d	; 61
    122e:	9e b7       	in	r25, 0x3e	; 62
    1230:	08 96       	adiw	r24, 0x08	; 8
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	f8 94       	cli
    1236:	9e bf       	out	0x3e, r25	; 62
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	8d bf       	out	0x3d, r24	; 61
		lcd_string(msg);
    123c:	ce 01       	movw	r24, r28
    123e:	87 96       	adiw	r24, 0x27	; 39
    1240:	0e 94 00 07 	call	0xe00	; 0xe00 <lcd_string>
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	aa e7       	ldi	r26, 0x7A	; 122
    124a:	b4 e4       	ldi	r27, 0x44	; 68
    124c:	89 8f       	std	Y+25, r24	; 0x19
    124e:	9a 8f       	std	Y+26, r25	; 0x1a
    1250:	ab 8f       	std	Y+27, r26	; 0x1b
    1252:	bc 8f       	std	Y+28, r27	; 0x1c
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1254:	69 8d       	ldd	r22, Y+25	; 0x19
    1256:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1258:	8b 8d       	ldd	r24, Y+27	; 0x1b
    125a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	4a ef       	ldi	r20, 0xFA	; 250
    1262:	54 e4       	ldi	r21, 0x44	; 68
    1264:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__mulsf3>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	8d 8f       	std	Y+29, r24	; 0x1d
    126e:	9e 8f       	std	Y+30, r25	; 0x1e
    1270:	af 8f       	std	Y+31, r26	; 0x1f
    1272:	b8 a3       	lds	r27, 0x58
	if (__tmp < 1.0)
    1274:	11 e0       	ldi	r17, 0x01	; 1
    1276:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1278:	7e 8d       	ldd	r23, Y+30	; 0x1e
    127a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    127c:	98 a1       	lds	r25, 0x48
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	40 e8       	ldi	r20, 0x80	; 128
    1284:	5f e3       	ldi	r21, 0x3F	; 63
    1286:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__cmpsf2>
    128a:	88 23       	and	r24, r24
    128c:	0c f0       	brlt	.+2      	; 0x1290 <__stack+0x191>
    128e:	10 e0       	ldi	r17, 0x00	; 0
    1290:	11 23       	and	r17, r17
    1292:	29 f0       	breq	.+10     	; 0x129e <__stack+0x19f>
		__ticks = 1;
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	9a a3       	lds	r25, 0x5a
    129a:	89 a3       	lds	r24, 0x59
    129c:	46 c0       	rjmp	.+140    	; 0x132a <__stack+0x22b>
	else if (__tmp > 65535)
    129e:	11 e0       	ldi	r17, 0x01	; 1
    12a0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    12a2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    12a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12a6:	98 a1       	lds	r25, 0x48
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	3f ef       	ldi	r19, 0xFF	; 255
    12ac:	4f e7       	ldi	r20, 0x7F	; 127
    12ae:	57 e4       	ldi	r21, 0x47	; 71
    12b0:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__gesf2>
    12b4:	18 16       	cp	r1, r24
    12b6:	0c f0       	brlt	.+2      	; 0x12ba <__stack+0x1bb>
    12b8:	10 e0       	ldi	r17, 0x00	; 0
    12ba:	11 23       	and	r17, r17
    12bc:	61 f1       	breq	.+88     	; 0x1316 <__stack+0x217>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12be:	69 8d       	ldd	r22, Y+25	; 0x19
    12c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	40 e2       	ldi	r20, 0x20	; 32
    12cc:	51 e4       	ldi	r21, 0x41	; 65
    12ce:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__mulsf3>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	bc 01       	movw	r22, r24
    12d8:	cd 01       	movw	r24, r26
    12da:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fixunssfsi>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	9a a3       	lds	r25, 0x5a
    12e4:	89 a3       	lds	r24, 0x59
    12e6:	12 c0       	rjmp	.+36     	; 0x130c <__stack+0x20d>
    12e8:	88 ec       	ldi	r24, 0xC8	; 200
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	9c a3       	lds	r25, 0x5c
    12ee:	8b a3       	lds	r24, 0x5b
    12f0:	8b a1       	lds	r24, 0x4b
    12f2:	9c a1       	lds	r25, 0x4c
    12f4:	8c 01       	movw	r16, r24
    12f6:	f8 01       	movw	r30, r16
    12f8:	31 97       	sbiw	r30, 0x01	; 1
    12fa:	f1 f7       	brne	.-4      	; 0x12f8 <__stack+0x1f9>
    12fc:	8f 01       	movw	r16, r30
    12fe:	1c a3       	lds	r17, 0x5c
    1300:	0b a3       	lds	r16, 0x5b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1302:	89 a1       	lds	r24, 0x49
    1304:	9a a1       	lds	r25, 0x4a
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	9a a3       	lds	r25, 0x5a
    130a:	89 a3       	lds	r24, 0x59
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    130c:	89 a1       	lds	r24, 0x49
    130e:	9a a1       	lds	r25, 0x4a
    1310:	00 97       	sbiw	r24, 0x00	; 0
    1312:	51 f7       	brne	.-44     	; 0x12e8 <__stack+0x1e9>
    1314:	18 c0       	rjmp	.+48     	; 0x1346 <__stack+0x247>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1316:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1318:	7e 8d       	ldd	r23, Y+30	; 0x1e
    131a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    131c:	98 a1       	lds	r25, 0x48
    131e:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fixunssfsi>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	9a a3       	lds	r25, 0x5a
    1328:	89 a3       	lds	r24, 0x59
    132a:	89 a1       	lds	r24, 0x49
    132c:	9a a1       	lds	r25, 0x4a
    132e:	9e a3       	lds	r25, 0x5e
    1330:	8d a3       	lds	r24, 0x5d
    1332:	8d a1       	lds	r24, 0x4d
    1334:	9e a1       	lds	r25, 0x4e
    1336:	8c 01       	movw	r16, r24
    1338:	c8 01       	movw	r24, r16
    133a:	01 97       	sbiw	r24, 0x01	; 1
    133c:	f1 f7       	brne	.-4      	; 0x133a <__stack+0x23b>
    133e:	8c 01       	movw	r16, r24
    1340:	1e a3       	lds	r17, 0x5e
    1342:	0d a3       	lds	r16, 0x5d
		_delay_ms(1000);
	}
    1344:	04 cf       	rjmp	.-504    	; 0x114e <__stack+0x4f>
    1346:	03 cf       	rjmp	.-506    	; 0x114e <__stack+0x4f>

00001348 <vfprintf>:
    1348:	2f 92       	push	r2
    134a:	3f 92       	push	r3
    134c:	4f 92       	push	r4
    134e:	5f 92       	push	r5
    1350:	6f 92       	push	r6
    1352:	7f 92       	push	r7
    1354:	8f 92       	push	r8
    1356:	9f 92       	push	r9
    1358:	af 92       	push	r10
    135a:	bf 92       	push	r11
    135c:	cf 92       	push	r12
    135e:	df 92       	push	r13
    1360:	ef 92       	push	r14
    1362:	ff 92       	push	r15
    1364:	0f 93       	push	r16
    1366:	1f 93       	push	r17
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
    1370:	65 97       	sbiw	r28, 0x15	; 21
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	cd bf       	out	0x3d, r28	; 61
    137c:	4c 01       	movw	r8, r24
    137e:	7f 87       	std	Y+15, r23	; 0x0f
    1380:	6e 87       	std	Y+14, r22	; 0x0e
    1382:	fc 01       	movw	r30, r24
    1384:	17 82       	std	Z+7, r1	; 0x07
    1386:	16 82       	std	Z+6, r1	; 0x06
    1388:	83 81       	ldd	r24, Z+3	; 0x03
    138a:	81 fd       	sbrc	r24, 1
    138c:	04 c0       	rjmp	.+8      	; 0x1396 <vfprintf+0x4e>
    138e:	76 c3       	rjmp	.+1772   	; 0x1a7c <vfprintf+0x734>
    1390:	4c 85       	ldd	r20, Y+12	; 0x0c
    1392:	5d 85       	ldd	r21, Y+13	; 0x0d
    1394:	04 c0       	rjmp	.+8      	; 0x139e <vfprintf+0x56>
    1396:	1e 01       	movw	r2, r28
    1398:	08 94       	sec
    139a:	21 1c       	adc	r2, r1
    139c:	31 1c       	adc	r3, r1
    139e:	f4 01       	movw	r30, r8
    13a0:	93 81       	ldd	r25, Z+3	; 0x03
    13a2:	ee 85       	ldd	r30, Y+14	; 0x0e
    13a4:	ff 85       	ldd	r31, Y+15	; 0x0f
    13a6:	93 fd       	sbrc	r25, 3
    13a8:	85 91       	lpm	r24, Z+
    13aa:	93 ff       	sbrs	r25, 3
    13ac:	81 91       	ld	r24, Z+
    13ae:	ff 87       	std	Y+15, r31	; 0x0f
    13b0:	ee 87       	std	Y+14, r30	; 0x0e
    13b2:	88 23       	and	r24, r24
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <vfprintf+0x70>
    13b6:	5e c3       	rjmp	.+1724   	; 0x1a74 <vfprintf+0x72c>
    13b8:	85 32       	cpi	r24, 0x25	; 37
    13ba:	41 f4       	brne	.+16     	; 0x13cc <vfprintf+0x84>
    13bc:	93 fd       	sbrc	r25, 3
    13be:	85 91       	lpm	r24, Z+
    13c0:	93 ff       	sbrs	r25, 3
    13c2:	81 91       	ld	r24, Z+
    13c4:	ff 87       	std	Y+15, r31	; 0x0f
    13c6:	ee 87       	std	Y+14, r30	; 0x0e
    13c8:	85 32       	cpi	r24, 0x25	; 37
    13ca:	59 f4       	brne	.+22     	; 0x13e2 <vfprintf+0x9a>
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	b4 01       	movw	r22, r8
    13d0:	4c 8b       	std	Y+20, r20	; 0x14
    13d2:	5d 8b       	std	Y+21, r21	; 0x15
    13d4:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    13d8:	4c 89       	ldd	r20, Y+20	; 0x14
    13da:	5d 89       	ldd	r21, Y+21	; 0x15
    13dc:	5d 87       	std	Y+13, r21	; 0x0d
    13de:	4c 87       	std	Y+12, r20	; 0x0c
    13e0:	d7 cf       	rjmp	.-82     	; 0x1390 <vfprintf+0x48>
    13e2:	ff 24       	eor	r15, r15
    13e4:	dd 24       	eor	r13, r13
    13e6:	10 e0       	ldi	r17, 0x00	; 0
    13e8:	10 32       	cpi	r17, 0x20	; 32
    13ea:	b0 f4       	brcc	.+44     	; 0x1418 <vfprintf+0xd0>
    13ec:	8b 32       	cpi	r24, 0x2B	; 43
    13ee:	69 f0       	breq	.+26     	; 0x140a <vfprintf+0xc2>
    13f0:	8c 32       	cpi	r24, 0x2C	; 44
    13f2:	28 f4       	brcc	.+10     	; 0x13fe <vfprintf+0xb6>
    13f4:	80 32       	cpi	r24, 0x20	; 32
    13f6:	51 f0       	breq	.+20     	; 0x140c <vfprintf+0xc4>
    13f8:	83 32       	cpi	r24, 0x23	; 35
    13fa:	71 f4       	brne	.+28     	; 0x1418 <vfprintf+0xd0>
    13fc:	0b c0       	rjmp	.+22     	; 0x1414 <vfprintf+0xcc>
    13fe:	8d 32       	cpi	r24, 0x2D	; 45
    1400:	39 f0       	breq	.+14     	; 0x1410 <vfprintf+0xc8>
    1402:	80 33       	cpi	r24, 0x30	; 48
    1404:	49 f4       	brne	.+18     	; 0x1418 <vfprintf+0xd0>
    1406:	11 60       	ori	r17, 0x01	; 1
    1408:	2c c0       	rjmp	.+88     	; 0x1462 <vfprintf+0x11a>
    140a:	12 60       	ori	r17, 0x02	; 2
    140c:	14 60       	ori	r17, 0x04	; 4
    140e:	29 c0       	rjmp	.+82     	; 0x1462 <vfprintf+0x11a>
    1410:	18 60       	ori	r17, 0x08	; 8
    1412:	27 c0       	rjmp	.+78     	; 0x1462 <vfprintf+0x11a>
    1414:	10 61       	ori	r17, 0x10	; 16
    1416:	25 c0       	rjmp	.+74     	; 0x1462 <vfprintf+0x11a>
    1418:	17 fd       	sbrc	r17, 7
    141a:	2e c0       	rjmp	.+92     	; 0x1478 <vfprintf+0x130>
    141c:	28 2f       	mov	r18, r24
    141e:	20 53       	subi	r18, 0x30	; 48
    1420:	2a 30       	cpi	r18, 0x0A	; 10
    1422:	98 f4       	brcc	.+38     	; 0x144a <vfprintf+0x102>
    1424:	16 ff       	sbrs	r17, 6
    1426:	08 c0       	rjmp	.+16     	; 0x1438 <vfprintf+0xf0>
    1428:	8f 2d       	mov	r24, r15
    142a:	88 0f       	add	r24, r24
    142c:	f8 2e       	mov	r15, r24
    142e:	ff 0c       	add	r15, r15
    1430:	ff 0c       	add	r15, r15
    1432:	f8 0e       	add	r15, r24
    1434:	f2 0e       	add	r15, r18
    1436:	15 c0       	rjmp	.+42     	; 0x1462 <vfprintf+0x11a>
    1438:	8d 2d       	mov	r24, r13
    143a:	88 0f       	add	r24, r24
    143c:	d8 2e       	mov	r13, r24
    143e:	dd 0c       	add	r13, r13
    1440:	dd 0c       	add	r13, r13
    1442:	d8 0e       	add	r13, r24
    1444:	d2 0e       	add	r13, r18
    1446:	10 62       	ori	r17, 0x20	; 32
    1448:	0c c0       	rjmp	.+24     	; 0x1462 <vfprintf+0x11a>
    144a:	8e 32       	cpi	r24, 0x2E	; 46
    144c:	21 f4       	brne	.+8      	; 0x1456 <vfprintf+0x10e>
    144e:	16 fd       	sbrc	r17, 6
    1450:	11 c3       	rjmp	.+1570   	; 0x1a74 <vfprintf+0x72c>
    1452:	10 64       	ori	r17, 0x40	; 64
    1454:	06 c0       	rjmp	.+12     	; 0x1462 <vfprintf+0x11a>
    1456:	8c 36       	cpi	r24, 0x6C	; 108
    1458:	11 f4       	brne	.+4      	; 0x145e <vfprintf+0x116>
    145a:	10 68       	ori	r17, 0x80	; 128
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <vfprintf+0x11a>
    145e:	88 36       	cpi	r24, 0x68	; 104
    1460:	59 f4       	brne	.+22     	; 0x1478 <vfprintf+0x130>
    1462:	ee 85       	ldd	r30, Y+14	; 0x0e
    1464:	ff 85       	ldd	r31, Y+15	; 0x0f
    1466:	93 fd       	sbrc	r25, 3
    1468:	85 91       	lpm	r24, Z+
    146a:	93 ff       	sbrs	r25, 3
    146c:	81 91       	ld	r24, Z+
    146e:	ff 87       	std	Y+15, r31	; 0x0f
    1470:	ee 87       	std	Y+14, r30	; 0x0e
    1472:	88 23       	and	r24, r24
    1474:	09 f0       	breq	.+2      	; 0x1478 <vfprintf+0x130>
    1476:	b8 cf       	rjmp	.-144    	; 0x13e8 <vfprintf+0xa0>
    1478:	98 2f       	mov	r25, r24
    147a:	95 54       	subi	r25, 0x45	; 69
    147c:	93 30       	cpi	r25, 0x03	; 3
    147e:	18 f4       	brcc	.+6      	; 0x1486 <vfprintf+0x13e>
    1480:	10 61       	ori	r17, 0x10	; 16
    1482:	80 5e       	subi	r24, 0xE0	; 224
    1484:	06 c0       	rjmp	.+12     	; 0x1492 <vfprintf+0x14a>
    1486:	98 2f       	mov	r25, r24
    1488:	95 56       	subi	r25, 0x65	; 101
    148a:	93 30       	cpi	r25, 0x03	; 3
    148c:	08 f0       	brcs	.+2      	; 0x1490 <vfprintf+0x148>
    148e:	a2 c1       	rjmp	.+836    	; 0x17d4 <vfprintf+0x48c>
    1490:	1f 7e       	andi	r17, 0xEF	; 239
    1492:	16 fd       	sbrc	r17, 6
    1494:	02 c0       	rjmp	.+4      	; 0x149a <vfprintf+0x152>
    1496:	e6 e0       	ldi	r30, 0x06	; 6
    1498:	fe 2e       	mov	r15, r30
    149a:	1f 73       	andi	r17, 0x3F	; 63
    149c:	85 36       	cpi	r24, 0x65	; 101
    149e:	11 f4       	brne	.+4      	; 0x14a4 <vfprintf+0x15c>
    14a0:	10 64       	ori	r17, 0x40	; 64
    14a2:	06 c0       	rjmp	.+12     	; 0x14b0 <vfprintf+0x168>
    14a4:	86 36       	cpi	r24, 0x66	; 102
    14a6:	11 f4       	brne	.+4      	; 0x14ac <vfprintf+0x164>
    14a8:	10 68       	ori	r17, 0x80	; 128
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <vfprintf+0x168>
    14ac:	f1 10       	cpse	r15, r1
    14ae:	fa 94       	dec	r15
    14b0:	17 ff       	sbrs	r17, 7
    14b2:	07 c0       	rjmp	.+14     	; 0x14c2 <vfprintf+0x17a>
    14b4:	fb e3       	ldi	r31, 0x3B	; 59
    14b6:	ff 15       	cp	r31, r15
    14b8:	48 f0       	brcs	.+18     	; 0x14cc <vfprintf+0x184>
    14ba:	ef 2c       	mov	r14, r15
    14bc:	e3 94       	inc	r14
    14be:	27 e0       	ldi	r18, 0x07	; 7
    14c0:	0d c0       	rjmp	.+26     	; 0x14dc <vfprintf+0x194>
    14c2:	27 e0       	ldi	r18, 0x07	; 7
    14c4:	2f 15       	cp	r18, r15
    14c6:	30 f0       	brcs	.+12     	; 0x14d4 <vfprintf+0x18c>
    14c8:	2f 2d       	mov	r18, r15
    14ca:	07 c0       	rjmp	.+14     	; 0x14da <vfprintf+0x192>
    14cc:	27 e0       	ldi	r18, 0x07	; 7
    14ce:	7c e3       	ldi	r23, 0x3C	; 60
    14d0:	e7 2e       	mov	r14, r23
    14d2:	04 c0       	rjmp	.+8      	; 0x14dc <vfprintf+0x194>
    14d4:	27 e0       	ldi	r18, 0x07	; 7
    14d6:	67 e0       	ldi	r22, 0x07	; 7
    14d8:	f6 2e       	mov	r15, r22
    14da:	ee 24       	eor	r14, r14
    14dc:	ca 01       	movw	r24, r20
    14de:	04 96       	adiw	r24, 0x04	; 4
    14e0:	9d 87       	std	Y+13, r25	; 0x0d
    14e2:	8c 87       	std	Y+12, r24	; 0x0c
    14e4:	fa 01       	movw	r30, r20
    14e6:	60 81       	ld	r22, Z
    14e8:	71 81       	ldd	r23, Z+1	; 0x01
    14ea:	82 81       	ldd	r24, Z+2	; 0x02
    14ec:	93 81       	ldd	r25, Z+3	; 0x03
    14ee:	a1 01       	movw	r20, r2
    14f0:	0e 2d       	mov	r16, r14
    14f2:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__ftoa_engine>
    14f6:	5c 01       	movw	r10, r24
    14f8:	c9 80       	ldd	r12, Y+1	; 0x01
    14fa:	2c 2d       	mov	r18, r12
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	39 8b       	std	Y+17, r19	; 0x11
    1500:	28 8b       	std	Y+16, r18	; 0x10
    1502:	c0 fe       	sbrs	r12, 0
    1504:	03 c0       	rjmp	.+6      	; 0x150c <vfprintf+0x1c4>
    1506:	38 89       	ldd	r19, Y+16	; 0x10
    1508:	33 ff       	sbrs	r19, 3
    150a:	06 c0       	rjmp	.+12     	; 0x1518 <vfprintf+0x1d0>
    150c:	11 fd       	sbrc	r17, 1
    150e:	06 c0       	rjmp	.+12     	; 0x151c <vfprintf+0x1d4>
    1510:	12 ff       	sbrs	r17, 2
    1512:	06 c0       	rjmp	.+12     	; 0x1520 <vfprintf+0x1d8>
    1514:	00 e2       	ldi	r16, 0x20	; 32
    1516:	05 c0       	rjmp	.+10     	; 0x1522 <vfprintf+0x1da>
    1518:	0d e2       	ldi	r16, 0x2D	; 45
    151a:	03 c0       	rjmp	.+6      	; 0x1522 <vfprintf+0x1da>
    151c:	0b e2       	ldi	r16, 0x2B	; 43
    151e:	01 c0       	rjmp	.+2      	; 0x1522 <vfprintf+0x1da>
    1520:	00 e0       	ldi	r16, 0x00	; 0
    1522:	88 89       	ldd	r24, Y+16	; 0x10
    1524:	99 89       	ldd	r25, Y+17	; 0x11
    1526:	8c 70       	andi	r24, 0x0C	; 12
    1528:	90 70       	andi	r25, 0x00	; 0
    152a:	00 97       	sbiw	r24, 0x00	; 0
    152c:	09 f4       	brne	.+2      	; 0x1530 <vfprintf+0x1e8>
    152e:	3c c0       	rjmp	.+120    	; 0x15a8 <vfprintf+0x260>
    1530:	00 23       	and	r16, r16
    1532:	11 f0       	breq	.+4      	; 0x1538 <vfprintf+0x1f0>
    1534:	84 e0       	ldi	r24, 0x04	; 4
    1536:	01 c0       	rjmp	.+2      	; 0x153a <vfprintf+0x1f2>
    1538:	83 e0       	ldi	r24, 0x03	; 3
    153a:	8d 15       	cp	r24, r13
    153c:	58 f4       	brcc	.+22     	; 0x1554 <vfprintf+0x20c>
    153e:	d8 1a       	sub	r13, r24
    1540:	13 fd       	sbrc	r17, 3
    1542:	09 c0       	rjmp	.+18     	; 0x1556 <vfprintf+0x20e>
    1544:	80 e2       	ldi	r24, 0x20	; 32
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	b4 01       	movw	r22, r8
    154a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    154e:	da 94       	dec	r13
    1550:	c9 f7       	brne	.-14     	; 0x1544 <vfprintf+0x1fc>
    1552:	01 c0       	rjmp	.+2      	; 0x1556 <vfprintf+0x20e>
    1554:	dd 24       	eor	r13, r13
    1556:	00 23       	and	r16, r16
    1558:	29 f0       	breq	.+10     	; 0x1564 <vfprintf+0x21c>
    155a:	80 2f       	mov	r24, r16
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	b4 01       	movw	r22, r8
    1560:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    1564:	88 89       	ldd	r24, Y+16	; 0x10
    1566:	83 fd       	sbrc	r24, 3
    1568:	05 c0       	rjmp	.+10     	; 0x1574 <vfprintf+0x22c>
    156a:	30 e9       	ldi	r19, 0x90	; 144
    156c:	e3 2e       	mov	r14, r19
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	f3 2e       	mov	r15, r19
    1572:	11 c0       	rjmp	.+34     	; 0x1596 <vfprintf+0x24e>
    1574:	2c e8       	ldi	r18, 0x8C	; 140
    1576:	e2 2e       	mov	r14, r18
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	f2 2e       	mov	r15, r18
    157c:	0c c0       	rjmp	.+24     	; 0x1596 <vfprintf+0x24e>
    157e:	01 15       	cp	r16, r1
    1580:	11 05       	cpc	r17, r1
    1582:	09 f0       	breq	.+2      	; 0x1586 <vfprintf+0x23e>
    1584:	80 52       	subi	r24, 0x20	; 32
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	b4 01       	movw	r22, r8
    158a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    158e:	08 94       	sec
    1590:	e1 1c       	adc	r14, r1
    1592:	f1 1c       	adc	r15, r1
    1594:	04 c0       	rjmp	.+8      	; 0x159e <vfprintf+0x256>
    1596:	01 2f       	mov	r16, r17
    1598:	10 e0       	ldi	r17, 0x00	; 0
    159a:	00 71       	andi	r16, 0x10	; 16
    159c:	10 70       	andi	r17, 0x00	; 0
    159e:	f7 01       	movw	r30, r14
    15a0:	84 91       	lpm	r24, Z
    15a2:	88 23       	and	r24, r24
    15a4:	61 f7       	brne	.-40     	; 0x157e <vfprintf+0x236>
    15a6:	63 c2       	rjmp	.+1222   	; 0x1a6e <vfprintf+0x726>
    15a8:	17 ff       	sbrs	r17, 7
    15aa:	0e c0       	rjmp	.+28     	; 0x15c8 <vfprintf+0x280>
    15ac:	ea 0c       	add	r14, r10
    15ae:	f8 89       	ldd	r31, Y+16	; 0x10
    15b0:	f4 ff       	sbrs	r31, 4
    15b2:	04 c0       	rjmp	.+8      	; 0x15bc <vfprintf+0x274>
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	81 33       	cpi	r24, 0x31	; 49
    15b8:	09 f4       	brne	.+2      	; 0x15bc <vfprintf+0x274>
    15ba:	ea 94       	dec	r14
    15bc:	1e 14       	cp	r1, r14
    15be:	4c f5       	brge	.+82     	; 0x1612 <vfprintf+0x2ca>
    15c0:	28 e0       	ldi	r18, 0x08	; 8
    15c2:	2e 15       	cp	r18, r14
    15c4:	48 f1       	brcs	.+82     	; 0x1618 <vfprintf+0x2d0>
    15c6:	2c c0       	rjmp	.+88     	; 0x1620 <vfprintf+0x2d8>
    15c8:	16 fd       	sbrc	r17, 6
    15ca:	2a c0       	rjmp	.+84     	; 0x1620 <vfprintf+0x2d8>
    15cc:	8f 2d       	mov	r24, r15
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	8a 15       	cp	r24, r10
    15d2:	9b 05       	cpc	r25, r11
    15d4:	44 f0       	brlt	.+16     	; 0x15e6 <vfprintf+0x29e>
    15d6:	3c ef       	ldi	r19, 0xFC	; 252
    15d8:	a3 16       	cp	r10, r19
    15da:	3f ef       	ldi	r19, 0xFF	; 255
    15dc:	b3 06       	cpc	r11, r19
    15de:	1c f0       	brlt	.+6      	; 0x15e6 <vfprintf+0x29e>
    15e0:	10 68       	ori	r17, 0x80	; 128
    15e2:	01 c0       	rjmp	.+2      	; 0x15e6 <vfprintf+0x29e>
    15e4:	fa 94       	dec	r15
    15e6:	ff 20       	and	r15, r15
    15e8:	49 f0       	breq	.+18     	; 0x15fc <vfprintf+0x2b4>
    15ea:	e2 e0       	ldi	r30, 0x02	; 2
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	ec 0f       	add	r30, r28
    15f0:	fd 1f       	adc	r31, r29
    15f2:	ef 0d       	add	r30, r15
    15f4:	f1 1d       	adc	r31, r1
    15f6:	80 81       	ld	r24, Z
    15f8:	80 33       	cpi	r24, 0x30	; 48
    15fa:	a1 f3       	breq	.-24     	; 0x15e4 <vfprintf+0x29c>
    15fc:	17 ff       	sbrs	r17, 7
    15fe:	10 c0       	rjmp	.+32     	; 0x1620 <vfprintf+0x2d8>
    1600:	ef 2c       	mov	r14, r15
    1602:	e3 94       	inc	r14
    1604:	8f 2d       	mov	r24, r15
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	a8 16       	cp	r10, r24
    160a:	b9 06       	cpc	r11, r25
    160c:	44 f4       	brge	.+16     	; 0x161e <vfprintf+0x2d6>
    160e:	fa 18       	sub	r15, r10
    1610:	07 c0       	rjmp	.+14     	; 0x1620 <vfprintf+0x2d8>
    1612:	ee 24       	eor	r14, r14
    1614:	e3 94       	inc	r14
    1616:	04 c0       	rjmp	.+8      	; 0x1620 <vfprintf+0x2d8>
    1618:	98 e0       	ldi	r25, 0x08	; 8
    161a:	e9 2e       	mov	r14, r25
    161c:	01 c0       	rjmp	.+2      	; 0x1620 <vfprintf+0x2d8>
    161e:	ff 24       	eor	r15, r15
    1620:	17 ff       	sbrs	r17, 7
    1622:	07 c0       	rjmp	.+14     	; 0x1632 <vfprintf+0x2ea>
    1624:	1a 14       	cp	r1, r10
    1626:	1b 04       	cpc	r1, r11
    1628:	3c f4       	brge	.+14     	; 0x1638 <vfprintf+0x2f0>
    162a:	95 01       	movw	r18, r10
    162c:	2f 5f       	subi	r18, 0xFF	; 255
    162e:	3f 4f       	sbci	r19, 0xFF	; 255
    1630:	05 c0       	rjmp	.+10     	; 0x163c <vfprintf+0x2f4>
    1632:	25 e0       	ldi	r18, 0x05	; 5
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	02 c0       	rjmp	.+4      	; 0x163c <vfprintf+0x2f4>
    1638:	21 e0       	ldi	r18, 0x01	; 1
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	00 23       	and	r16, r16
    163e:	11 f0       	breq	.+4      	; 0x1644 <vfprintf+0x2fc>
    1640:	2f 5f       	subi	r18, 0xFF	; 255
    1642:	3f 4f       	sbci	r19, 0xFF	; 255
    1644:	ff 20       	and	r15, r15
    1646:	29 f0       	breq	.+10     	; 0x1652 <vfprintf+0x30a>
    1648:	8f 2d       	mov	r24, r15
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	01 96       	adiw	r24, 0x01	; 1
    164e:	28 0f       	add	r18, r24
    1650:	39 1f       	adc	r19, r25
    1652:	8d 2d       	mov	r24, r13
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	28 17       	cp	r18, r24
    1658:	39 07       	cpc	r19, r25
    165a:	14 f4       	brge	.+4      	; 0x1660 <vfprintf+0x318>
    165c:	d2 1a       	sub	r13, r18
    165e:	01 c0       	rjmp	.+2      	; 0x1662 <vfprintf+0x31a>
    1660:	dd 24       	eor	r13, r13
    1662:	61 2e       	mov	r6, r17
    1664:	77 24       	eor	r7, r7
    1666:	c3 01       	movw	r24, r6
    1668:	89 70       	andi	r24, 0x09	; 9
    166a:	90 70       	andi	r25, 0x00	; 0
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	49 f4       	brne	.+18     	; 0x1682 <vfprintf+0x33a>
    1670:	06 c0       	rjmp	.+12     	; 0x167e <vfprintf+0x336>
    1672:	80 e2       	ldi	r24, 0x20	; 32
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	b4 01       	movw	r22, r8
    1678:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    167c:	da 94       	dec	r13
    167e:	dd 20       	and	r13, r13
    1680:	c1 f7       	brne	.-16     	; 0x1672 <vfprintf+0x32a>
    1682:	00 23       	and	r16, r16
    1684:	29 f0       	breq	.+10     	; 0x1690 <vfprintf+0x348>
    1686:	80 2f       	mov	r24, r16
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	b4 01       	movw	r22, r8
    168c:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    1690:	63 fc       	sbrc	r6, 3
    1692:	09 c0       	rjmp	.+18     	; 0x16a6 <vfprintf+0x35e>
    1694:	06 c0       	rjmp	.+12     	; 0x16a2 <vfprintf+0x35a>
    1696:	80 e3       	ldi	r24, 0x30	; 48
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	b4 01       	movw	r22, r8
    169c:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    16a0:	da 94       	dec	r13
    16a2:	dd 20       	and	r13, r13
    16a4:	c1 f7       	brne	.-16     	; 0x1696 <vfprintf+0x34e>
    16a6:	17 ff       	sbrs	r17, 7
    16a8:	48 c0       	rjmp	.+144    	; 0x173a <vfprintf+0x3f2>
    16aa:	85 01       	movw	r16, r10
    16ac:	b7 fe       	sbrs	r11, 7
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <vfprintf+0x36c>
    16b0:	00 e0       	ldi	r16, 0x00	; 0
    16b2:	10 e0       	ldi	r17, 0x00	; 0
    16b4:	66 24       	eor	r6, r6
    16b6:	77 24       	eor	r7, r7
    16b8:	95 01       	movw	r18, r10
    16ba:	2e 19       	sub	r18, r14
    16bc:	31 09       	sbc	r19, r1
    16be:	3b 8b       	std	Y+19, r19	; 0x13
    16c0:	2a 8b       	std	Y+18, r18	; 0x12
    16c2:	25 01       	movw	r4, r10
    16c4:	40 1a       	sub	r4, r16
    16c6:	51 0a       	sbc	r5, r17
    16c8:	42 0c       	add	r4, r2
    16ca:	53 1c       	adc	r5, r3
    16cc:	6f 2d       	mov	r22, r15
    16ce:	70 e0       	ldi	r23, 0x00	; 0
    16d0:	ee 24       	eor	r14, r14
    16d2:	ff 24       	eor	r15, r15
    16d4:	e6 1a       	sub	r14, r22
    16d6:	f7 0a       	sbc	r15, r23
    16d8:	3f ef       	ldi	r19, 0xFF	; 255
    16da:	0f 3f       	cpi	r16, 0xFF	; 255
    16dc:	13 07       	cpc	r17, r19
    16de:	29 f4       	brne	.+10     	; 0x16ea <vfprintf+0x3a2>
    16e0:	8e e2       	ldi	r24, 0x2E	; 46
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	b4 01       	movw	r22, r8
    16e6:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    16ea:	a0 16       	cp	r10, r16
    16ec:	b1 06       	cpc	r11, r17
    16ee:	54 f0       	brlt	.+20     	; 0x1704 <vfprintf+0x3bc>
    16f0:	2a 89       	ldd	r18, Y+18	; 0x12
    16f2:	3b 89       	ldd	r19, Y+19	; 0x13
    16f4:	20 17       	cp	r18, r16
    16f6:	31 07       	cpc	r19, r17
    16f8:	2c f4       	brge	.+10     	; 0x1704 <vfprintf+0x3bc>
    16fa:	f2 01       	movw	r30, r4
    16fc:	e6 0d       	add	r30, r6
    16fe:	f7 1d       	adc	r31, r7
    1700:	81 81       	ldd	r24, Z+1	; 0x01
    1702:	01 c0       	rjmp	.+2      	; 0x1706 <vfprintf+0x3be>
    1704:	80 e3       	ldi	r24, 0x30	; 48
    1706:	01 50       	subi	r16, 0x01	; 1
    1708:	10 40       	sbci	r17, 0x00	; 0
    170a:	08 94       	sec
    170c:	61 1c       	adc	r6, r1
    170e:	71 1c       	adc	r7, r1
    1710:	0e 15       	cp	r16, r14
    1712:	1f 05       	cpc	r17, r15
    1714:	2c f0       	brlt	.+10     	; 0x1720 <vfprintf+0x3d8>
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	b4 01       	movw	r22, r8
    171a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    171e:	dc cf       	rjmp	.-72     	; 0x16d8 <vfprintf+0x390>
    1720:	0a 15       	cp	r16, r10
    1722:	1b 05       	cpc	r17, r11
    1724:	41 f4       	brne	.+16     	; 0x1736 <vfprintf+0x3ee>
    1726:	9a 81       	ldd	r25, Y+2	; 0x02
    1728:	96 33       	cpi	r25, 0x36	; 54
    172a:	20 f4       	brcc	.+8      	; 0x1734 <vfprintf+0x3ec>
    172c:	95 33       	cpi	r25, 0x35	; 53
    172e:	19 f4       	brne	.+6      	; 0x1736 <vfprintf+0x3ee>
    1730:	38 89       	ldd	r19, Y+16	; 0x10
    1732:	34 ff       	sbrs	r19, 4
    1734:	81 e3       	ldi	r24, 0x31	; 49
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	49 c0       	rjmp	.+146    	; 0x17cc <vfprintf+0x484>
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	81 33       	cpi	r24, 0x31	; 49
    173e:	11 f0       	breq	.+4      	; 0x1744 <vfprintf+0x3fc>
    1740:	9f ee       	ldi	r25, 0xEF	; 239
    1742:	c9 22       	and	r12, r25
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	b4 01       	movw	r22, r8
    1748:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    174c:	ff 20       	and	r15, r15
    174e:	89 f0       	breq	.+34     	; 0x1772 <vfprintf+0x42a>
    1750:	8e e2       	ldi	r24, 0x2E	; 46
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	b4 01       	movw	r22, r8
    1756:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    175a:	12 e0       	ldi	r17, 0x02	; 2
    175c:	f1 01       	movw	r30, r2
    175e:	e1 0f       	add	r30, r17
    1760:	f1 1d       	adc	r31, r1
    1762:	1f 5f       	subi	r17, 0xFF	; 255
    1764:	80 81       	ld	r24, Z
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	b4 01       	movw	r22, r8
    176a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    176e:	fa 94       	dec	r15
    1770:	a9 f7       	brne	.-22     	; 0x175c <vfprintf+0x414>
    1772:	64 fe       	sbrs	r6, 4
    1774:	03 c0       	rjmp	.+6      	; 0x177c <vfprintf+0x434>
    1776:	85 e4       	ldi	r24, 0x45	; 69
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <vfprintf+0x438>
    177c:	85 e6       	ldi	r24, 0x65	; 101
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	b4 01       	movw	r22, r8
    1782:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    1786:	b7 fc       	sbrc	r11, 7
    1788:	05 c0       	rjmp	.+10     	; 0x1794 <vfprintf+0x44c>
    178a:	a1 14       	cp	r10, r1
    178c:	b1 04       	cpc	r11, r1
    178e:	41 f4       	brne	.+16     	; 0x17a0 <vfprintf+0x458>
    1790:	c4 fe       	sbrs	r12, 4
    1792:	06 c0       	rjmp	.+12     	; 0x17a0 <vfprintf+0x458>
    1794:	b0 94       	com	r11
    1796:	a1 94       	neg	r10
    1798:	b1 08       	sbc	r11, r1
    179a:	b3 94       	inc	r11
    179c:	8d e2       	ldi	r24, 0x2D	; 45
    179e:	01 c0       	rjmp	.+2      	; 0x17a2 <vfprintf+0x45a>
    17a0:	8b e2       	ldi	r24, 0x2B	; 43
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	b4 01       	movw	r22, r8
    17a6:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    17aa:	80 e3       	ldi	r24, 0x30	; 48
    17ac:	05 c0       	rjmp	.+10     	; 0x17b8 <vfprintf+0x470>
    17ae:	8f 5f       	subi	r24, 0xFF	; 255
    17b0:	e6 ef       	ldi	r30, 0xF6	; 246
    17b2:	ff ef       	ldi	r31, 0xFF	; 255
    17b4:	ae 0e       	add	r10, r30
    17b6:	bf 1e       	adc	r11, r31
    17b8:	fa e0       	ldi	r31, 0x0A	; 10
    17ba:	af 16       	cp	r10, r31
    17bc:	b1 04       	cpc	r11, r1
    17be:	bc f7       	brge	.-18     	; 0x17ae <vfprintf+0x466>
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	b4 01       	movw	r22, r8
    17c4:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    17c8:	c5 01       	movw	r24, r10
    17ca:	c0 96       	adiw	r24, 0x30	; 48
    17cc:	b4 01       	movw	r22, r8
    17ce:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    17d2:	4d c1       	rjmp	.+666    	; 0x1a6e <vfprintf+0x726>
    17d4:	83 36       	cpi	r24, 0x63	; 99
    17d6:	31 f0       	breq	.+12     	; 0x17e4 <vfprintf+0x49c>
    17d8:	83 37       	cpi	r24, 0x73	; 115
    17da:	89 f0       	breq	.+34     	; 0x17fe <vfprintf+0x4b6>
    17dc:	83 35       	cpi	r24, 0x53	; 83
    17de:	09 f0       	breq	.+2      	; 0x17e2 <vfprintf+0x49a>
    17e0:	59 c0       	rjmp	.+178    	; 0x1894 <vfprintf+0x54c>
    17e2:	22 c0       	rjmp	.+68     	; 0x1828 <vfprintf+0x4e0>
    17e4:	9a 01       	movw	r18, r20
    17e6:	2e 5f       	subi	r18, 0xFE	; 254
    17e8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ea:	3d 87       	std	Y+13, r19	; 0x0d
    17ec:	2c 87       	std	Y+12, r18	; 0x0c
    17ee:	fa 01       	movw	r30, r20
    17f0:	80 81       	ld	r24, Z
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	e8 2e       	mov	r14, r24
    17f8:	f1 2c       	mov	r15, r1
    17fa:	51 01       	movw	r10, r2
    17fc:	13 c0       	rjmp	.+38     	; 0x1824 <vfprintf+0x4dc>
    17fe:	9a 01       	movw	r18, r20
    1800:	2e 5f       	subi	r18, 0xFE	; 254
    1802:	3f 4f       	sbci	r19, 0xFF	; 255
    1804:	3d 87       	std	Y+13, r19	; 0x0d
    1806:	2c 87       	std	Y+12, r18	; 0x0c
    1808:	fa 01       	movw	r30, r20
    180a:	a0 80       	ld	r10, Z
    180c:	b1 80       	ldd	r11, Z+1	; 0x01
    180e:	16 ff       	sbrs	r17, 6
    1810:	03 c0       	rjmp	.+6      	; 0x1818 <vfprintf+0x4d0>
    1812:	6f 2d       	mov	r22, r15
    1814:	70 e0       	ldi	r23, 0x00	; 0
    1816:	02 c0       	rjmp	.+4      	; 0x181c <vfprintf+0x4d4>
    1818:	6f ef       	ldi	r22, 0xFF	; 255
    181a:	7f ef       	ldi	r23, 0xFF	; 255
    181c:	c5 01       	movw	r24, r10
    181e:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <strnlen>
    1822:	7c 01       	movw	r14, r24
    1824:	1f 77       	andi	r17, 0x7F	; 127
    1826:	14 c0       	rjmp	.+40     	; 0x1850 <vfprintf+0x508>
    1828:	9a 01       	movw	r18, r20
    182a:	2e 5f       	subi	r18, 0xFE	; 254
    182c:	3f 4f       	sbci	r19, 0xFF	; 255
    182e:	3d 87       	std	Y+13, r19	; 0x0d
    1830:	2c 87       	std	Y+12, r18	; 0x0c
    1832:	fa 01       	movw	r30, r20
    1834:	a0 80       	ld	r10, Z
    1836:	b1 80       	ldd	r11, Z+1	; 0x01
    1838:	16 ff       	sbrs	r17, 6
    183a:	03 c0       	rjmp	.+6      	; 0x1842 <vfprintf+0x4fa>
    183c:	6f 2d       	mov	r22, r15
    183e:	70 e0       	ldi	r23, 0x00	; 0
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <vfprintf+0x4fe>
    1842:	6f ef       	ldi	r22, 0xFF	; 255
    1844:	7f ef       	ldi	r23, 0xFF	; 255
    1846:	c5 01       	movw	r24, r10
    1848:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <strnlen_P>
    184c:	7c 01       	movw	r14, r24
    184e:	10 68       	ori	r17, 0x80	; 128
    1850:	13 fd       	sbrc	r17, 3
    1852:	1c c0       	rjmp	.+56     	; 0x188c <vfprintf+0x544>
    1854:	06 c0       	rjmp	.+12     	; 0x1862 <vfprintf+0x51a>
    1856:	80 e2       	ldi	r24, 0x20	; 32
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	b4 01       	movw	r22, r8
    185c:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    1860:	da 94       	dec	r13
    1862:	8d 2d       	mov	r24, r13
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	e8 16       	cp	r14, r24
    1868:	f9 06       	cpc	r15, r25
    186a:	a8 f3       	brcs	.-22     	; 0x1856 <vfprintf+0x50e>
    186c:	0f c0       	rjmp	.+30     	; 0x188c <vfprintf+0x544>
    186e:	f5 01       	movw	r30, r10
    1870:	17 fd       	sbrc	r17, 7
    1872:	85 91       	lpm	r24, Z+
    1874:	17 ff       	sbrs	r17, 7
    1876:	81 91       	ld	r24, Z+
    1878:	5f 01       	movw	r10, r30
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	b4 01       	movw	r22, r8
    187e:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    1882:	d1 10       	cpse	r13, r1
    1884:	da 94       	dec	r13
    1886:	08 94       	sec
    1888:	e1 08       	sbc	r14, r1
    188a:	f1 08       	sbc	r15, r1
    188c:	e1 14       	cp	r14, r1
    188e:	f1 04       	cpc	r15, r1
    1890:	71 f7       	brne	.-36     	; 0x186e <vfprintf+0x526>
    1892:	ed c0       	rjmp	.+474    	; 0x1a6e <vfprintf+0x726>
    1894:	84 36       	cpi	r24, 0x64	; 100
    1896:	11 f0       	breq	.+4      	; 0x189c <vfprintf+0x554>
    1898:	89 36       	cpi	r24, 0x69	; 105
    189a:	71 f5       	brne	.+92     	; 0x18f8 <vfprintf+0x5b0>
    189c:	9a 01       	movw	r18, r20
    189e:	17 ff       	sbrs	r17, 7
    18a0:	0a c0       	rjmp	.+20     	; 0x18b6 <vfprintf+0x56e>
    18a2:	2c 5f       	subi	r18, 0xFC	; 252
    18a4:	3f 4f       	sbci	r19, 0xFF	; 255
    18a6:	3d 87       	std	Y+13, r19	; 0x0d
    18a8:	2c 87       	std	Y+12, r18	; 0x0c
    18aa:	fa 01       	movw	r30, r20
    18ac:	80 81       	ld	r24, Z
    18ae:	91 81       	ldd	r25, Z+1	; 0x01
    18b0:	a2 81       	ldd	r26, Z+2	; 0x02
    18b2:	b3 81       	ldd	r27, Z+3	; 0x03
    18b4:	0b c0       	rjmp	.+22     	; 0x18cc <vfprintf+0x584>
    18b6:	2e 5f       	subi	r18, 0xFE	; 254
    18b8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ba:	3d 87       	std	Y+13, r19	; 0x0d
    18bc:	2c 87       	std	Y+12, r18	; 0x0c
    18be:	fa 01       	movw	r30, r20
    18c0:	80 81       	ld	r24, Z
    18c2:	91 81       	ldd	r25, Z+1	; 0x01
    18c4:	aa 27       	eor	r26, r26
    18c6:	97 fd       	sbrc	r25, 7
    18c8:	a0 95       	com	r26
    18ca:	ba 2f       	mov	r27, r26
    18cc:	01 2f       	mov	r16, r17
    18ce:	0f 76       	andi	r16, 0x6F	; 111
    18d0:	b7 ff       	sbrs	r27, 7
    18d2:	08 c0       	rjmp	.+16     	; 0x18e4 <vfprintf+0x59c>
    18d4:	b0 95       	com	r27
    18d6:	a0 95       	com	r26
    18d8:	90 95       	com	r25
    18da:	81 95       	neg	r24
    18dc:	9f 4f       	sbci	r25, 0xFF	; 255
    18de:	af 4f       	sbci	r26, 0xFF	; 255
    18e0:	bf 4f       	sbci	r27, 0xFF	; 255
    18e2:	00 68       	ori	r16, 0x80	; 128
    18e4:	bc 01       	movw	r22, r24
    18e6:	cd 01       	movw	r24, r26
    18e8:	a1 01       	movw	r20, r2
    18ea:	2a e0       	ldi	r18, 0x0A	; 10
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__ultoa_invert>
    18f2:	e8 2e       	mov	r14, r24
    18f4:	e2 18       	sub	r14, r2
    18f6:	41 c0       	rjmp	.+130    	; 0x197a <vfprintf+0x632>
    18f8:	85 37       	cpi	r24, 0x75	; 117
    18fa:	21 f4       	brne	.+8      	; 0x1904 <vfprintf+0x5bc>
    18fc:	1f 7e       	andi	r17, 0xEF	; 239
    18fe:	2a e0       	ldi	r18, 0x0A	; 10
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	20 c0       	rjmp	.+64     	; 0x1944 <vfprintf+0x5fc>
    1904:	19 7f       	andi	r17, 0xF9	; 249
    1906:	8f 36       	cpi	r24, 0x6F	; 111
    1908:	a9 f0       	breq	.+42     	; 0x1934 <vfprintf+0x5ec>
    190a:	80 37       	cpi	r24, 0x70	; 112
    190c:	20 f4       	brcc	.+8      	; 0x1916 <vfprintf+0x5ce>
    190e:	88 35       	cpi	r24, 0x58	; 88
    1910:	09 f0       	breq	.+2      	; 0x1914 <vfprintf+0x5cc>
    1912:	b0 c0       	rjmp	.+352    	; 0x1a74 <vfprintf+0x72c>
    1914:	0b c0       	rjmp	.+22     	; 0x192c <vfprintf+0x5e4>
    1916:	80 37       	cpi	r24, 0x70	; 112
    1918:	21 f0       	breq	.+8      	; 0x1922 <vfprintf+0x5da>
    191a:	88 37       	cpi	r24, 0x78	; 120
    191c:	09 f0       	breq	.+2      	; 0x1920 <vfprintf+0x5d8>
    191e:	aa c0       	rjmp	.+340    	; 0x1a74 <vfprintf+0x72c>
    1920:	01 c0       	rjmp	.+2      	; 0x1924 <vfprintf+0x5dc>
    1922:	10 61       	ori	r17, 0x10	; 16
    1924:	14 ff       	sbrs	r17, 4
    1926:	09 c0       	rjmp	.+18     	; 0x193a <vfprintf+0x5f2>
    1928:	14 60       	ori	r17, 0x04	; 4
    192a:	07 c0       	rjmp	.+14     	; 0x193a <vfprintf+0x5f2>
    192c:	14 ff       	sbrs	r17, 4
    192e:	08 c0       	rjmp	.+16     	; 0x1940 <vfprintf+0x5f8>
    1930:	16 60       	ori	r17, 0x06	; 6
    1932:	06 c0       	rjmp	.+12     	; 0x1940 <vfprintf+0x5f8>
    1934:	28 e0       	ldi	r18, 0x08	; 8
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	05 c0       	rjmp	.+10     	; 0x1944 <vfprintf+0x5fc>
    193a:	20 e1       	ldi	r18, 0x10	; 16
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <vfprintf+0x5fc>
    1940:	20 e1       	ldi	r18, 0x10	; 16
    1942:	32 e0       	ldi	r19, 0x02	; 2
    1944:	ca 01       	movw	r24, r20
    1946:	17 ff       	sbrs	r17, 7
    1948:	09 c0       	rjmp	.+18     	; 0x195c <vfprintf+0x614>
    194a:	04 96       	adiw	r24, 0x04	; 4
    194c:	9d 87       	std	Y+13, r25	; 0x0d
    194e:	8c 87       	std	Y+12, r24	; 0x0c
    1950:	fa 01       	movw	r30, r20
    1952:	60 81       	ld	r22, Z
    1954:	71 81       	ldd	r23, Z+1	; 0x01
    1956:	82 81       	ldd	r24, Z+2	; 0x02
    1958:	93 81       	ldd	r25, Z+3	; 0x03
    195a:	08 c0       	rjmp	.+16     	; 0x196c <vfprintf+0x624>
    195c:	02 96       	adiw	r24, 0x02	; 2
    195e:	9d 87       	std	Y+13, r25	; 0x0d
    1960:	8c 87       	std	Y+12, r24	; 0x0c
    1962:	fa 01       	movw	r30, r20
    1964:	60 81       	ld	r22, Z
    1966:	71 81       	ldd	r23, Z+1	; 0x01
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	a1 01       	movw	r20, r2
    196e:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__ultoa_invert>
    1972:	e8 2e       	mov	r14, r24
    1974:	e2 18       	sub	r14, r2
    1976:	01 2f       	mov	r16, r17
    1978:	0f 77       	andi	r16, 0x7F	; 127
    197a:	06 ff       	sbrs	r16, 6
    197c:	09 c0       	rjmp	.+18     	; 0x1990 <vfprintf+0x648>
    197e:	0e 7f       	andi	r16, 0xFE	; 254
    1980:	ef 14       	cp	r14, r15
    1982:	30 f4       	brcc	.+12     	; 0x1990 <vfprintf+0x648>
    1984:	04 ff       	sbrs	r16, 4
    1986:	06 c0       	rjmp	.+12     	; 0x1994 <vfprintf+0x64c>
    1988:	02 fd       	sbrc	r16, 2
    198a:	04 c0       	rjmp	.+8      	; 0x1994 <vfprintf+0x64c>
    198c:	0f 7e       	andi	r16, 0xEF	; 239
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <vfprintf+0x64c>
    1990:	1e 2d       	mov	r17, r14
    1992:	01 c0       	rjmp	.+2      	; 0x1996 <vfprintf+0x64e>
    1994:	1f 2d       	mov	r17, r15
    1996:	80 2f       	mov	r24, r16
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	04 ff       	sbrs	r16, 4
    199c:	0c c0       	rjmp	.+24     	; 0x19b6 <vfprintf+0x66e>
    199e:	fe 01       	movw	r30, r28
    19a0:	ee 0d       	add	r30, r14
    19a2:	f1 1d       	adc	r31, r1
    19a4:	20 81       	ld	r18, Z
    19a6:	20 33       	cpi	r18, 0x30	; 48
    19a8:	11 f4       	brne	.+4      	; 0x19ae <vfprintf+0x666>
    19aa:	09 7e       	andi	r16, 0xE9	; 233
    19ac:	09 c0       	rjmp	.+18     	; 0x19c0 <vfprintf+0x678>
    19ae:	02 ff       	sbrs	r16, 2
    19b0:	06 c0       	rjmp	.+12     	; 0x19be <vfprintf+0x676>
    19b2:	1e 5f       	subi	r17, 0xFE	; 254
    19b4:	05 c0       	rjmp	.+10     	; 0x19c0 <vfprintf+0x678>
    19b6:	86 78       	andi	r24, 0x86	; 134
    19b8:	90 70       	andi	r25, 0x00	; 0
    19ba:	00 97       	sbiw	r24, 0x00	; 0
    19bc:	09 f0       	breq	.+2      	; 0x19c0 <vfprintf+0x678>
    19be:	1f 5f       	subi	r17, 0xFF	; 255
    19c0:	a0 2e       	mov	r10, r16
    19c2:	bb 24       	eor	r11, r11
    19c4:	03 fd       	sbrc	r16, 3
    19c6:	12 c0       	rjmp	.+36     	; 0x19ec <vfprintf+0x6a4>
    19c8:	00 ff       	sbrs	r16, 0
    19ca:	0d c0       	rjmp	.+26     	; 0x19e6 <vfprintf+0x69e>
    19cc:	fe 2c       	mov	r15, r14
    19ce:	1d 15       	cp	r17, r13
    19d0:	50 f4       	brcc	.+20     	; 0x19e6 <vfprintf+0x69e>
    19d2:	fd 0c       	add	r15, r13
    19d4:	f1 1a       	sub	r15, r17
    19d6:	1d 2d       	mov	r17, r13
    19d8:	06 c0       	rjmp	.+12     	; 0x19e6 <vfprintf+0x69e>
    19da:	80 e2       	ldi	r24, 0x20	; 32
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	b4 01       	movw	r22, r8
    19e0:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    19e4:	1f 5f       	subi	r17, 0xFF	; 255
    19e6:	1d 15       	cp	r17, r13
    19e8:	c0 f3       	brcs	.-16     	; 0x19da <vfprintf+0x692>
    19ea:	04 c0       	rjmp	.+8      	; 0x19f4 <vfprintf+0x6ac>
    19ec:	1d 15       	cp	r17, r13
    19ee:	10 f4       	brcc	.+4      	; 0x19f4 <vfprintf+0x6ac>
    19f0:	d1 1a       	sub	r13, r17
    19f2:	01 c0       	rjmp	.+2      	; 0x19f6 <vfprintf+0x6ae>
    19f4:	dd 24       	eor	r13, r13
    19f6:	a4 fe       	sbrs	r10, 4
    19f8:	0f c0       	rjmp	.+30     	; 0x1a18 <vfprintf+0x6d0>
    19fa:	80 e3       	ldi	r24, 0x30	; 48
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	b4 01       	movw	r22, r8
    1a00:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    1a04:	a2 fe       	sbrs	r10, 2
    1a06:	1f c0       	rjmp	.+62     	; 0x1a46 <vfprintf+0x6fe>
    1a08:	a1 fe       	sbrs	r10, 1
    1a0a:	03 c0       	rjmp	.+6      	; 0x1a12 <vfprintf+0x6ca>
    1a0c:	88 e5       	ldi	r24, 0x58	; 88
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	10 c0       	rjmp	.+32     	; 0x1a32 <vfprintf+0x6ea>
    1a12:	88 e7       	ldi	r24, 0x78	; 120
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	0d c0       	rjmp	.+26     	; 0x1a32 <vfprintf+0x6ea>
    1a18:	c5 01       	movw	r24, r10
    1a1a:	86 78       	andi	r24, 0x86	; 134
    1a1c:	90 70       	andi	r25, 0x00	; 0
    1a1e:	00 97       	sbiw	r24, 0x00	; 0
    1a20:	91 f0       	breq	.+36     	; 0x1a46 <vfprintf+0x6fe>
    1a22:	a1 fc       	sbrc	r10, 1
    1a24:	02 c0       	rjmp	.+4      	; 0x1a2a <vfprintf+0x6e2>
    1a26:	80 e2       	ldi	r24, 0x20	; 32
    1a28:	01 c0       	rjmp	.+2      	; 0x1a2c <vfprintf+0x6e4>
    1a2a:	8b e2       	ldi	r24, 0x2B	; 43
    1a2c:	07 fd       	sbrc	r16, 7
    1a2e:	8d e2       	ldi	r24, 0x2D	; 45
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	b4 01       	movw	r22, r8
    1a34:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    1a38:	06 c0       	rjmp	.+12     	; 0x1a46 <vfprintf+0x6fe>
    1a3a:	80 e3       	ldi	r24, 0x30	; 48
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	b4 01       	movw	r22, r8
    1a40:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    1a44:	fa 94       	dec	r15
    1a46:	ef 14       	cp	r14, r15
    1a48:	c0 f3       	brcs	.-16     	; 0x1a3a <vfprintf+0x6f2>
    1a4a:	ea 94       	dec	r14
    1a4c:	f1 01       	movw	r30, r2
    1a4e:	ee 0d       	add	r30, r14
    1a50:	f1 1d       	adc	r31, r1
    1a52:	80 81       	ld	r24, Z
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	b4 01       	movw	r22, r8
    1a58:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    1a5c:	ee 20       	and	r14, r14
    1a5e:	a9 f7       	brne	.-22     	; 0x1a4a <vfprintf+0x702>
    1a60:	06 c0       	rjmp	.+12     	; 0x1a6e <vfprintf+0x726>
    1a62:	80 e2       	ldi	r24, 0x20	; 32
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	b4 01       	movw	r22, r8
    1a68:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    1a6c:	da 94       	dec	r13
    1a6e:	dd 20       	and	r13, r13
    1a70:	c1 f7       	brne	.-16     	; 0x1a62 <vfprintf+0x71a>
    1a72:	8e cc       	rjmp	.-1764   	; 0x1390 <vfprintf+0x48>
    1a74:	f4 01       	movw	r30, r8
    1a76:	86 81       	ldd	r24, Z+6	; 0x06
    1a78:	97 81       	ldd	r25, Z+7	; 0x07
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <vfprintf+0x738>
    1a7c:	8f ef       	ldi	r24, 0xFF	; 255
    1a7e:	9f ef       	ldi	r25, 0xFF	; 255
    1a80:	65 96       	adiw	r28, 0x15	; 21
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	de bf       	out	0x3e, r29	; 62
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	cd bf       	out	0x3d, r28	; 61
    1a8c:	df 91       	pop	r29
    1a8e:	cf 91       	pop	r28
    1a90:	1f 91       	pop	r17
    1a92:	0f 91       	pop	r16
    1a94:	ff 90       	pop	r15
    1a96:	ef 90       	pop	r14
    1a98:	df 90       	pop	r13
    1a9a:	cf 90       	pop	r12
    1a9c:	bf 90       	pop	r11
    1a9e:	af 90       	pop	r10
    1aa0:	9f 90       	pop	r9
    1aa2:	8f 90       	pop	r8
    1aa4:	7f 90       	pop	r7
    1aa6:	6f 90       	pop	r6
    1aa8:	5f 90       	pop	r5
    1aaa:	4f 90       	pop	r4
    1aac:	3f 90       	pop	r3
    1aae:	2f 90       	pop	r2
    1ab0:	08 95       	ret

00001ab2 <__cmpsf2>:
    1ab2:	d4 d0       	rcall	.+424    	; 0x1c5c <__fp_cmp>
    1ab4:	08 f4       	brcc	.+2      	; 0x1ab8 <__cmpsf2+0x6>
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	08 95       	ret

00001aba <__divsf3>:
    1aba:	0c d0       	rcall	.+24     	; 0x1ad4 <__divsf3x>
    1abc:	0a c1       	rjmp	.+532    	; 0x1cd2 <__fp_round>
    1abe:	02 d1       	rcall	.+516    	; 0x1cc4 <__fp_pscB>
    1ac0:	40 f0       	brcs	.+16     	; 0x1ad2 <__divsf3+0x18>
    1ac2:	f9 d0       	rcall	.+498    	; 0x1cb6 <__fp_pscA>
    1ac4:	30 f0       	brcs	.+12     	; 0x1ad2 <__divsf3+0x18>
    1ac6:	21 f4       	brne	.+8      	; 0x1ad0 <__divsf3+0x16>
    1ac8:	5f 3f       	cpi	r21, 0xFF	; 255
    1aca:	19 f0       	breq	.+6      	; 0x1ad2 <__divsf3+0x18>
    1acc:	eb c0       	rjmp	.+470    	; 0x1ca4 <__fp_inf>
    1ace:	51 11       	cpse	r21, r1
    1ad0:	34 c1       	rjmp	.+616    	; 0x1d3a <__fp_szero>
    1ad2:	ee c0       	rjmp	.+476    	; 0x1cb0 <__fp_nan>

00001ad4 <__divsf3x>:
    1ad4:	0f d1       	rcall	.+542    	; 0x1cf4 <__fp_split3>
    1ad6:	98 f3       	brcs	.-26     	; 0x1abe <__divsf3+0x4>

00001ad8 <__divsf3_pse>:
    1ad8:	99 23       	and	r25, r25
    1ada:	c9 f3       	breq	.-14     	; 0x1ace <__divsf3+0x14>
    1adc:	55 23       	and	r21, r21
    1ade:	b1 f3       	breq	.-20     	; 0x1acc <__divsf3+0x12>
    1ae0:	95 1b       	sub	r25, r21
    1ae2:	55 0b       	sbc	r21, r21
    1ae4:	bb 27       	eor	r27, r27
    1ae6:	aa 27       	eor	r26, r26
    1ae8:	62 17       	cp	r22, r18
    1aea:	73 07       	cpc	r23, r19
    1aec:	84 07       	cpc	r24, r20
    1aee:	38 f0       	brcs	.+14     	; 0x1afe <__divsf3_pse+0x26>
    1af0:	9f 5f       	subi	r25, 0xFF	; 255
    1af2:	5f 4f       	sbci	r21, 0xFF	; 255
    1af4:	22 0f       	add	r18, r18
    1af6:	33 1f       	adc	r19, r19
    1af8:	44 1f       	adc	r20, r20
    1afa:	aa 1f       	adc	r26, r26
    1afc:	a9 f3       	breq	.-22     	; 0x1ae8 <__divsf3_pse+0x10>
    1afe:	33 d0       	rcall	.+102    	; 0x1b66 <__divsf3_pse+0x8e>
    1b00:	0e 2e       	mov	r0, r30
    1b02:	3a f0       	brmi	.+14     	; 0x1b12 <__divsf3_pse+0x3a>
    1b04:	e0 e8       	ldi	r30, 0x80	; 128
    1b06:	30 d0       	rcall	.+96     	; 0x1b68 <__divsf3_pse+0x90>
    1b08:	91 50       	subi	r25, 0x01	; 1
    1b0a:	50 40       	sbci	r21, 0x00	; 0
    1b0c:	e6 95       	lsr	r30
    1b0e:	00 1c       	adc	r0, r0
    1b10:	ca f7       	brpl	.-14     	; 0x1b04 <__divsf3_pse+0x2c>
    1b12:	29 d0       	rcall	.+82     	; 0x1b66 <__divsf3_pse+0x8e>
    1b14:	fe 2f       	mov	r31, r30
    1b16:	27 d0       	rcall	.+78     	; 0x1b66 <__divsf3_pse+0x8e>
    1b18:	66 0f       	add	r22, r22
    1b1a:	77 1f       	adc	r23, r23
    1b1c:	88 1f       	adc	r24, r24
    1b1e:	bb 1f       	adc	r27, r27
    1b20:	26 17       	cp	r18, r22
    1b22:	37 07       	cpc	r19, r23
    1b24:	48 07       	cpc	r20, r24
    1b26:	ab 07       	cpc	r26, r27
    1b28:	b0 e8       	ldi	r27, 0x80	; 128
    1b2a:	09 f0       	breq	.+2      	; 0x1b2e <__divsf3_pse+0x56>
    1b2c:	bb 0b       	sbc	r27, r27
    1b2e:	80 2d       	mov	r24, r0
    1b30:	bf 01       	movw	r22, r30
    1b32:	ff 27       	eor	r31, r31
    1b34:	93 58       	subi	r25, 0x83	; 131
    1b36:	5f 4f       	sbci	r21, 0xFF	; 255
    1b38:	2a f0       	brmi	.+10     	; 0x1b44 <__divsf3_pse+0x6c>
    1b3a:	9e 3f       	cpi	r25, 0xFE	; 254
    1b3c:	51 05       	cpc	r21, r1
    1b3e:	68 f0       	brcs	.+26     	; 0x1b5a <__divsf3_pse+0x82>
    1b40:	b1 c0       	rjmp	.+354    	; 0x1ca4 <__fp_inf>
    1b42:	fb c0       	rjmp	.+502    	; 0x1d3a <__fp_szero>
    1b44:	5f 3f       	cpi	r21, 0xFF	; 255
    1b46:	ec f3       	brlt	.-6      	; 0x1b42 <__divsf3_pse+0x6a>
    1b48:	98 3e       	cpi	r25, 0xE8	; 232
    1b4a:	dc f3       	brlt	.-10     	; 0x1b42 <__divsf3_pse+0x6a>
    1b4c:	86 95       	lsr	r24
    1b4e:	77 95       	ror	r23
    1b50:	67 95       	ror	r22
    1b52:	b7 95       	ror	r27
    1b54:	f7 95       	ror	r31
    1b56:	9f 5f       	subi	r25, 0xFF	; 255
    1b58:	c9 f7       	brne	.-14     	; 0x1b4c <__divsf3_pse+0x74>
    1b5a:	88 0f       	add	r24, r24
    1b5c:	91 1d       	adc	r25, r1
    1b5e:	96 95       	lsr	r25
    1b60:	87 95       	ror	r24
    1b62:	97 f9       	bld	r25, 7
    1b64:	08 95       	ret
    1b66:	e1 e0       	ldi	r30, 0x01	; 1
    1b68:	66 0f       	add	r22, r22
    1b6a:	77 1f       	adc	r23, r23
    1b6c:	88 1f       	adc	r24, r24
    1b6e:	bb 1f       	adc	r27, r27
    1b70:	62 17       	cp	r22, r18
    1b72:	73 07       	cpc	r23, r19
    1b74:	84 07       	cpc	r24, r20
    1b76:	ba 07       	cpc	r27, r26
    1b78:	20 f0       	brcs	.+8      	; 0x1b82 <__divsf3_pse+0xaa>
    1b7a:	62 1b       	sub	r22, r18
    1b7c:	73 0b       	sbc	r23, r19
    1b7e:	84 0b       	sbc	r24, r20
    1b80:	ba 0b       	sbc	r27, r26
    1b82:	ee 1f       	adc	r30, r30
    1b84:	88 f7       	brcc	.-30     	; 0x1b68 <__divsf3_pse+0x90>
    1b86:	e0 95       	com	r30
    1b88:	08 95       	ret

00001b8a <__fixunssfsi>:
    1b8a:	bc d0       	rcall	.+376    	; 0x1d04 <__fp_splitA>
    1b8c:	88 f0       	brcs	.+34     	; 0x1bb0 <__fixunssfsi+0x26>
    1b8e:	9f 57       	subi	r25, 0x7F	; 127
    1b90:	90 f0       	brcs	.+36     	; 0x1bb6 <__fixunssfsi+0x2c>
    1b92:	b9 2f       	mov	r27, r25
    1b94:	99 27       	eor	r25, r25
    1b96:	b7 51       	subi	r27, 0x17	; 23
    1b98:	a0 f0       	brcs	.+40     	; 0x1bc2 <__fixunssfsi+0x38>
    1b9a:	d1 f0       	breq	.+52     	; 0x1bd0 <__fixunssfsi+0x46>
    1b9c:	66 0f       	add	r22, r22
    1b9e:	77 1f       	adc	r23, r23
    1ba0:	88 1f       	adc	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	1a f0       	brmi	.+6      	; 0x1bac <__fixunssfsi+0x22>
    1ba6:	ba 95       	dec	r27
    1ba8:	c9 f7       	brne	.-14     	; 0x1b9c <__fixunssfsi+0x12>
    1baa:	12 c0       	rjmp	.+36     	; 0x1bd0 <__fixunssfsi+0x46>
    1bac:	b1 30       	cpi	r27, 0x01	; 1
    1bae:	81 f0       	breq	.+32     	; 0x1bd0 <__fixunssfsi+0x46>
    1bb0:	c3 d0       	rcall	.+390    	; 0x1d38 <__fp_zero>
    1bb2:	b1 e0       	ldi	r27, 0x01	; 1
    1bb4:	08 95       	ret
    1bb6:	c0 c0       	rjmp	.+384    	; 0x1d38 <__fp_zero>
    1bb8:	67 2f       	mov	r22, r23
    1bba:	78 2f       	mov	r23, r24
    1bbc:	88 27       	eor	r24, r24
    1bbe:	b8 5f       	subi	r27, 0xF8	; 248
    1bc0:	39 f0       	breq	.+14     	; 0x1bd0 <__fixunssfsi+0x46>
    1bc2:	b9 3f       	cpi	r27, 0xF9	; 249
    1bc4:	cc f3       	brlt	.-14     	; 0x1bb8 <__fixunssfsi+0x2e>
    1bc6:	86 95       	lsr	r24
    1bc8:	77 95       	ror	r23
    1bca:	67 95       	ror	r22
    1bcc:	b3 95       	inc	r27
    1bce:	d9 f7       	brne	.-10     	; 0x1bc6 <__fixunssfsi+0x3c>
    1bd0:	3e f4       	brtc	.+14     	; 0x1be0 <__fixunssfsi+0x56>
    1bd2:	90 95       	com	r25
    1bd4:	80 95       	com	r24
    1bd6:	70 95       	com	r23
    1bd8:	61 95       	neg	r22
    1bda:	7f 4f       	sbci	r23, 0xFF	; 255
    1bdc:	8f 4f       	sbci	r24, 0xFF	; 255
    1bde:	9f 4f       	sbci	r25, 0xFF	; 255
    1be0:	08 95       	ret

00001be2 <__floatunsisf>:
    1be2:	e8 94       	clt
    1be4:	09 c0       	rjmp	.+18     	; 0x1bf8 <__floatsisf+0x12>

00001be6 <__floatsisf>:
    1be6:	97 fb       	bst	r25, 7
    1be8:	3e f4       	brtc	.+14     	; 0x1bf8 <__floatsisf+0x12>
    1bea:	90 95       	com	r25
    1bec:	80 95       	com	r24
    1bee:	70 95       	com	r23
    1bf0:	61 95       	neg	r22
    1bf2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf4:	8f 4f       	sbci	r24, 0xFF	; 255
    1bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf8:	99 23       	and	r25, r25
    1bfa:	a9 f0       	breq	.+42     	; 0x1c26 <__floatsisf+0x40>
    1bfc:	f9 2f       	mov	r31, r25
    1bfe:	96 e9       	ldi	r25, 0x96	; 150
    1c00:	bb 27       	eor	r27, r27
    1c02:	93 95       	inc	r25
    1c04:	f6 95       	lsr	r31
    1c06:	87 95       	ror	r24
    1c08:	77 95       	ror	r23
    1c0a:	67 95       	ror	r22
    1c0c:	b7 95       	ror	r27
    1c0e:	f1 11       	cpse	r31, r1
    1c10:	f8 cf       	rjmp	.-16     	; 0x1c02 <__floatsisf+0x1c>
    1c12:	fa f4       	brpl	.+62     	; 0x1c52 <__floatsisf+0x6c>
    1c14:	bb 0f       	add	r27, r27
    1c16:	11 f4       	brne	.+4      	; 0x1c1c <__floatsisf+0x36>
    1c18:	60 ff       	sbrs	r22, 0
    1c1a:	1b c0       	rjmp	.+54     	; 0x1c52 <__floatsisf+0x6c>
    1c1c:	6f 5f       	subi	r22, 0xFF	; 255
    1c1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c20:	8f 4f       	sbci	r24, 0xFF	; 255
    1c22:	9f 4f       	sbci	r25, 0xFF	; 255
    1c24:	16 c0       	rjmp	.+44     	; 0x1c52 <__floatsisf+0x6c>
    1c26:	88 23       	and	r24, r24
    1c28:	11 f0       	breq	.+4      	; 0x1c2e <__floatsisf+0x48>
    1c2a:	96 e9       	ldi	r25, 0x96	; 150
    1c2c:	11 c0       	rjmp	.+34     	; 0x1c50 <__floatsisf+0x6a>
    1c2e:	77 23       	and	r23, r23
    1c30:	21 f0       	breq	.+8      	; 0x1c3a <__floatsisf+0x54>
    1c32:	9e e8       	ldi	r25, 0x8E	; 142
    1c34:	87 2f       	mov	r24, r23
    1c36:	76 2f       	mov	r23, r22
    1c38:	05 c0       	rjmp	.+10     	; 0x1c44 <__floatsisf+0x5e>
    1c3a:	66 23       	and	r22, r22
    1c3c:	71 f0       	breq	.+28     	; 0x1c5a <__floatsisf+0x74>
    1c3e:	96 e8       	ldi	r25, 0x86	; 134
    1c40:	86 2f       	mov	r24, r22
    1c42:	70 e0       	ldi	r23, 0x00	; 0
    1c44:	60 e0       	ldi	r22, 0x00	; 0
    1c46:	2a f0       	brmi	.+10     	; 0x1c52 <__floatsisf+0x6c>
    1c48:	9a 95       	dec	r25
    1c4a:	66 0f       	add	r22, r22
    1c4c:	77 1f       	adc	r23, r23
    1c4e:	88 1f       	adc	r24, r24
    1c50:	da f7       	brpl	.-10     	; 0x1c48 <__floatsisf+0x62>
    1c52:	88 0f       	add	r24, r24
    1c54:	96 95       	lsr	r25
    1c56:	87 95       	ror	r24
    1c58:	97 f9       	bld	r25, 7
    1c5a:	08 95       	ret

00001c5c <__fp_cmp>:
    1c5c:	99 0f       	add	r25, r25
    1c5e:	00 08       	sbc	r0, r0
    1c60:	55 0f       	add	r21, r21
    1c62:	aa 0b       	sbc	r26, r26
    1c64:	e0 e8       	ldi	r30, 0x80	; 128
    1c66:	fe ef       	ldi	r31, 0xFE	; 254
    1c68:	16 16       	cp	r1, r22
    1c6a:	17 06       	cpc	r1, r23
    1c6c:	e8 07       	cpc	r30, r24
    1c6e:	f9 07       	cpc	r31, r25
    1c70:	c0 f0       	brcs	.+48     	; 0x1ca2 <__fp_cmp+0x46>
    1c72:	12 16       	cp	r1, r18
    1c74:	13 06       	cpc	r1, r19
    1c76:	e4 07       	cpc	r30, r20
    1c78:	f5 07       	cpc	r31, r21
    1c7a:	98 f0       	brcs	.+38     	; 0x1ca2 <__fp_cmp+0x46>
    1c7c:	62 1b       	sub	r22, r18
    1c7e:	73 0b       	sbc	r23, r19
    1c80:	84 0b       	sbc	r24, r20
    1c82:	95 0b       	sbc	r25, r21
    1c84:	39 f4       	brne	.+14     	; 0x1c94 <__fp_cmp+0x38>
    1c86:	0a 26       	eor	r0, r26
    1c88:	61 f0       	breq	.+24     	; 0x1ca2 <__fp_cmp+0x46>
    1c8a:	23 2b       	or	r18, r19
    1c8c:	24 2b       	or	r18, r20
    1c8e:	25 2b       	or	r18, r21
    1c90:	21 f4       	brne	.+8      	; 0x1c9a <__fp_cmp+0x3e>
    1c92:	08 95       	ret
    1c94:	0a 26       	eor	r0, r26
    1c96:	09 f4       	brne	.+2      	; 0x1c9a <__fp_cmp+0x3e>
    1c98:	a1 40       	sbci	r26, 0x01	; 1
    1c9a:	a6 95       	lsr	r26
    1c9c:	8f ef       	ldi	r24, 0xFF	; 255
    1c9e:	81 1d       	adc	r24, r1
    1ca0:	81 1d       	adc	r24, r1
    1ca2:	08 95       	ret

00001ca4 <__fp_inf>:
    1ca4:	97 f9       	bld	r25, 7
    1ca6:	9f 67       	ori	r25, 0x7F	; 127
    1ca8:	80 e8       	ldi	r24, 0x80	; 128
    1caa:	70 e0       	ldi	r23, 0x00	; 0
    1cac:	60 e0       	ldi	r22, 0x00	; 0
    1cae:	08 95       	ret

00001cb0 <__fp_nan>:
    1cb0:	9f ef       	ldi	r25, 0xFF	; 255
    1cb2:	80 ec       	ldi	r24, 0xC0	; 192
    1cb4:	08 95       	ret

00001cb6 <__fp_pscA>:
    1cb6:	00 24       	eor	r0, r0
    1cb8:	0a 94       	dec	r0
    1cba:	16 16       	cp	r1, r22
    1cbc:	17 06       	cpc	r1, r23
    1cbe:	18 06       	cpc	r1, r24
    1cc0:	09 06       	cpc	r0, r25
    1cc2:	08 95       	ret

00001cc4 <__fp_pscB>:
    1cc4:	00 24       	eor	r0, r0
    1cc6:	0a 94       	dec	r0
    1cc8:	12 16       	cp	r1, r18
    1cca:	13 06       	cpc	r1, r19
    1ccc:	14 06       	cpc	r1, r20
    1cce:	05 06       	cpc	r0, r21
    1cd0:	08 95       	ret

00001cd2 <__fp_round>:
    1cd2:	09 2e       	mov	r0, r25
    1cd4:	03 94       	inc	r0
    1cd6:	00 0c       	add	r0, r0
    1cd8:	11 f4       	brne	.+4      	; 0x1cde <__fp_round+0xc>
    1cda:	88 23       	and	r24, r24
    1cdc:	52 f0       	brmi	.+20     	; 0x1cf2 <__fp_round+0x20>
    1cde:	bb 0f       	add	r27, r27
    1ce0:	40 f4       	brcc	.+16     	; 0x1cf2 <__fp_round+0x20>
    1ce2:	bf 2b       	or	r27, r31
    1ce4:	11 f4       	brne	.+4      	; 0x1cea <__fp_round+0x18>
    1ce6:	60 ff       	sbrs	r22, 0
    1ce8:	04 c0       	rjmp	.+8      	; 0x1cf2 <__fp_round+0x20>
    1cea:	6f 5f       	subi	r22, 0xFF	; 255
    1cec:	7f 4f       	sbci	r23, 0xFF	; 255
    1cee:	8f 4f       	sbci	r24, 0xFF	; 255
    1cf0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf2:	08 95       	ret

00001cf4 <__fp_split3>:
    1cf4:	57 fd       	sbrc	r21, 7
    1cf6:	90 58       	subi	r25, 0x80	; 128
    1cf8:	44 0f       	add	r20, r20
    1cfa:	55 1f       	adc	r21, r21
    1cfc:	59 f0       	breq	.+22     	; 0x1d14 <__fp_splitA+0x10>
    1cfe:	5f 3f       	cpi	r21, 0xFF	; 255
    1d00:	71 f0       	breq	.+28     	; 0x1d1e <__fp_splitA+0x1a>
    1d02:	47 95       	ror	r20

00001d04 <__fp_splitA>:
    1d04:	88 0f       	add	r24, r24
    1d06:	97 fb       	bst	r25, 7
    1d08:	99 1f       	adc	r25, r25
    1d0a:	61 f0       	breq	.+24     	; 0x1d24 <__fp_splitA+0x20>
    1d0c:	9f 3f       	cpi	r25, 0xFF	; 255
    1d0e:	79 f0       	breq	.+30     	; 0x1d2e <__fp_splitA+0x2a>
    1d10:	87 95       	ror	r24
    1d12:	08 95       	ret
    1d14:	12 16       	cp	r1, r18
    1d16:	13 06       	cpc	r1, r19
    1d18:	14 06       	cpc	r1, r20
    1d1a:	55 1f       	adc	r21, r21
    1d1c:	f2 cf       	rjmp	.-28     	; 0x1d02 <__fp_split3+0xe>
    1d1e:	46 95       	lsr	r20
    1d20:	f1 df       	rcall	.-30     	; 0x1d04 <__fp_splitA>
    1d22:	08 c0       	rjmp	.+16     	; 0x1d34 <__fp_splitA+0x30>
    1d24:	16 16       	cp	r1, r22
    1d26:	17 06       	cpc	r1, r23
    1d28:	18 06       	cpc	r1, r24
    1d2a:	99 1f       	adc	r25, r25
    1d2c:	f1 cf       	rjmp	.-30     	; 0x1d10 <__fp_splitA+0xc>
    1d2e:	86 95       	lsr	r24
    1d30:	71 05       	cpc	r23, r1
    1d32:	61 05       	cpc	r22, r1
    1d34:	08 94       	sec
    1d36:	08 95       	ret

00001d38 <__fp_zero>:
    1d38:	e8 94       	clt

00001d3a <__fp_szero>:
    1d3a:	bb 27       	eor	r27, r27
    1d3c:	66 27       	eor	r22, r22
    1d3e:	77 27       	eor	r23, r23
    1d40:	cb 01       	movw	r24, r22
    1d42:	97 f9       	bld	r25, 7
    1d44:	08 95       	ret

00001d46 <__gesf2>:
    1d46:	8a df       	rcall	.-236    	; 0x1c5c <__fp_cmp>
    1d48:	08 f4       	brcc	.+2      	; 0x1d4c <__gesf2+0x6>
    1d4a:	8f ef       	ldi	r24, 0xFF	; 255
    1d4c:	08 95       	ret

00001d4e <__mulsf3>:
    1d4e:	0b d0       	rcall	.+22     	; 0x1d66 <__mulsf3x>
    1d50:	c0 cf       	rjmp	.-128    	; 0x1cd2 <__fp_round>
    1d52:	b1 df       	rcall	.-158    	; 0x1cb6 <__fp_pscA>
    1d54:	28 f0       	brcs	.+10     	; 0x1d60 <__mulsf3+0x12>
    1d56:	b6 df       	rcall	.-148    	; 0x1cc4 <__fp_pscB>
    1d58:	18 f0       	brcs	.+6      	; 0x1d60 <__mulsf3+0x12>
    1d5a:	95 23       	and	r25, r21
    1d5c:	09 f0       	breq	.+2      	; 0x1d60 <__mulsf3+0x12>
    1d5e:	a2 cf       	rjmp	.-188    	; 0x1ca4 <__fp_inf>
    1d60:	a7 cf       	rjmp	.-178    	; 0x1cb0 <__fp_nan>
    1d62:	11 24       	eor	r1, r1
    1d64:	ea cf       	rjmp	.-44     	; 0x1d3a <__fp_szero>

00001d66 <__mulsf3x>:
    1d66:	c6 df       	rcall	.-116    	; 0x1cf4 <__fp_split3>
    1d68:	a0 f3       	brcs	.-24     	; 0x1d52 <__mulsf3+0x4>

00001d6a <__mulsf3_pse>:
    1d6a:	95 9f       	mul	r25, r21
    1d6c:	d1 f3       	breq	.-12     	; 0x1d62 <__mulsf3+0x14>
    1d6e:	95 0f       	add	r25, r21
    1d70:	50 e0       	ldi	r21, 0x00	; 0
    1d72:	55 1f       	adc	r21, r21
    1d74:	62 9f       	mul	r22, r18
    1d76:	f0 01       	movw	r30, r0
    1d78:	72 9f       	mul	r23, r18
    1d7a:	bb 27       	eor	r27, r27
    1d7c:	f0 0d       	add	r31, r0
    1d7e:	b1 1d       	adc	r27, r1
    1d80:	63 9f       	mul	r22, r19
    1d82:	aa 27       	eor	r26, r26
    1d84:	f0 0d       	add	r31, r0
    1d86:	b1 1d       	adc	r27, r1
    1d88:	aa 1f       	adc	r26, r26
    1d8a:	64 9f       	mul	r22, r20
    1d8c:	66 27       	eor	r22, r22
    1d8e:	b0 0d       	add	r27, r0
    1d90:	a1 1d       	adc	r26, r1
    1d92:	66 1f       	adc	r22, r22
    1d94:	82 9f       	mul	r24, r18
    1d96:	22 27       	eor	r18, r18
    1d98:	b0 0d       	add	r27, r0
    1d9a:	a1 1d       	adc	r26, r1
    1d9c:	62 1f       	adc	r22, r18
    1d9e:	73 9f       	mul	r23, r19
    1da0:	b0 0d       	add	r27, r0
    1da2:	a1 1d       	adc	r26, r1
    1da4:	62 1f       	adc	r22, r18
    1da6:	83 9f       	mul	r24, r19
    1da8:	a0 0d       	add	r26, r0
    1daa:	61 1d       	adc	r22, r1
    1dac:	22 1f       	adc	r18, r18
    1dae:	74 9f       	mul	r23, r20
    1db0:	33 27       	eor	r19, r19
    1db2:	a0 0d       	add	r26, r0
    1db4:	61 1d       	adc	r22, r1
    1db6:	23 1f       	adc	r18, r19
    1db8:	84 9f       	mul	r24, r20
    1dba:	60 0d       	add	r22, r0
    1dbc:	21 1d       	adc	r18, r1
    1dbe:	82 2f       	mov	r24, r18
    1dc0:	76 2f       	mov	r23, r22
    1dc2:	6a 2f       	mov	r22, r26
    1dc4:	11 24       	eor	r1, r1
    1dc6:	9f 57       	subi	r25, 0x7F	; 127
    1dc8:	50 40       	sbci	r21, 0x00	; 0
    1dca:	8a f0       	brmi	.+34     	; 0x1dee <__mulsf3_pse+0x84>
    1dcc:	e1 f0       	breq	.+56     	; 0x1e06 <__mulsf3_pse+0x9c>
    1dce:	88 23       	and	r24, r24
    1dd0:	4a f0       	brmi	.+18     	; 0x1de4 <__mulsf3_pse+0x7a>
    1dd2:	ee 0f       	add	r30, r30
    1dd4:	ff 1f       	adc	r31, r31
    1dd6:	bb 1f       	adc	r27, r27
    1dd8:	66 1f       	adc	r22, r22
    1dda:	77 1f       	adc	r23, r23
    1ddc:	88 1f       	adc	r24, r24
    1dde:	91 50       	subi	r25, 0x01	; 1
    1de0:	50 40       	sbci	r21, 0x00	; 0
    1de2:	a9 f7       	brne	.-22     	; 0x1dce <__mulsf3_pse+0x64>
    1de4:	9e 3f       	cpi	r25, 0xFE	; 254
    1de6:	51 05       	cpc	r21, r1
    1de8:	70 f0       	brcs	.+28     	; 0x1e06 <__mulsf3_pse+0x9c>
    1dea:	5c cf       	rjmp	.-328    	; 0x1ca4 <__fp_inf>
    1dec:	a6 cf       	rjmp	.-180    	; 0x1d3a <__fp_szero>
    1dee:	5f 3f       	cpi	r21, 0xFF	; 255
    1df0:	ec f3       	brlt	.-6      	; 0x1dec <__mulsf3_pse+0x82>
    1df2:	98 3e       	cpi	r25, 0xE8	; 232
    1df4:	dc f3       	brlt	.-10     	; 0x1dec <__mulsf3_pse+0x82>
    1df6:	86 95       	lsr	r24
    1df8:	77 95       	ror	r23
    1dfa:	67 95       	ror	r22
    1dfc:	b7 95       	ror	r27
    1dfe:	f7 95       	ror	r31
    1e00:	e7 95       	ror	r30
    1e02:	9f 5f       	subi	r25, 0xFF	; 255
    1e04:	c1 f7       	brne	.-16     	; 0x1df6 <__mulsf3_pse+0x8c>
    1e06:	fe 2b       	or	r31, r30
    1e08:	88 0f       	add	r24, r24
    1e0a:	91 1d       	adc	r25, r1
    1e0c:	96 95       	lsr	r25
    1e0e:	87 95       	ror	r24
    1e10:	97 f9       	bld	r25, 7
    1e12:	08 95       	ret

00001e14 <__ftoa_engine>:
    1e14:	28 30       	cpi	r18, 0x08	; 8
    1e16:	08 f0       	brcs	.+2      	; 0x1e1a <__ftoa_engine+0x6>
    1e18:	27 e0       	ldi	r18, 0x07	; 7
    1e1a:	33 27       	eor	r19, r19
    1e1c:	da 01       	movw	r26, r20
    1e1e:	99 0f       	add	r25, r25
    1e20:	31 1d       	adc	r19, r1
    1e22:	87 fd       	sbrc	r24, 7
    1e24:	91 60       	ori	r25, 0x01	; 1
    1e26:	00 96       	adiw	r24, 0x00	; 0
    1e28:	61 05       	cpc	r22, r1
    1e2a:	71 05       	cpc	r23, r1
    1e2c:	39 f4       	brne	.+14     	; 0x1e3c <__ftoa_engine+0x28>
    1e2e:	32 60       	ori	r19, 0x02	; 2
    1e30:	2e 5f       	subi	r18, 0xFE	; 254
    1e32:	3d 93       	st	X+, r19
    1e34:	30 e3       	ldi	r19, 0x30	; 48
    1e36:	2a 95       	dec	r18
    1e38:	e1 f7       	brne	.-8      	; 0x1e32 <__ftoa_engine+0x1e>
    1e3a:	08 95       	ret
    1e3c:	9f 3f       	cpi	r25, 0xFF	; 255
    1e3e:	30 f0       	brcs	.+12     	; 0x1e4c <__ftoa_engine+0x38>
    1e40:	80 38       	cpi	r24, 0x80	; 128
    1e42:	71 05       	cpc	r23, r1
    1e44:	61 05       	cpc	r22, r1
    1e46:	09 f0       	breq	.+2      	; 0x1e4a <__ftoa_engine+0x36>
    1e48:	3c 5f       	subi	r19, 0xFC	; 252
    1e4a:	3c 5f       	subi	r19, 0xFC	; 252
    1e4c:	3d 93       	st	X+, r19
    1e4e:	91 30       	cpi	r25, 0x01	; 1
    1e50:	08 f0       	brcs	.+2      	; 0x1e54 <__ftoa_engine+0x40>
    1e52:	80 68       	ori	r24, 0x80	; 128
    1e54:	91 1d       	adc	r25, r1
    1e56:	df 93       	push	r29
    1e58:	cf 93       	push	r28
    1e5a:	1f 93       	push	r17
    1e5c:	0f 93       	push	r16
    1e5e:	ff 92       	push	r15
    1e60:	ef 92       	push	r14
    1e62:	19 2f       	mov	r17, r25
    1e64:	98 7f       	andi	r25, 0xF8	; 248
    1e66:	96 95       	lsr	r25
    1e68:	e9 2f       	mov	r30, r25
    1e6a:	96 95       	lsr	r25
    1e6c:	96 95       	lsr	r25
    1e6e:	e9 0f       	add	r30, r25
    1e70:	ff 27       	eor	r31, r31
    1e72:	e2 51       	subi	r30, 0x12	; 18
    1e74:	ff 4f       	sbci	r31, 0xFF	; 255
    1e76:	99 27       	eor	r25, r25
    1e78:	33 27       	eor	r19, r19
    1e7a:	ee 24       	eor	r14, r14
    1e7c:	ff 24       	eor	r15, r15
    1e7e:	a7 01       	movw	r20, r14
    1e80:	e7 01       	movw	r28, r14
    1e82:	05 90       	lpm	r0, Z+
    1e84:	08 94       	sec
    1e86:	07 94       	ror	r0
    1e88:	28 f4       	brcc	.+10     	; 0x1e94 <__ftoa_engine+0x80>
    1e8a:	36 0f       	add	r19, r22
    1e8c:	e7 1e       	adc	r14, r23
    1e8e:	f8 1e       	adc	r15, r24
    1e90:	49 1f       	adc	r20, r25
    1e92:	51 1d       	adc	r21, r1
    1e94:	66 0f       	add	r22, r22
    1e96:	77 1f       	adc	r23, r23
    1e98:	88 1f       	adc	r24, r24
    1e9a:	99 1f       	adc	r25, r25
    1e9c:	06 94       	lsr	r0
    1e9e:	a1 f7       	brne	.-24     	; 0x1e88 <__ftoa_engine+0x74>
    1ea0:	05 90       	lpm	r0, Z+
    1ea2:	07 94       	ror	r0
    1ea4:	28 f4       	brcc	.+10     	; 0x1eb0 <__ftoa_engine+0x9c>
    1ea6:	e7 0e       	add	r14, r23
    1ea8:	f8 1e       	adc	r15, r24
    1eaa:	49 1f       	adc	r20, r25
    1eac:	56 1f       	adc	r21, r22
    1eae:	c1 1d       	adc	r28, r1
    1eb0:	77 0f       	add	r23, r23
    1eb2:	88 1f       	adc	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	66 1f       	adc	r22, r22
    1eb8:	06 94       	lsr	r0
    1eba:	a1 f7       	brne	.-24     	; 0x1ea4 <__ftoa_engine+0x90>
    1ebc:	05 90       	lpm	r0, Z+
    1ebe:	07 94       	ror	r0
    1ec0:	28 f4       	brcc	.+10     	; 0x1ecc <__ftoa_engine+0xb8>
    1ec2:	f8 0e       	add	r15, r24
    1ec4:	49 1f       	adc	r20, r25
    1ec6:	56 1f       	adc	r21, r22
    1ec8:	c7 1f       	adc	r28, r23
    1eca:	d1 1d       	adc	r29, r1
    1ecc:	88 0f       	add	r24, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	66 1f       	adc	r22, r22
    1ed2:	77 1f       	adc	r23, r23
    1ed4:	06 94       	lsr	r0
    1ed6:	a1 f7       	brne	.-24     	; 0x1ec0 <__ftoa_engine+0xac>
    1ed8:	05 90       	lpm	r0, Z+
    1eda:	07 94       	ror	r0
    1edc:	20 f4       	brcc	.+8      	; 0x1ee6 <__ftoa_engine+0xd2>
    1ede:	49 0f       	add	r20, r25
    1ee0:	56 1f       	adc	r21, r22
    1ee2:	c7 1f       	adc	r28, r23
    1ee4:	d8 1f       	adc	r29, r24
    1ee6:	99 0f       	add	r25, r25
    1ee8:	66 1f       	adc	r22, r22
    1eea:	77 1f       	adc	r23, r23
    1eec:	88 1f       	adc	r24, r24
    1eee:	06 94       	lsr	r0
    1ef0:	a9 f7       	brne	.-22     	; 0x1edc <__ftoa_engine+0xc8>
    1ef2:	84 91       	lpm	r24, Z
    1ef4:	10 95       	com	r17
    1ef6:	17 70       	andi	r17, 0x07	; 7
    1ef8:	41 f0       	breq	.+16     	; 0x1f0a <__ftoa_engine+0xf6>
    1efa:	d6 95       	lsr	r29
    1efc:	c7 95       	ror	r28
    1efe:	57 95       	ror	r21
    1f00:	47 95       	ror	r20
    1f02:	f7 94       	ror	r15
    1f04:	e7 94       	ror	r14
    1f06:	1a 95       	dec	r17
    1f08:	c1 f7       	brne	.-16     	; 0x1efa <__ftoa_engine+0xe6>
    1f0a:	e4 e9       	ldi	r30, 0x94	; 148
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	68 94       	set
    1f10:	15 90       	lpm	r1, Z+
    1f12:	15 91       	lpm	r17, Z+
    1f14:	35 91       	lpm	r19, Z+
    1f16:	65 91       	lpm	r22, Z+
    1f18:	95 91       	lpm	r25, Z+
    1f1a:	05 90       	lpm	r0, Z+
    1f1c:	7f e2       	ldi	r23, 0x2F	; 47
    1f1e:	73 95       	inc	r23
    1f20:	e1 18       	sub	r14, r1
    1f22:	f1 0a       	sbc	r15, r17
    1f24:	43 0b       	sbc	r20, r19
    1f26:	56 0b       	sbc	r21, r22
    1f28:	c9 0b       	sbc	r28, r25
    1f2a:	d0 09       	sbc	r29, r0
    1f2c:	c0 f7       	brcc	.-16     	; 0x1f1e <__ftoa_engine+0x10a>
    1f2e:	e1 0c       	add	r14, r1
    1f30:	f1 1e       	adc	r15, r17
    1f32:	43 1f       	adc	r20, r19
    1f34:	56 1f       	adc	r21, r22
    1f36:	c9 1f       	adc	r28, r25
    1f38:	d0 1d       	adc	r29, r0
    1f3a:	7e f4       	brtc	.+30     	; 0x1f5a <__ftoa_engine+0x146>
    1f3c:	70 33       	cpi	r23, 0x30	; 48
    1f3e:	11 f4       	brne	.+4      	; 0x1f44 <__ftoa_engine+0x130>
    1f40:	8a 95       	dec	r24
    1f42:	e6 cf       	rjmp	.-52     	; 0x1f10 <__ftoa_engine+0xfc>
    1f44:	e8 94       	clt
    1f46:	01 50       	subi	r16, 0x01	; 1
    1f48:	30 f0       	brcs	.+12     	; 0x1f56 <__ftoa_engine+0x142>
    1f4a:	08 0f       	add	r16, r24
    1f4c:	0a f4       	brpl	.+2      	; 0x1f50 <__ftoa_engine+0x13c>
    1f4e:	00 27       	eor	r16, r16
    1f50:	02 17       	cp	r16, r18
    1f52:	08 f4       	brcc	.+2      	; 0x1f56 <__ftoa_engine+0x142>
    1f54:	20 2f       	mov	r18, r16
    1f56:	23 95       	inc	r18
    1f58:	02 2f       	mov	r16, r18
    1f5a:	7a 33       	cpi	r23, 0x3A	; 58
    1f5c:	28 f0       	brcs	.+10     	; 0x1f68 <__ftoa_engine+0x154>
    1f5e:	79 e3       	ldi	r23, 0x39	; 57
    1f60:	7d 93       	st	X+, r23
    1f62:	2a 95       	dec	r18
    1f64:	e9 f7       	brne	.-6      	; 0x1f60 <__ftoa_engine+0x14c>
    1f66:	10 c0       	rjmp	.+32     	; 0x1f88 <__ftoa_engine+0x174>
    1f68:	7d 93       	st	X+, r23
    1f6a:	2a 95       	dec	r18
    1f6c:	89 f6       	brne	.-94     	; 0x1f10 <__ftoa_engine+0xfc>
    1f6e:	06 94       	lsr	r0
    1f70:	97 95       	ror	r25
    1f72:	67 95       	ror	r22
    1f74:	37 95       	ror	r19
    1f76:	17 95       	ror	r17
    1f78:	17 94       	ror	r1
    1f7a:	e1 18       	sub	r14, r1
    1f7c:	f1 0a       	sbc	r15, r17
    1f7e:	43 0b       	sbc	r20, r19
    1f80:	56 0b       	sbc	r21, r22
    1f82:	c9 0b       	sbc	r28, r25
    1f84:	d0 09       	sbc	r29, r0
    1f86:	98 f0       	brcs	.+38     	; 0x1fae <__ftoa_engine+0x19a>
    1f88:	23 95       	inc	r18
    1f8a:	7e 91       	ld	r23, -X
    1f8c:	73 95       	inc	r23
    1f8e:	7a 33       	cpi	r23, 0x3A	; 58
    1f90:	08 f0       	brcs	.+2      	; 0x1f94 <__ftoa_engine+0x180>
    1f92:	70 e3       	ldi	r23, 0x30	; 48
    1f94:	7c 93       	st	X, r23
    1f96:	20 13       	cpse	r18, r16
    1f98:	b8 f7       	brcc	.-18     	; 0x1f88 <__ftoa_engine+0x174>
    1f9a:	7e 91       	ld	r23, -X
    1f9c:	70 61       	ori	r23, 0x10	; 16
    1f9e:	7d 93       	st	X+, r23
    1fa0:	30 f0       	brcs	.+12     	; 0x1fae <__ftoa_engine+0x19a>
    1fa2:	83 95       	inc	r24
    1fa4:	71 e3       	ldi	r23, 0x31	; 49
    1fa6:	7d 93       	st	X+, r23
    1fa8:	70 e3       	ldi	r23, 0x30	; 48
    1faa:	2a 95       	dec	r18
    1fac:	e1 f7       	brne	.-8      	; 0x1fa6 <__ftoa_engine+0x192>
    1fae:	11 24       	eor	r1, r1
    1fb0:	ef 90       	pop	r14
    1fb2:	ff 90       	pop	r15
    1fb4:	0f 91       	pop	r16
    1fb6:	1f 91       	pop	r17
    1fb8:	cf 91       	pop	r28
    1fba:	df 91       	pop	r29
    1fbc:	99 27       	eor	r25, r25
    1fbe:	87 fd       	sbrc	r24, 7
    1fc0:	90 95       	com	r25
    1fc2:	08 95       	ret

00001fc4 <strnlen_P>:
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	05 90       	lpm	r0, Z+
    1fc8:	61 50       	subi	r22, 0x01	; 1
    1fca:	70 40       	sbci	r23, 0x00	; 0
    1fcc:	01 10       	cpse	r0, r1
    1fce:	d8 f7       	brcc	.-10     	; 0x1fc6 <strnlen_P+0x2>
    1fd0:	80 95       	com	r24
    1fd2:	90 95       	com	r25
    1fd4:	8e 0f       	add	r24, r30
    1fd6:	9f 1f       	adc	r25, r31
    1fd8:	08 95       	ret

00001fda <strnlen>:
    1fda:	fc 01       	movw	r30, r24
    1fdc:	61 50       	subi	r22, 0x01	; 1
    1fde:	70 40       	sbci	r23, 0x00	; 0
    1fe0:	01 90       	ld	r0, Z+
    1fe2:	01 10       	cpse	r0, r1
    1fe4:	d8 f7       	brcc	.-10     	; 0x1fdc <strnlen+0x2>
    1fe6:	80 95       	com	r24
    1fe8:	90 95       	com	r25
    1fea:	8e 0f       	add	r24, r30
    1fec:	9f 1f       	adc	r25, r31
    1fee:	08 95       	ret

00001ff0 <fputc>:
    1ff0:	0f 93       	push	r16
    1ff2:	1f 93       	push	r17
    1ff4:	cf 93       	push	r28
    1ff6:	df 93       	push	r29
    1ff8:	8c 01       	movw	r16, r24
    1ffa:	eb 01       	movw	r28, r22
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	81 ff       	sbrs	r24, 1
    2000:	1b c0       	rjmp	.+54     	; 0x2038 <fputc+0x48>
    2002:	82 ff       	sbrs	r24, 2
    2004:	0d c0       	rjmp	.+26     	; 0x2020 <fputc+0x30>
    2006:	2e 81       	ldd	r18, Y+6	; 0x06
    2008:	3f 81       	ldd	r19, Y+7	; 0x07
    200a:	8c 81       	ldd	r24, Y+4	; 0x04
    200c:	9d 81       	ldd	r25, Y+5	; 0x05
    200e:	28 17       	cp	r18, r24
    2010:	39 07       	cpc	r19, r25
    2012:	64 f4       	brge	.+24     	; 0x202c <fputc+0x3c>
    2014:	e8 81       	ld	r30, Y
    2016:	f9 81       	ldd	r31, Y+1	; 0x01
    2018:	01 93       	st	Z+, r16
    201a:	f9 83       	std	Y+1, r31	; 0x01
    201c:	e8 83       	st	Y, r30
    201e:	06 c0       	rjmp	.+12     	; 0x202c <fputc+0x3c>
    2020:	e8 85       	ldd	r30, Y+8	; 0x08
    2022:	f9 85       	ldd	r31, Y+9	; 0x09
    2024:	80 2f       	mov	r24, r16
    2026:	09 95       	icall
    2028:	00 97       	sbiw	r24, 0x00	; 0
    202a:	31 f4       	brne	.+12     	; 0x2038 <fputc+0x48>
    202c:	8e 81       	ldd	r24, Y+6	; 0x06
    202e:	9f 81       	ldd	r25, Y+7	; 0x07
    2030:	01 96       	adiw	r24, 0x01	; 1
    2032:	9f 83       	std	Y+7, r25	; 0x07
    2034:	8e 83       	std	Y+6, r24	; 0x06
    2036:	02 c0       	rjmp	.+4      	; 0x203c <fputc+0x4c>
    2038:	0f ef       	ldi	r16, 0xFF	; 255
    203a:	1f ef       	ldi	r17, 0xFF	; 255
    203c:	c8 01       	movw	r24, r16
    203e:	df 91       	pop	r29
    2040:	cf 91       	pop	r28
    2042:	1f 91       	pop	r17
    2044:	0f 91       	pop	r16
    2046:	08 95       	ret

00002048 <sprintf>:
    2048:	0f 93       	push	r16
    204a:	1f 93       	push	r17
    204c:	cf 93       	push	r28
    204e:	df 93       	push	r29
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	2e 97       	sbiw	r28, 0x0e	; 14
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	de bf       	out	0x3e, r29	; 62
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	cd bf       	out	0x3d, r28	; 61
    2060:	0d 89       	ldd	r16, Y+21	; 0x15
    2062:	1e 89       	ldd	r17, Y+22	; 0x16
    2064:	86 e0       	ldi	r24, 0x06	; 6
    2066:	8c 83       	std	Y+4, r24	; 0x04
    2068:	1a 83       	std	Y+2, r17	; 0x02
    206a:	09 83       	std	Y+1, r16	; 0x01
    206c:	8f ef       	ldi	r24, 0xFF	; 255
    206e:	9f e7       	ldi	r25, 0x7F	; 127
    2070:	9e 83       	std	Y+6, r25	; 0x06
    2072:	8d 83       	std	Y+5, r24	; 0x05
    2074:	ae 01       	movw	r20, r28
    2076:	47 5e       	subi	r20, 0xE7	; 231
    2078:	5f 4f       	sbci	r21, 0xFF	; 255
    207a:	ce 01       	movw	r24, r28
    207c:	01 96       	adiw	r24, 0x01	; 1
    207e:	6f 89       	ldd	r22, Y+23	; 0x17
    2080:	78 8d       	ldd	r23, Y+24	; 0x18
    2082:	0e 94 a4 09 	call	0x1348	; 0x1348 <vfprintf>
    2086:	ef 81       	ldd	r30, Y+7	; 0x07
    2088:	f8 85       	ldd	r31, Y+8	; 0x08
    208a:	e0 0f       	add	r30, r16
    208c:	f1 1f       	adc	r31, r17
    208e:	10 82       	st	Z, r1
    2090:	2e 96       	adiw	r28, 0x0e	; 14
    2092:	0f b6       	in	r0, 0x3f	; 63
    2094:	f8 94       	cli
    2096:	de bf       	out	0x3e, r29	; 62
    2098:	0f be       	out	0x3f, r0	; 63
    209a:	cd bf       	out	0x3d, r28	; 61
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	1f 91       	pop	r17
    20a2:	0f 91       	pop	r16
    20a4:	08 95       	ret

000020a6 <__ultoa_invert>:
    20a6:	fa 01       	movw	r30, r20
    20a8:	aa 27       	eor	r26, r26
    20aa:	28 30       	cpi	r18, 0x08	; 8
    20ac:	51 f1       	breq	.+84     	; 0x2102 <__ultoa_invert+0x5c>
    20ae:	20 31       	cpi	r18, 0x10	; 16
    20b0:	81 f1       	breq	.+96     	; 0x2112 <__ultoa_invert+0x6c>
    20b2:	e8 94       	clt
    20b4:	6f 93       	push	r22
    20b6:	6e 7f       	andi	r22, 0xFE	; 254
    20b8:	6e 5f       	subi	r22, 0xFE	; 254
    20ba:	7f 4f       	sbci	r23, 0xFF	; 255
    20bc:	8f 4f       	sbci	r24, 0xFF	; 255
    20be:	9f 4f       	sbci	r25, 0xFF	; 255
    20c0:	af 4f       	sbci	r26, 0xFF	; 255
    20c2:	b1 e0       	ldi	r27, 0x01	; 1
    20c4:	3e d0       	rcall	.+124    	; 0x2142 <__ultoa_invert+0x9c>
    20c6:	b4 e0       	ldi	r27, 0x04	; 4
    20c8:	3c d0       	rcall	.+120    	; 0x2142 <__ultoa_invert+0x9c>
    20ca:	67 0f       	add	r22, r23
    20cc:	78 1f       	adc	r23, r24
    20ce:	89 1f       	adc	r24, r25
    20d0:	9a 1f       	adc	r25, r26
    20d2:	a1 1d       	adc	r26, r1
    20d4:	68 0f       	add	r22, r24
    20d6:	79 1f       	adc	r23, r25
    20d8:	8a 1f       	adc	r24, r26
    20da:	91 1d       	adc	r25, r1
    20dc:	a1 1d       	adc	r26, r1
    20de:	6a 0f       	add	r22, r26
    20e0:	71 1d       	adc	r23, r1
    20e2:	81 1d       	adc	r24, r1
    20e4:	91 1d       	adc	r25, r1
    20e6:	a1 1d       	adc	r26, r1
    20e8:	20 d0       	rcall	.+64     	; 0x212a <__ultoa_invert+0x84>
    20ea:	09 f4       	brne	.+2      	; 0x20ee <__ultoa_invert+0x48>
    20ec:	68 94       	set
    20ee:	3f 91       	pop	r19
    20f0:	2a e0       	ldi	r18, 0x0A	; 10
    20f2:	26 9f       	mul	r18, r22
    20f4:	11 24       	eor	r1, r1
    20f6:	30 19       	sub	r19, r0
    20f8:	30 5d       	subi	r19, 0xD0	; 208
    20fa:	31 93       	st	Z+, r19
    20fc:	de f6       	brtc	.-74     	; 0x20b4 <__ultoa_invert+0xe>
    20fe:	cf 01       	movw	r24, r30
    2100:	08 95       	ret
    2102:	46 2f       	mov	r20, r22
    2104:	47 70       	andi	r20, 0x07	; 7
    2106:	40 5d       	subi	r20, 0xD0	; 208
    2108:	41 93       	st	Z+, r20
    210a:	b3 e0       	ldi	r27, 0x03	; 3
    210c:	0f d0       	rcall	.+30     	; 0x212c <__ultoa_invert+0x86>
    210e:	c9 f7       	brne	.-14     	; 0x2102 <__ultoa_invert+0x5c>
    2110:	f6 cf       	rjmp	.-20     	; 0x20fe <__ultoa_invert+0x58>
    2112:	46 2f       	mov	r20, r22
    2114:	4f 70       	andi	r20, 0x0F	; 15
    2116:	40 5d       	subi	r20, 0xD0	; 208
    2118:	4a 33       	cpi	r20, 0x3A	; 58
    211a:	18 f0       	brcs	.+6      	; 0x2122 <__ultoa_invert+0x7c>
    211c:	49 5d       	subi	r20, 0xD9	; 217
    211e:	31 fd       	sbrc	r19, 1
    2120:	40 52       	subi	r20, 0x20	; 32
    2122:	41 93       	st	Z+, r20
    2124:	02 d0       	rcall	.+4      	; 0x212a <__ultoa_invert+0x84>
    2126:	a9 f7       	brne	.-22     	; 0x2112 <__ultoa_invert+0x6c>
    2128:	ea cf       	rjmp	.-44     	; 0x20fe <__ultoa_invert+0x58>
    212a:	b4 e0       	ldi	r27, 0x04	; 4
    212c:	a6 95       	lsr	r26
    212e:	97 95       	ror	r25
    2130:	87 95       	ror	r24
    2132:	77 95       	ror	r23
    2134:	67 95       	ror	r22
    2136:	ba 95       	dec	r27
    2138:	c9 f7       	brne	.-14     	; 0x212c <__ultoa_invert+0x86>
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	61 05       	cpc	r22, r1
    213e:	71 05       	cpc	r23, r1
    2140:	08 95       	ret
    2142:	9b 01       	movw	r18, r22
    2144:	ac 01       	movw	r20, r24
    2146:	0a 2e       	mov	r0, r26
    2148:	06 94       	lsr	r0
    214a:	57 95       	ror	r21
    214c:	47 95       	ror	r20
    214e:	37 95       	ror	r19
    2150:	27 95       	ror	r18
    2152:	ba 95       	dec	r27
    2154:	c9 f7       	brne	.-14     	; 0x2148 <__ultoa_invert+0xa2>
    2156:	62 0f       	add	r22, r18
    2158:	73 1f       	adc	r23, r19
    215a:	84 1f       	adc	r24, r20
    215c:	95 1f       	adc	r25, r21
    215e:	a0 1d       	adc	r26, r0
    2160:	08 95       	ret

00002162 <_exit>:
    2162:	f8 94       	cli

00002164 <__stop_program>:
    2164:	ff cf       	rjmp	.-2      	; 0x2164 <__stop_program>
