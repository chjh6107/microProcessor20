
lab6_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000001cc  00000240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000009a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003aa  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e3  00000000  00000000  00000dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000280  00000000  00000000  00000eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001138  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000094  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cb  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ec       	ldi	r30, 0xCC	; 204
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a4 e1       	ldi	r26, 0x14	; 20
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a4 31       	cpi	r26, 0x14	; 20
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  c8:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <main>:
#define MYUBRR (8000000 / 16 / 9600 - 1) //Fosc = 8MHz Baud = 9600

void USART_Init(unsigned int burr);
void USART_Transmit(unsigned char  *data);

int main(){
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
  d8:	66 97       	sbiw	r28, 0x16	; 22
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	f8 94       	cli
  de:	de bf       	out	0x3e, r29	; 62
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	cd bf       	out	0x3d, r28	; 61
	unsigned char str[20] = "1234567890 abc ";
  e4:	ce 01       	movw	r24, r28
  e6:	03 96       	adiw	r24, 0x03	; 3
  e8:	20 e0       	ldi	r18, 0x00	; 0
  ea:	31 e0       	ldi	r19, 0x01	; 1
  ec:	40 e1       	ldi	r20, 0x10	; 16
  ee:	f9 01       	movw	r30, r18
  f0:	00 80       	ld	r0, Z
  f2:	2f 5f       	subi	r18, 0xFF	; 255
  f4:	3f 4f       	sbci	r19, 0xFF	; 255
  f6:	fc 01       	movw	r30, r24
  f8:	00 82       	st	Z, r0
  fa:	01 96       	adiw	r24, 0x01	; 1
  fc:	41 50       	subi	r20, 0x01	; 1
  fe:	44 23       	and	r20, r20
 100:	b1 f7       	brne	.-20     	; 0xee <main+0x1e>
 102:	1b 8a       	std	Y+19, r1	; 0x13
 104:	1c 8a       	std	Y+20, r1	; 0x14
 106:	1d 8a       	std	Y+21, r1	; 0x15
 108:	1e 8a       	std	Y+22, r1	; 0x16

	USART_Init(MYUBRR);
 10a:	83 e3       	ldi	r24, 0x33	; 51
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 a4 00 	call	0x148	; 0x148 <USART_Init>

	for(int i = 0; i<20; i++)
 112:	1a 82       	std	Y+2, r1	; 0x02
 114:	19 82       	std	Y+1, r1	; 0x01
 116:	12 c0       	rjmp	.+36     	; 0x13c <main+0x6c>
		USART_Transmit(str[i]);
 118:	9e 01       	movw	r18, r28
 11a:	2d 5f       	subi	r18, 0xFD	; 253
 11c:	3f 4f       	sbci	r19, 0xFF	; 255
 11e:	89 81       	ldd	r24, Y+1	; 0x01
 120:	9a 81       	ldd	r25, Y+2	; 0x02
 122:	82 0f       	add	r24, r18
 124:	93 1f       	adc	r25, r19
 126:	fc 01       	movw	r30, r24
 128:	80 81       	ld	r24, Z
 12a:	88 2f       	mov	r24, r24
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 c7 00 	call	0x18e	; 0x18e <USART_Transmit>
int main(){
	unsigned char str[20] = "1234567890 abc ";

	USART_Init(MYUBRR);

	for(int i = 0; i<20; i++)
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	9a 81       	ldd	r25, Y+2	; 0x02
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	9a 83       	std	Y+2, r25	; 0x02
 13a:	89 83       	std	Y+1, r24	; 0x01
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	9a 81       	ldd	r25, Y+2	; 0x02
 140:	84 31       	cpi	r24, 0x14	; 20
 142:	91 05       	cpc	r25, r1
 144:	4c f3       	brlt	.-46     	; 0x118 <main+0x48>
		USART_Transmit(str[i]);
	while(1);
 146:	ff cf       	rjmp	.-2      	; 0x146 <main+0x76>

00000148 <USART_Init>:
}

void USART_Init(unsigned int ubrr){
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	00 d0       	rcall	.+0      	; 0x14e <USART_Init+0x6>
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
 152:	9a 83       	std	Y+2, r25	; 0x02
 154:	89 83       	std	Y+1, r24	; 0x01
	UBRR0H = 0; 
 156:	80 e9       	ldi	r24, 0x90	; 144
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	fc 01       	movw	r30, r24
 15c:	10 82       	st	Z, r1
	UBRR0L = (unsigned char)ubrr; //51
 15e:	89 e2       	ldi	r24, 0x29	; 41
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	29 81       	ldd	r18, Y+1	; 0x01
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18
	UCSR0A = 0x00;			
 168:	8b e2       	ldi	r24, 0x2B	; 43
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	fc 01       	movw	r30, r24
 16e:	10 82       	st	Z, r1
	UCSR0B = 0b00001000; 	//TXEN0 = 1 USART0 송신부 인에이블
 170:	8a e2       	ldi	r24, 0x2A	; 42
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	28 e0       	ldi	r18, 0x08	; 8
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18
	UCSR0C = 0b10000110;	//비동기, 패리티없음, 정지비트=1, 8비트
 17a:	85 e9       	ldi	r24, 0x95	; 149
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	26 e8       	ldi	r18, 0x86	; 134
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18
}
 184:	0f 90       	pop	r0
 186:	0f 90       	pop	r0
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <USART_Transmit>:

void USART_Transmit(unsigned char  *data){
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	00 d0       	rcall	.+0      	; 0x194 <USART_Transmit+0x6>
 194:	cd b7       	in	r28, 0x3d	; 61
 196:	de b7       	in	r29, 0x3e	; 62
 198:	9a 83       	std	Y+2, r25	; 0x02
 19a:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSR0A & (0b00100000))); //UDRE0=1?,전송데이터레지스터빔발생까지반복
 19c:	00 00       	nop
 19e:	8b e2       	ldi	r24, 0x2B	; 43
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	fc 01       	movw	r30, r24
 1a4:	80 81       	ld	r24, Z
 1a6:	88 2f       	mov	r24, r24
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	80 72       	andi	r24, 0x20	; 32
 1ac:	90 70       	andi	r25, 0x00	; 0
 1ae:	00 97       	sbiw	r24, 0x00	; 0
 1b0:	b1 f3       	breq	.-20     	; 0x19e <USART_Transmit+0x10>

	UDR0 = data; //데이터 송신
 1b2:	8c e2       	ldi	r24, 0x2C	; 44
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	29 81       	ldd	r18, Y+1	; 0x01
 1b8:	3a 81       	ldd	r19, Y+2	; 0x02
 1ba:	fc 01       	movw	r30, r24
 1bc:	20 83       	st	Z, r18
}
 1be:	0f 90       	pop	r0
 1c0:	0f 90       	pop	r0
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
