
lab4_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000178  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000178  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000020c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000960  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000033b  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ac  00000000  00000000  00000d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000026e  00000000  00000000  00000dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001038  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000075  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003b  00000000  00000000  000010e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e7       	ldi	r30, 0x78	; 120
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a2 30       	cpi	r26, 0x02	; 2
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  c8:	0c 94 ba 00 	jmp	0x174	; 0x174 <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>

int loop;

int main(void){
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
	DDRE = 0x04; //PE2 출력
  d8:	82 e2       	ldi	r24, 0x22	; 34
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	24 e0       	ldi	r18, 0x04	; 4
  de:	fc 01       	movw	r30, r24
  e0:	20 83       	st	Z, r18
	TCCR2 = 0b00011100; //CTC 모드, OC2 토글, 분주비 256
  e2:	85 e4       	ldi	r24, 0x45	; 69
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	2c e1       	ldi	r18, 0x1C	; 28
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
	OCR2 = 31; //클럭 31개 2s00번
  ec:	83 e4       	ldi	r24, 0x43	; 67
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	2f e1       	ldi	r18, 0x1F	; 31
  f2:	fc 01       	movw	r30, r24
  f4:	20 83       	st	Z, r18
				//반복하여 200msec가 나오도록 함
	TCNT2 = 0x00;
  f6:	84 e4       	ldi	r24, 0x44	; 68
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	fc 01       	movw	r30, r24
  fc:	10 82       	st	Z, r1
    PORTE = 0x04;
  fe:	83 e2       	ldi	r24, 0x23	; 35
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	24 e0       	ldi	r18, 0x04	; 4
 104:	fc 01       	movw	r30, r24
 106:	20 83       	st	Z, r18
	while(1){
		for(loop=1; loop<=200; loop++){ //31개 200번 반복 시 0.2초
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	90 93 01 01 	sts	0x0101, r25
 110:	80 93 00 01 	sts	0x0100, r24
 114:	1d c0       	rjmp	.+58     	; 0x150 <main+0x80>
			while(!(TIFR & 0x80));
 116:	00 00       	nop
 118:	86 e5       	ldi	r24, 0x56	; 86
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	fc 01       	movw	r30, r24
 11e:	80 81       	ld	r24, Z
 120:	88 23       	and	r24, r24
 122:	d4 f7       	brge	.-12     	; 0x118 <main+0x48>
			TIFR |= 0x80;
 124:	86 e5       	ldi	r24, 0x56	; 86
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	26 e5       	ldi	r18, 0x56	; 86
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	f9 01       	movw	r30, r18
 12e:	20 81       	ld	r18, Z
 130:	20 68       	ori	r18, 0x80	; 128
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
            TCNT2 = 0x00;
 136:	84 e4       	ldi	r24, 0x44	; 68
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	fc 01       	movw	r30, r24
 13c:	10 82       	st	Z, r1
	OCR2 = 31; //클럭 31개 2s00번
				//반복하여 200msec가 나오도록 함
	TCNT2 = 0x00;
    PORTE = 0x04;
	while(1){
		for(loop=1; loop<=200; loop++){ //31개 200번 반복 시 0.2초
 13e:	80 91 00 01 	lds	r24, 0x0100
 142:	90 91 01 01 	lds	r25, 0x0101
 146:	01 96       	adiw	r24, 0x01	; 1
 148:	90 93 01 01 	sts	0x0101, r25
 14c:	80 93 00 01 	sts	0x0100, r24
 150:	80 91 00 01 	lds	r24, 0x0100
 154:	90 91 01 01 	lds	r25, 0x0101
 158:	89 3c       	cpi	r24, 0xC9	; 201
 15a:	91 05       	cpc	r25, r1
 15c:	e4 f2       	brlt	.-72     	; 0x116 <main+0x46>
			while(!(TIFR & 0x80));
			TIFR |= 0x80;
            TCNT2 = 0x00;
		}
        PORTE ^= 0x04;
 15e:	83 e2       	ldi	r24, 0x23	; 35
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	23 e2       	ldi	r18, 0x23	; 35
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	f9 01       	movw	r30, r18
 168:	30 81       	ld	r19, Z
 16a:	24 e0       	ldi	r18, 0x04	; 4
 16c:	23 27       	eor	r18, r19
 16e:	fc 01       	movw	r30, r24
 170:	20 83       	st	Z, r18
	}	
 172:	ca cf       	rjmp	.-108    	; 0x108 <main+0x38>

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
