
lab4_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000200  00000294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000200  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000294  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  000009e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000035a  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ac  00000000  00000000  00000dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000275  00000000  00000000  00000e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000010e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000007c  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003b  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e0       	ldi	r30, 0x00	; 0
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a4 30       	cpi	r26, 0x04	; 4
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  c8:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <main>:



int loop1 =0, loop2 =0;

int main(void){
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
    DDRB = 0x01;
  d8:	87 e3       	ldi	r24, 0x37	; 55
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	fc 01       	movw	r30, r24
  e0:	20 83       	st	Z, r18
	DDRE = 0xff; //PE2 출력
  e2:	82 e2       	ldi	r24, 0x22	; 34
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
    TCCR0 = 0b00011110;
  ec:	83 e5       	ldi	r24, 0x53	; 83
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	2e e1       	ldi	r18, 0x1E	; 30
  f2:	fc 01       	movw	r30, r24
  f4:	20 83       	st	Z, r18
	TCCR2 = 0b00011100; //CTC 모드, OC2 토글, 분주비 256
  f6:	85 e4       	ldi	r24, 0x45	; 69
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	2c e1       	ldi	r18, 0x1C	; 28
  fc:	fc 01       	movw	r30, r24
  fe:	20 83       	st	Z, r18
    OCR0 = 31;
 100:	81 e5       	ldi	r24, 0x51	; 81
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	2f e1       	ldi	r18, 0x1F	; 31
 106:	fc 01       	movw	r30, r24
 108:	20 83       	st	Z, r18
	OCR2 = 31; //클럭 31개 2s00번
 10a:	83 e4       	ldi	r24, 0x43	; 67
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	2f e1       	ldi	r18, 0x1F	; 31
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18
				//반복하여 200msec가 나오도록 함
    TCNT0 = 0x00;            
 114:	82 e5       	ldi	r24, 0x52	; 82
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	fc 01       	movw	r30, r24
 11a:	10 82       	st	Z, r1
	TCNT2 = 0x00;
 11c:	84 e4       	ldi	r24, 0x44	; 68
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	fc 01       	movw	r30, r24
 122:	10 82       	st	Z, r1

    PORTB = 0x01;
 124:	88 e3       	ldi	r24, 0x38	; 56
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	21 e0       	ldi	r18, 0x01	; 1
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18
    PORTE = 0x04;
 12e:	83 e2       	ldi	r24, 0x23	; 35
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	24 e0       	ldi	r18, 0x04	; 4
 134:	fc 01       	movw	r30, r24
 136:	20 83       	st	Z, r18
 138:	01 c0       	rjmp	.+2      	; 0x13c <main+0x6c>
                loop1=0;
            }
            // TCNT2=0x00;
            TIFR |= 0x80;
        }
	}		
 13a:	00 00       	nop
		// 	while(!(TIFR & 0x02));
		// 	TIFR |= 0x02;
		// 	TCNT0 = 0x00; 
		// }
		// PORTB ^= 0x01;
        if(TIFR & 0x02){
 13c:	86 e5       	ldi	r24, 0x56	; 86
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	fc 01       	movw	r30, r24
 142:	80 81       	ld	r24, Z
 144:	88 2f       	mov	r24, r24
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	82 70       	andi	r24, 0x02	; 2
 14a:	90 70       	andi	r25, 0x00	; 0
 14c:	00 97       	sbiw	r24, 0x00	; 0
 14e:	41 f1       	breq	.+80     	; 0x1a0 <main+0xd0>
            loop2++;
 150:	80 91 02 01 	lds	r24, 0x0102
 154:	90 91 03 01 	lds	r25, 0x0103
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	90 93 03 01 	sts	0x0103, r25
 15e:	80 93 02 01 	sts	0x0102, r24
            if(loop2 == 100){
 162:	80 91 02 01 	lds	r24, 0x0102
 166:	90 91 03 01 	lds	r25, 0x0103
 16a:	84 36       	cpi	r24, 0x64	; 100
 16c:	91 05       	cpc	r25, r1
 16e:	71 f4       	brne	.+28     	; 0x18c <main+0xbc>
                PORTB ^= 0x01;
 170:	88 e3       	ldi	r24, 0x38	; 56
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	28 e3       	ldi	r18, 0x38	; 56
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	f9 01       	movw	r30, r18
 17a:	30 81       	ld	r19, Z
 17c:	21 e0       	ldi	r18, 0x01	; 1
 17e:	23 27       	eor	r18, r19
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18
                loop2=0;
 184:	10 92 03 01 	sts	0x0103, r1
 188:	10 92 02 01 	sts	0x0102, r1
            }
            // TCNT0=0x00;
            TIFR |= 0x02;
 18c:	86 e5       	ldi	r24, 0x56	; 86
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	26 e5       	ldi	r18, 0x56	; 86
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	f9 01       	movw	r30, r18
 196:	20 81       	ld	r18, Z
 198:	22 60       	ori	r18, 0x02	; 2
 19a:	fc 01       	movw	r30, r24
 19c:	20 83       	st	Z, r18
                loop1=0;
            }
            // TCNT2=0x00;
            TIFR |= 0x80;
        }
	}		
 19e:	cd cf       	rjmp	.-102    	; 0x13a <main+0x6a>
                PORTB ^= 0x01;
                loop2=0;
            }
            // TCNT0=0x00;
            TIFR |= 0x02;
        }else if(TIFR & 0x80){
 1a0:	86 e5       	ldi	r24, 0x56	; 86
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	fc 01       	movw	r30, r24
 1a6:	80 81       	ld	r24, Z
 1a8:	88 23       	and	r24, r24
 1aa:	3c f6       	brge	.-114    	; 0x13a <main+0x6a>
            loop1++;
 1ac:	80 91 00 01 	lds	r24, 0x0100
 1b0:	90 91 01 01 	lds	r25, 0x0101
 1b4:	01 96       	adiw	r24, 0x01	; 1
 1b6:	90 93 01 01 	sts	0x0101, r25
 1ba:	80 93 00 01 	sts	0x0100, r24
            if(loop1 == 200){
 1be:	80 91 00 01 	lds	r24, 0x0100
 1c2:	90 91 01 01 	lds	r25, 0x0101
 1c6:	88 3c       	cpi	r24, 0xC8	; 200
 1c8:	91 05       	cpc	r25, r1
 1ca:	71 f4       	brne	.+28     	; 0x1e8 <main+0x118>
                PORTE ^= 0x04;
 1cc:	83 e2       	ldi	r24, 0x23	; 35
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	23 e2       	ldi	r18, 0x23	; 35
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	f9 01       	movw	r30, r18
 1d6:	30 81       	ld	r19, Z
 1d8:	24 e0       	ldi	r18, 0x04	; 4
 1da:	23 27       	eor	r18, r19
 1dc:	fc 01       	movw	r30, r24
 1de:	20 83       	st	Z, r18
                loop1=0;
 1e0:	10 92 01 01 	sts	0x0101, r1
 1e4:	10 92 00 01 	sts	0x0100, r1
            }
            // TCNT2=0x00;
            TIFR |= 0x80;
 1e8:	86 e5       	ldi	r24, 0x56	; 86
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	26 e5       	ldi	r18, 0x56	; 86
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	f9 01       	movw	r30, r18
 1f2:	20 81       	ld	r18, Z
 1f4:	20 68       	ori	r18, 0x80	; 128
 1f6:	fc 01       	movw	r30, r24
 1f8:	20 83       	st	Z, r18
        }
	}		
 1fa:	9f cf       	rjmp	.-194    	; 0x13a <main+0x6a>

000001fc <_exit>:
 1fc:	f8 94       	cli

000001fe <__stop_program>:
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <__stop_program>
