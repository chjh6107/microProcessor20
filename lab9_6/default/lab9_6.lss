
lab9_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00001a34  00001ac8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800124  00800124  00001aec  2**0
                  ALLOC
  3 .stab         00003120  00000000  00000000  00001aec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008fe  00000000  00000000  00004c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00005510  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f39  00000000  00000000  000055f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000510  00000000  00000000  00006529  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a33  00000000  00000000  00006a39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002fc  00000000  00000000  0000746c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000322  00000000  00000000  00007768  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e56  00000000  00000000  00007a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000088e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__ctors_end>
       4:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
       8:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
       c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      10:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      14:	0c 94 4b 04 	jmp	0x896	; 0x896 <__vector_5>
      18:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      1c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      20:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      24:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      28:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      2c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      30:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      34:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      38:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      3c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      40:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      44:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      48:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      4c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      50:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      54:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      58:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      5c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      60:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      64:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      68:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      6c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      70:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      74:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      78:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      7c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      80:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      84:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      88:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>

0000008c <__c.1905>:
      8c:	6e 61 6e 00                                         nan.

00000090 <__c.1903>:
      90:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      a0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      b0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      c0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      d0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      e0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      f0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     100:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     110:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     120:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     130:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     140:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     150:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     160:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     170:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     180:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000018e <__ctors_end>:
     18e:	11 24       	eor	r1, r1
     190:	1f be       	out	0x3f, r1	; 63
     192:	cf ef       	ldi	r28, 0xFF	; 255
     194:	d0 e1       	ldi	r29, 0x10	; 16
     196:	de bf       	out	0x3e, r29	; 62
     198:	cd bf       	out	0x3d, r28	; 61

0000019a <__do_copy_data>:
     19a:	11 e0       	ldi	r17, 0x01	; 1
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	b1 e0       	ldi	r27, 0x01	; 1
     1a0:	e4 e3       	ldi	r30, 0x34	; 52
     1a2:	fa e1       	ldi	r31, 0x1A	; 26
     1a4:	00 e0       	ldi	r16, 0x00	; 0
     1a6:	0b bf       	out	0x3b, r16	; 59
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <__do_copy_data+0x14>
     1aa:	07 90       	elpm	r0, Z+
     1ac:	0d 92       	st	X+, r0
     1ae:	a4 32       	cpi	r26, 0x24	; 36
     1b0:	b1 07       	cpc	r27, r17
     1b2:	d9 f7       	brne	.-10     	; 0x1aa <__do_copy_data+0x10>
     1b4:	1b be       	out	0x3b, r1	; 59

000001b6 <__do_clear_bss>:
     1b6:	11 e0       	ldi	r17, 0x01	; 1
     1b8:	a4 e2       	ldi	r26, 0x24	; 36
     1ba:	b1 e0       	ldi	r27, 0x01	; 1
     1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <.do_clear_bss_start>

000001be <.do_clear_bss_loop>:
     1be:	1d 92       	st	X+, r1

000001c0 <.do_clear_bss_start>:
     1c0:	a8 32       	cpi	r26, 0x28	; 40
     1c2:	b1 07       	cpc	r27, r17
     1c4:	e1 f7       	brne	.-8      	; 0x1be <.do_clear_bss_loop>
     1c6:	0e 94 ae 05 	call	0xb5c	; 0xb5c <main>
     1ca:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <_exit>

000001ce <__bad_interrupt>:
     1ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001d2 <lcd_busy>:
	#define LCD_CS PORTB
	#define LCD_DATA PORTA
#endif

void lcd_busy(void)
{
     1d2:	0f 93       	push	r16
     1d4:	1f 93       	push	r17
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	cd b7       	in	r28, 0x3d	; 61
     1dc:	de b7       	in	r29, 0x3e	; 62
     1de:	2e 97       	sbiw	r28, 0x0e	; 14
     1e0:	0f b6       	in	r0, 0x3f	; 63
     1e2:	f8 94       	cli
     1e4:	de bf       	out	0x3e, r29	; 62
     1e6:	0f be       	out	0x3f, r0	; 63
     1e8:	cd bf       	out	0x3d, r28	; 61
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	a0 e2       	ldi	r26, 0x20	; 32
     1f0:	b1 e4       	ldi	r27, 0x41	; 65
     1f2:	89 83       	std	Y+1, r24	; 0x01
     1f4:	9a 83       	std	Y+2, r25	; 0x02
     1f6:	ab 83       	std	Y+3, r26	; 0x03
     1f8:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     1fa:	69 81       	ldd	r22, Y+1	; 0x01
     1fc:	7a 81       	ldd	r23, Y+2	; 0x02
     1fe:	8b 81       	ldd	r24, Y+3	; 0x03
     200:	9c 81       	ldd	r25, Y+4	; 0x04
     202:	20 e0       	ldi	r18, 0x00	; 0
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	4a ef       	ldi	r20, 0xFA	; 250
     208:	54 e4       	ldi	r21, 0x44	; 68
     20a:	0e 94 0e 0b 	call	0x161c	; 0x161c <__mulsf3>
     20e:	dc 01       	movw	r26, r24
     210:	cb 01       	movw	r24, r22
     212:	8d 83       	std	Y+5, r24	; 0x05
     214:	9e 83       	std	Y+6, r25	; 0x06
     216:	af 83       	std	Y+7, r26	; 0x07
     218:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     21a:	11 e0       	ldi	r17, 0x01	; 1
     21c:	6d 81       	ldd	r22, Y+5	; 0x05
     21e:	7e 81       	ldd	r23, Y+6	; 0x06
     220:	8f 81       	ldd	r24, Y+7	; 0x07
     222:	98 85       	ldd	r25, Y+8	; 0x08
     224:	20 e0       	ldi	r18, 0x00	; 0
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	40 e8       	ldi	r20, 0x80	; 128
     22a:	5f e3       	ldi	r21, 0x3F	; 63
     22c:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__cmpsf2>
     230:	88 23       	and	r24, r24
     232:	0c f0       	brlt	.+2      	; 0x236 <lcd_busy+0x64>
     234:	10 e0       	ldi	r17, 0x00	; 0
     236:	11 23       	and	r17, r17
     238:	29 f0       	breq	.+10     	; 0x244 <lcd_busy+0x72>
		__ticks = 1;
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	9a 87       	std	Y+10, r25	; 0x0a
     240:	89 87       	std	Y+9, r24	; 0x09
     242:	46 c0       	rjmp	.+140    	; 0x2d0 <lcd_busy+0xfe>
	else if (__tmp > 65535)
     244:	11 e0       	ldi	r17, 0x01	; 1
     246:	6d 81       	ldd	r22, Y+5	; 0x05
     248:	7e 81       	ldd	r23, Y+6	; 0x06
     24a:	8f 81       	ldd	r24, Y+7	; 0x07
     24c:	98 85       	ldd	r25, Y+8	; 0x08
     24e:	20 e0       	ldi	r18, 0x00	; 0
     250:	3f ef       	ldi	r19, 0xFF	; 255
     252:	4f e7       	ldi	r20, 0x7F	; 127
     254:	57 e4       	ldi	r21, 0x47	; 71
     256:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__gesf2>
     25a:	18 16       	cp	r1, r24
     25c:	0c f0       	brlt	.+2      	; 0x260 <lcd_busy+0x8e>
     25e:	10 e0       	ldi	r17, 0x00	; 0
     260:	11 23       	and	r17, r17
     262:	61 f1       	breq	.+88     	; 0x2bc <lcd_busy+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     264:	69 81       	ldd	r22, Y+1	; 0x01
     266:	7a 81       	ldd	r23, Y+2	; 0x02
     268:	8b 81       	ldd	r24, Y+3	; 0x03
     26a:	9c 81       	ldd	r25, Y+4	; 0x04
     26c:	20 e0       	ldi	r18, 0x00	; 0
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	40 e2       	ldi	r20, 0x20	; 32
     272:	51 e4       	ldi	r21, 0x41	; 65
     274:	0e 94 0e 0b 	call	0x161c	; 0x161c <__mulsf3>
     278:	dc 01       	movw	r26, r24
     27a:	cb 01       	movw	r24, r22
     27c:	bc 01       	movw	r22, r24
     27e:	cd 01       	movw	r24, r26
     280:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__fixunssfsi>
     284:	dc 01       	movw	r26, r24
     286:	cb 01       	movw	r24, r22
     288:	9a 87       	std	Y+10, r25	; 0x0a
     28a:	89 87       	std	Y+9, r24	; 0x09
     28c:	12 c0       	rjmp	.+36     	; 0x2b2 <lcd_busy+0xe0>
     28e:	88 ec       	ldi	r24, 0xC8	; 200
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	9c 87       	std	Y+12, r25	; 0x0c
     294:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     296:	8b 85       	ldd	r24, Y+11	; 0x0b
     298:	9c 85       	ldd	r25, Y+12	; 0x0c
     29a:	8c 01       	movw	r16, r24
     29c:	c8 01       	movw	r24, r16
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	f1 f7       	brne	.-4      	; 0x29e <lcd_busy+0xcc>
     2a2:	8c 01       	movw	r16, r24
     2a4:	1c 87       	std	Y+12, r17	; 0x0c
     2a6:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2a8:	89 85       	ldd	r24, Y+9	; 0x09
     2aa:	9a 85       	ldd	r25, Y+10	; 0x0a
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	9a 87       	std	Y+10, r25	; 0x0a
     2b0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2b2:	89 85       	ldd	r24, Y+9	; 0x09
     2b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     2b6:	00 97       	sbiw	r24, 0x00	; 0
     2b8:	51 f7       	brne	.-44     	; 0x28e <lcd_busy+0xbc>
     2ba:	17 c0       	rjmp	.+46     	; 0x2ea <lcd_busy+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2bc:	6d 81       	ldd	r22, Y+5	; 0x05
     2be:	7e 81       	ldd	r23, Y+6	; 0x06
     2c0:	8f 81       	ldd	r24, Y+7	; 0x07
     2c2:	98 85       	ldd	r25, Y+8	; 0x08
     2c4:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__fixunssfsi>
     2c8:	dc 01       	movw	r26, r24
     2ca:	cb 01       	movw	r24, r22
     2cc:	9a 87       	std	Y+10, r25	; 0x0a
     2ce:	89 87       	std	Y+9, r24	; 0x09
     2d0:	89 85       	ldd	r24, Y+9	; 0x09
     2d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     2d4:	9e 87       	std	Y+14, r25	; 0x0e
     2d6:	8d 87       	std	Y+13, r24	; 0x0d
     2d8:	8d 85       	ldd	r24, Y+13	; 0x0d
     2da:	9e 85       	ldd	r25, Y+14	; 0x0e
     2dc:	8c 01       	movw	r16, r24
     2de:	c8 01       	movw	r24, r16
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <lcd_busy+0x10e>
     2e4:	8c 01       	movw	r16, r24
     2e6:	1e 87       	std	Y+14, r17	; 0x0e
     2e8:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(10);	
}
     2ea:	2e 96       	adiw	r28, 0x0e	; 14
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	f8 94       	cli
     2f0:	de bf       	out	0x3e, r29	; 62
     2f2:	0f be       	out	0x3f, r0	; 63
     2f4:	cd bf       	out	0x3d, r28	; 61
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	1f 91       	pop	r17
     2fc:	0f 91       	pop	r16
     2fe:	08 95       	ret

00000300 <lcd_command>:

void lcd_command(unsigned char cmd)
{
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
     30c:	69 97       	sbiw	r28, 0x19	; 25
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	de bf       	out	0x3e, r29	; 62
     314:	0f be       	out	0x3f, r0	; 63
     316:	cd bf       	out	0x3d, r28	; 61
     318:	89 8f       	std	Y+25, r24	; 0x19
	lcd_busy();
     31a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_busy>
#if LCDtarget == easyTextLCD
	LCD_DATA = cmd;			// 포트 A에 명령어 출력
	LCD_CS = 0b00000001;	// RW=0, RS=0, E=1
	LCD_CS = 0b00000000;	// E=0
#else
	LCD_DATA = cmd;			// 포트 A에 명령어 출력
     31e:	8b e3       	ldi	r24, 0x3B	; 59
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	29 8d       	ldd	r18, Y+25	; 0x19
     324:	fc 01       	movw	r30, r24
     326:	20 83       	st	Z, r18
	LCD_CS = 0b00000100;	// RW=0, RS=0, E=1
     328:	88 e3       	ldi	r24, 0x38	; 56
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	24 e0       	ldi	r18, 0x04	; 4
     32e:	fc 01       	movw	r30, r24
     330:	20 83       	st	Z, r18
	LCD_CS = 0b00000000;	// E=0
     332:	88 e3       	ldi	r24, 0x38	; 56
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	fc 01       	movw	r30, r24
     338:	10 82       	st	Z, r1
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	a0 e8       	ldi	r26, 0x80	; 128
     340:	bf e3       	ldi	r27, 0x3F	; 63
     342:	89 83       	std	Y+1, r24	; 0x01
     344:	9a 83       	std	Y+2, r25	; 0x02
     346:	ab 83       	std	Y+3, r26	; 0x03
     348:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     34a:	69 81       	ldd	r22, Y+1	; 0x01
     34c:	7a 81       	ldd	r23, Y+2	; 0x02
     34e:	8b 81       	ldd	r24, Y+3	; 0x03
     350:	9c 81       	ldd	r25, Y+4	; 0x04
     352:	2b ea       	ldi	r18, 0xAB	; 171
     354:	3a ea       	ldi	r19, 0xAA	; 170
     356:	4a e2       	ldi	r20, 0x2A	; 42
     358:	50 e4       	ldi	r21, 0x40	; 64
     35a:	0e 94 0e 0b 	call	0x161c	; 0x161c <__mulsf3>
     35e:	dc 01       	movw	r26, r24
     360:	cb 01       	movw	r24, r22
     362:	8d 83       	std	Y+5, r24	; 0x05
     364:	9e 83       	std	Y+6, r25	; 0x06
     366:	af 83       	std	Y+7, r26	; 0x07
     368:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     36a:	11 e0       	ldi	r17, 0x01	; 1
     36c:	6d 81       	ldd	r22, Y+5	; 0x05
     36e:	7e 81       	ldd	r23, Y+6	; 0x06
     370:	8f 81       	ldd	r24, Y+7	; 0x07
     372:	98 85       	ldd	r25, Y+8	; 0x08
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	40 e8       	ldi	r20, 0x80	; 128
     37a:	5f e3       	ldi	r21, 0x3F	; 63
     37c:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__cmpsf2>
     380:	88 23       	and	r24, r24
     382:	0c f0       	brlt	.+2      	; 0x386 <lcd_command+0x86>
     384:	10 e0       	ldi	r17, 0x00	; 0
     386:	11 23       	and	r17, r17
     388:	19 f0       	breq	.+6      	; 0x390 <lcd_command+0x90>
		__ticks = 1;
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	89 87       	std	Y+9, r24	; 0x09
     38e:	a3 c0       	rjmp	.+326    	; 0x4d6 <lcd_command+0x1d6>
	else if (__tmp > 255)
     390:	11 e0       	ldi	r17, 0x01	; 1
     392:	6d 81       	ldd	r22, Y+5	; 0x05
     394:	7e 81       	ldd	r23, Y+6	; 0x06
     396:	8f 81       	ldd	r24, Y+7	; 0x07
     398:	98 85       	ldd	r25, Y+8	; 0x08
     39a:	20 e0       	ldi	r18, 0x00	; 0
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	4f e7       	ldi	r20, 0x7F	; 127
     3a0:	53 e4       	ldi	r21, 0x43	; 67
     3a2:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__gesf2>
     3a6:	18 16       	cp	r1, r24
     3a8:	0c f0       	brlt	.+2      	; 0x3ac <lcd_command+0xac>
     3aa:	10 e0       	ldi	r17, 0x00	; 0
     3ac:	11 23       	and	r17, r17
     3ae:	09 f4       	brne	.+2      	; 0x3b2 <lcd_command+0xb2>
     3b0:	89 c0       	rjmp	.+274    	; 0x4c4 <lcd_command+0x1c4>
	{
		_delay_ms(__us / 1000.0);
     3b2:	69 81       	ldd	r22, Y+1	; 0x01
     3b4:	7a 81       	ldd	r23, Y+2	; 0x02
     3b6:	8b 81       	ldd	r24, Y+3	; 0x03
     3b8:	9c 81       	ldd	r25, Y+4	; 0x04
     3ba:	20 e0       	ldi	r18, 0x00	; 0
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	4a e7       	ldi	r20, 0x7A	; 122
     3c0:	54 e4       	ldi	r21, 0x44	; 68
     3c2:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <__divsf3>
     3c6:	dc 01       	movw	r26, r24
     3c8:	cb 01       	movw	r24, r22
     3ca:	8a 87       	std	Y+10, r24	; 0x0a
     3cc:	9b 87       	std	Y+11, r25	; 0x0b
     3ce:	ac 87       	std	Y+12, r26	; 0x0c
     3d0:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     3d2:	6a 85       	ldd	r22, Y+10	; 0x0a
     3d4:	7b 85       	ldd	r23, Y+11	; 0x0b
     3d6:	8c 85       	ldd	r24, Y+12	; 0x0c
     3d8:	9d 85       	ldd	r25, Y+13	; 0x0d
     3da:	20 e0       	ldi	r18, 0x00	; 0
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	4a ef       	ldi	r20, 0xFA	; 250
     3e0:	54 e4       	ldi	r21, 0x44	; 68
     3e2:	0e 94 0e 0b 	call	0x161c	; 0x161c <__mulsf3>
     3e6:	dc 01       	movw	r26, r24
     3e8:	cb 01       	movw	r24, r22
     3ea:	8e 87       	std	Y+14, r24	; 0x0e
     3ec:	9f 87       	std	Y+15, r25	; 0x0f
     3ee:	a8 8b       	std	Y+16, r26	; 0x10
     3f0:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     3f2:	11 e0       	ldi	r17, 0x01	; 1
     3f4:	6e 85       	ldd	r22, Y+14	; 0x0e
     3f6:	7f 85       	ldd	r23, Y+15	; 0x0f
     3f8:	88 89       	ldd	r24, Y+16	; 0x10
     3fa:	99 89       	ldd	r25, Y+17	; 0x11
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	40 e8       	ldi	r20, 0x80	; 128
     402:	5f e3       	ldi	r21, 0x3F	; 63
     404:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__cmpsf2>
     408:	88 23       	and	r24, r24
     40a:	0c f0       	brlt	.+2      	; 0x40e <lcd_command+0x10e>
     40c:	10 e0       	ldi	r17, 0x00	; 0
     40e:	11 23       	and	r17, r17
     410:	29 f0       	breq	.+10     	; 0x41c <lcd_command+0x11c>
		__ticks = 1;
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	9b 8b       	std	Y+19, r25	; 0x13
     418:	8a 8b       	std	Y+18, r24	; 0x12
     41a:	46 c0       	rjmp	.+140    	; 0x4a8 <lcd_command+0x1a8>
	else if (__tmp > 65535)
     41c:	11 e0       	ldi	r17, 0x01	; 1
     41e:	6e 85       	ldd	r22, Y+14	; 0x0e
     420:	7f 85       	ldd	r23, Y+15	; 0x0f
     422:	88 89       	ldd	r24, Y+16	; 0x10
     424:	99 89       	ldd	r25, Y+17	; 0x11
     426:	20 e0       	ldi	r18, 0x00	; 0
     428:	3f ef       	ldi	r19, 0xFF	; 255
     42a:	4f e7       	ldi	r20, 0x7F	; 127
     42c:	57 e4       	ldi	r21, 0x47	; 71
     42e:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__gesf2>
     432:	18 16       	cp	r1, r24
     434:	0c f0       	brlt	.+2      	; 0x438 <lcd_command+0x138>
     436:	10 e0       	ldi	r17, 0x00	; 0
     438:	11 23       	and	r17, r17
     43a:	61 f1       	breq	.+88     	; 0x494 <lcd_command+0x194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     43c:	6a 85       	ldd	r22, Y+10	; 0x0a
     43e:	7b 85       	ldd	r23, Y+11	; 0x0b
     440:	8c 85       	ldd	r24, Y+12	; 0x0c
     442:	9d 85       	ldd	r25, Y+13	; 0x0d
     444:	20 e0       	ldi	r18, 0x00	; 0
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	40 e2       	ldi	r20, 0x20	; 32
     44a:	51 e4       	ldi	r21, 0x41	; 65
     44c:	0e 94 0e 0b 	call	0x161c	; 0x161c <__mulsf3>
     450:	dc 01       	movw	r26, r24
     452:	cb 01       	movw	r24, r22
     454:	bc 01       	movw	r22, r24
     456:	cd 01       	movw	r24, r26
     458:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__fixunssfsi>
     45c:	dc 01       	movw	r26, r24
     45e:	cb 01       	movw	r24, r22
     460:	9b 8b       	std	Y+19, r25	; 0x13
     462:	8a 8b       	std	Y+18, r24	; 0x12
     464:	12 c0       	rjmp	.+36     	; 0x48a <lcd_command+0x18a>
     466:	88 ec       	ldi	r24, 0xC8	; 200
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	9d 8b       	std	Y+21, r25	; 0x15
     46c:	8c 8b       	std	Y+20, r24	; 0x14
     46e:	8c 89       	ldd	r24, Y+20	; 0x14
     470:	9d 89       	ldd	r25, Y+21	; 0x15
     472:	8c 01       	movw	r16, r24
     474:	c8 01       	movw	r24, r16
     476:	01 97       	sbiw	r24, 0x01	; 1
     478:	f1 f7       	brne	.-4      	; 0x476 <lcd_command+0x176>
     47a:	8c 01       	movw	r16, r24
     47c:	1d 8b       	std	Y+21, r17	; 0x15
     47e:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     480:	8a 89       	ldd	r24, Y+18	; 0x12
     482:	9b 89       	ldd	r25, Y+19	; 0x13
     484:	01 97       	sbiw	r24, 0x01	; 1
     486:	9b 8b       	std	Y+19, r25	; 0x13
     488:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     48a:	8a 89       	ldd	r24, Y+18	; 0x12
     48c:	9b 89       	ldd	r25, Y+19	; 0x13
     48e:	00 97       	sbiw	r24, 0x00	; 0
     490:	51 f7       	brne	.-44     	; 0x466 <lcd_command+0x166>
     492:	28 c0       	rjmp	.+80     	; 0x4e4 <lcd_command+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     494:	6e 85       	ldd	r22, Y+14	; 0x0e
     496:	7f 85       	ldd	r23, Y+15	; 0x0f
     498:	88 89       	ldd	r24, Y+16	; 0x10
     49a:	99 89       	ldd	r25, Y+17	; 0x11
     49c:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__fixunssfsi>
     4a0:	dc 01       	movw	r26, r24
     4a2:	cb 01       	movw	r24, r22
     4a4:	9b 8b       	std	Y+19, r25	; 0x13
     4a6:	8a 8b       	std	Y+18, r24	; 0x12
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	9b 89       	ldd	r25, Y+19	; 0x13
     4ac:	9f 8b       	std	Y+23, r25	; 0x17
     4ae:	8e 8b       	std	Y+22, r24	; 0x16
     4b0:	8e 89       	ldd	r24, Y+22	; 0x16
     4b2:	9f 89       	ldd	r25, Y+23	; 0x17
     4b4:	8c 01       	movw	r16, r24
     4b6:	f8 01       	movw	r30, r16
     4b8:	31 97       	sbiw	r30, 0x01	; 1
     4ba:	f1 f7       	brne	.-4      	; 0x4b8 <lcd_command+0x1b8>
     4bc:	8f 01       	movw	r16, r30
     4be:	1f 8b       	std	Y+23, r17	; 0x17
     4c0:	0e 8b       	std	Y+22, r16	; 0x16
     4c2:	10 c0       	rjmp	.+32     	; 0x4e4 <lcd_command+0x1e4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     4c4:	6d 81       	ldd	r22, Y+5	; 0x05
     4c6:	7e 81       	ldd	r23, Y+6	; 0x06
     4c8:	8f 81       	ldd	r24, Y+7	; 0x07
     4ca:	98 85       	ldd	r25, Y+8	; 0x08
     4cc:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__fixunssfsi>
     4d0:	dc 01       	movw	r26, r24
     4d2:	cb 01       	movw	r24, r22
     4d4:	89 87       	std	Y+9, r24	; 0x09
     4d6:	89 85       	ldd	r24, Y+9	; 0x09
     4d8:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4da:	88 8d       	ldd	r24, Y+24	; 0x18
     4dc:	18 2f       	mov	r17, r24
     4de:	1a 95       	dec	r17
     4e0:	f1 f7       	brne	.-4      	; 0x4de <lcd_command+0x1de>
     4e2:	18 8f       	std	Y+24, r17	; 0x18
#endif
	_delay_us(1);	
}
     4e4:	69 96       	adiw	r28, 0x19	; 25
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	1f 91       	pop	r17
     4f6:	0f 91       	pop	r16
     4f8:	08 95       	ret

000004fa <lcd_init>:

void lcd_init()
{
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFF;
     502:	8a e3       	ldi	r24, 0x3A	; 58
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	2f ef       	ldi	r18, 0xFF	; 255
     508:	fc 01       	movw	r30, r24
     50a:	20 83       	st	Z, r18
	DDRB = 0xFF;
     50c:	87 e3       	ldi	r24, 0x37	; 55
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	2f ef       	ldi	r18, 0xFF	; 255
     512:	fc 01       	movw	r30, r24
     514:	20 83       	st	Z, r18

	lcd_command(0b00111000); // 8-bit mode, 2행
     516:	88 e3       	ldi	r24, 0x38	; 56
     518:	0e 94 80 01 	call	0x300	; 0x300 <lcd_command>
	lcd_command(0b00001000); // (문자표시, 커서표시, 블링크)? off 
     51c:	88 e0       	ldi	r24, 0x08	; 8
     51e:	0e 94 80 01 	call	0x300	; 0x300 <lcd_command>
	lcd_command(0b00000001); // clear
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	0e 94 80 01 	call	0x300	; 0x300 <lcd_command>
	lcd_command(0b00000110); // 커서 자동증가
     528:	86 e0       	ldi	r24, 0x06	; 6
     52a:	0e 94 80 01 	call	0x300	; 0x300 <lcd_command>
	lcd_command(0b00001111); // (문자표시, 커서표시, 블링크)? on 
     52e:	8f e0       	ldi	r24, 0x0F	; 15
     530:	0e 94 80 01 	call	0x300	; 0x300 <lcd_command>
}
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	08 95       	ret

0000053a <lcd_data>:

void lcd_data(unsigned char byte)
{
     53a:	0f 93       	push	r16
     53c:	1f 93       	push	r17
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
     546:	69 97       	sbiw	r28, 0x19	; 25
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	f8 94       	cli
     54c:	de bf       	out	0x3e, r29	; 62
     54e:	0f be       	out	0x3f, r0	; 63
     550:	cd bf       	out	0x3d, r28	; 61
     552:	89 8f       	std	Y+25, r24	; 0x19
	lcd_busy();
     554:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_busy>
#if Target == easyTextLCD
	LCD_DATA = byte;	// 포트 A에 명령어 출력
	LCD_CS = 0b00000011;	// RS=1, RW=0, E=1
	LCD_CS = 0b00000010;	// E=1
#else
	LCD_DATA = byte;	// 포트 A에 명령어 출력
     558:	8b e3       	ldi	r24, 0x3B	; 59
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	29 8d       	ldd	r18, Y+25	; 0x19
     55e:	fc 01       	movw	r30, r24
     560:	20 83       	st	Z, r18
	LCD_CS = 0b00000101;	// RS=1, RW=0, E=1
     562:	88 e3       	ldi	r24, 0x38	; 56
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	25 e0       	ldi	r18, 0x05	; 5
     568:	fc 01       	movw	r30, r24
     56a:	20 83       	st	Z, r18
	LCD_CS = 0b00000001;	// E=0
     56c:	88 e3       	ldi	r24, 0x38	; 56
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	21 e0       	ldi	r18, 0x01	; 1
     572:	fc 01       	movw	r30, r24
     574:	20 83       	st	Z, r18
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	a8 e4       	ldi	r26, 0x48	; 72
     57c:	b2 e4       	ldi	r27, 0x42	; 66
     57e:	89 83       	std	Y+1, r24	; 0x01
     580:	9a 83       	std	Y+2, r25	; 0x02
     582:	ab 83       	std	Y+3, r26	; 0x03
     584:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     586:	69 81       	ldd	r22, Y+1	; 0x01
     588:	7a 81       	ldd	r23, Y+2	; 0x02
     58a:	8b 81       	ldd	r24, Y+3	; 0x03
     58c:	9c 81       	ldd	r25, Y+4	; 0x04
     58e:	2b ea       	ldi	r18, 0xAB	; 171
     590:	3a ea       	ldi	r19, 0xAA	; 170
     592:	4a e2       	ldi	r20, 0x2A	; 42
     594:	50 e4       	ldi	r21, 0x40	; 64
     596:	0e 94 0e 0b 	call	0x161c	; 0x161c <__mulsf3>
     59a:	dc 01       	movw	r26, r24
     59c:	cb 01       	movw	r24, r22
     59e:	8d 83       	std	Y+5, r24	; 0x05
     5a0:	9e 83       	std	Y+6, r25	; 0x06
     5a2:	af 83       	std	Y+7, r26	; 0x07
     5a4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     5a6:	11 e0       	ldi	r17, 0x01	; 1
     5a8:	6d 81       	ldd	r22, Y+5	; 0x05
     5aa:	7e 81       	ldd	r23, Y+6	; 0x06
     5ac:	8f 81       	ldd	r24, Y+7	; 0x07
     5ae:	98 85       	ldd	r25, Y+8	; 0x08
     5b0:	20 e0       	ldi	r18, 0x00	; 0
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	40 e8       	ldi	r20, 0x80	; 128
     5b6:	5f e3       	ldi	r21, 0x3F	; 63
     5b8:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__cmpsf2>
     5bc:	88 23       	and	r24, r24
     5be:	0c f0       	brlt	.+2      	; 0x5c2 <lcd_data+0x88>
     5c0:	10 e0       	ldi	r17, 0x00	; 0
     5c2:	11 23       	and	r17, r17
     5c4:	19 f0       	breq	.+6      	; 0x5cc <lcd_data+0x92>
		__ticks = 1;
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	89 87       	std	Y+9, r24	; 0x09
     5ca:	a3 c0       	rjmp	.+326    	; 0x712 <lcd_data+0x1d8>
	else if (__tmp > 255)
     5cc:	11 e0       	ldi	r17, 0x01	; 1
     5ce:	6d 81       	ldd	r22, Y+5	; 0x05
     5d0:	7e 81       	ldd	r23, Y+6	; 0x06
     5d2:	8f 81       	ldd	r24, Y+7	; 0x07
     5d4:	98 85       	ldd	r25, Y+8	; 0x08
     5d6:	20 e0       	ldi	r18, 0x00	; 0
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	4f e7       	ldi	r20, 0x7F	; 127
     5dc:	53 e4       	ldi	r21, 0x43	; 67
     5de:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__gesf2>
     5e2:	18 16       	cp	r1, r24
     5e4:	0c f0       	brlt	.+2      	; 0x5e8 <lcd_data+0xae>
     5e6:	10 e0       	ldi	r17, 0x00	; 0
     5e8:	11 23       	and	r17, r17
     5ea:	09 f4       	brne	.+2      	; 0x5ee <lcd_data+0xb4>
     5ec:	89 c0       	rjmp	.+274    	; 0x700 <lcd_data+0x1c6>
	{
		_delay_ms(__us / 1000.0);
     5ee:	69 81       	ldd	r22, Y+1	; 0x01
     5f0:	7a 81       	ldd	r23, Y+2	; 0x02
     5f2:	8b 81       	ldd	r24, Y+3	; 0x03
     5f4:	9c 81       	ldd	r25, Y+4	; 0x04
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	4a e7       	ldi	r20, 0x7A	; 122
     5fc:	54 e4       	ldi	r21, 0x44	; 68
     5fe:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <__divsf3>
     602:	dc 01       	movw	r26, r24
     604:	cb 01       	movw	r24, r22
     606:	8a 87       	std	Y+10, r24	; 0x0a
     608:	9b 87       	std	Y+11, r25	; 0x0b
     60a:	ac 87       	std	Y+12, r26	; 0x0c
     60c:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     60e:	6a 85       	ldd	r22, Y+10	; 0x0a
     610:	7b 85       	ldd	r23, Y+11	; 0x0b
     612:	8c 85       	ldd	r24, Y+12	; 0x0c
     614:	9d 85       	ldd	r25, Y+13	; 0x0d
     616:	20 e0       	ldi	r18, 0x00	; 0
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	4a ef       	ldi	r20, 0xFA	; 250
     61c:	54 e4       	ldi	r21, 0x44	; 68
     61e:	0e 94 0e 0b 	call	0x161c	; 0x161c <__mulsf3>
     622:	dc 01       	movw	r26, r24
     624:	cb 01       	movw	r24, r22
     626:	8e 87       	std	Y+14, r24	; 0x0e
     628:	9f 87       	std	Y+15, r25	; 0x0f
     62a:	a8 8b       	std	Y+16, r26	; 0x10
     62c:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     62e:	11 e0       	ldi	r17, 0x01	; 1
     630:	6e 85       	ldd	r22, Y+14	; 0x0e
     632:	7f 85       	ldd	r23, Y+15	; 0x0f
     634:	88 89       	ldd	r24, Y+16	; 0x10
     636:	99 89       	ldd	r25, Y+17	; 0x11
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e8       	ldi	r20, 0x80	; 128
     63e:	5f e3       	ldi	r21, 0x3F	; 63
     640:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__cmpsf2>
     644:	88 23       	and	r24, r24
     646:	0c f0       	brlt	.+2      	; 0x64a <lcd_data+0x110>
     648:	10 e0       	ldi	r17, 0x00	; 0
     64a:	11 23       	and	r17, r17
     64c:	29 f0       	breq	.+10     	; 0x658 <lcd_data+0x11e>
		__ticks = 1;
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	9b 8b       	std	Y+19, r25	; 0x13
     654:	8a 8b       	std	Y+18, r24	; 0x12
     656:	46 c0       	rjmp	.+140    	; 0x6e4 <lcd_data+0x1aa>
	else if (__tmp > 65535)
     658:	11 e0       	ldi	r17, 0x01	; 1
     65a:	6e 85       	ldd	r22, Y+14	; 0x0e
     65c:	7f 85       	ldd	r23, Y+15	; 0x0f
     65e:	88 89       	ldd	r24, Y+16	; 0x10
     660:	99 89       	ldd	r25, Y+17	; 0x11
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	3f ef       	ldi	r19, 0xFF	; 255
     666:	4f e7       	ldi	r20, 0x7F	; 127
     668:	57 e4       	ldi	r21, 0x47	; 71
     66a:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__gesf2>
     66e:	18 16       	cp	r1, r24
     670:	0c f0       	brlt	.+2      	; 0x674 <lcd_data+0x13a>
     672:	10 e0       	ldi	r17, 0x00	; 0
     674:	11 23       	and	r17, r17
     676:	61 f1       	breq	.+88     	; 0x6d0 <lcd_data+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     678:	6a 85       	ldd	r22, Y+10	; 0x0a
     67a:	7b 85       	ldd	r23, Y+11	; 0x0b
     67c:	8c 85       	ldd	r24, Y+12	; 0x0c
     67e:	9d 85       	ldd	r25, Y+13	; 0x0d
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	40 e2       	ldi	r20, 0x20	; 32
     686:	51 e4       	ldi	r21, 0x41	; 65
     688:	0e 94 0e 0b 	call	0x161c	; 0x161c <__mulsf3>
     68c:	dc 01       	movw	r26, r24
     68e:	cb 01       	movw	r24, r22
     690:	bc 01       	movw	r22, r24
     692:	cd 01       	movw	r24, r26
     694:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__fixunssfsi>
     698:	dc 01       	movw	r26, r24
     69a:	cb 01       	movw	r24, r22
     69c:	9b 8b       	std	Y+19, r25	; 0x13
     69e:	8a 8b       	std	Y+18, r24	; 0x12
     6a0:	12 c0       	rjmp	.+36     	; 0x6c6 <lcd_data+0x18c>
     6a2:	88 ec       	ldi	r24, 0xC8	; 200
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	9d 8b       	std	Y+21, r25	; 0x15
     6a8:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6aa:	8c 89       	ldd	r24, Y+20	; 0x14
     6ac:	9d 89       	ldd	r25, Y+21	; 0x15
     6ae:	8c 01       	movw	r16, r24
     6b0:	c8 01       	movw	r24, r16
     6b2:	01 97       	sbiw	r24, 0x01	; 1
     6b4:	f1 f7       	brne	.-4      	; 0x6b2 <lcd_data+0x178>
     6b6:	8c 01       	movw	r16, r24
     6b8:	1d 8b       	std	Y+21, r17	; 0x15
     6ba:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6bc:	8a 89       	ldd	r24, Y+18	; 0x12
     6be:	9b 89       	ldd	r25, Y+19	; 0x13
     6c0:	01 97       	sbiw	r24, 0x01	; 1
     6c2:	9b 8b       	std	Y+19, r25	; 0x13
     6c4:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6c6:	8a 89       	ldd	r24, Y+18	; 0x12
     6c8:	9b 89       	ldd	r25, Y+19	; 0x13
     6ca:	00 97       	sbiw	r24, 0x00	; 0
     6cc:	51 f7       	brne	.-44     	; 0x6a2 <lcd_data+0x168>
     6ce:	28 c0       	rjmp	.+80     	; 0x720 <lcd_data+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6d0:	6e 85       	ldd	r22, Y+14	; 0x0e
     6d2:	7f 85       	ldd	r23, Y+15	; 0x0f
     6d4:	88 89       	ldd	r24, Y+16	; 0x10
     6d6:	99 89       	ldd	r25, Y+17	; 0x11
     6d8:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__fixunssfsi>
     6dc:	dc 01       	movw	r26, r24
     6de:	cb 01       	movw	r24, r22
     6e0:	9b 8b       	std	Y+19, r25	; 0x13
     6e2:	8a 8b       	std	Y+18, r24	; 0x12
     6e4:	8a 89       	ldd	r24, Y+18	; 0x12
     6e6:	9b 89       	ldd	r25, Y+19	; 0x13
     6e8:	9f 8b       	std	Y+23, r25	; 0x17
     6ea:	8e 8b       	std	Y+22, r24	; 0x16
     6ec:	8e 89       	ldd	r24, Y+22	; 0x16
     6ee:	9f 89       	ldd	r25, Y+23	; 0x17
     6f0:	8c 01       	movw	r16, r24
     6f2:	f8 01       	movw	r30, r16
     6f4:	31 97       	sbiw	r30, 0x01	; 1
     6f6:	f1 f7       	brne	.-4      	; 0x6f4 <lcd_data+0x1ba>
     6f8:	8f 01       	movw	r16, r30
     6fa:	1f 8b       	std	Y+23, r17	; 0x17
     6fc:	0e 8b       	std	Y+22, r16	; 0x16
     6fe:	10 c0       	rjmp	.+32     	; 0x720 <lcd_data+0x1e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     700:	6d 81       	ldd	r22, Y+5	; 0x05
     702:	7e 81       	ldd	r23, Y+6	; 0x06
     704:	8f 81       	ldd	r24, Y+7	; 0x07
     706:	98 85       	ldd	r25, Y+8	; 0x08
     708:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__fixunssfsi>
     70c:	dc 01       	movw	r26, r24
     70e:	cb 01       	movw	r24, r22
     710:	89 87       	std	Y+9, r24	; 0x09
     712:	89 85       	ldd	r24, Y+9	; 0x09
     714:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     716:	88 8d       	ldd	r24, Y+24	; 0x18
     718:	18 2f       	mov	r17, r24
     71a:	1a 95       	dec	r17
     71c:	f1 f7       	brne	.-4      	; 0x71a <lcd_data+0x1e0>
     71e:	18 8f       	std	Y+24, r17	; 0x18
#endif
	_delay_us(50);	
}
     720:	69 96       	adiw	r28, 0x19	; 25
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	de bf       	out	0x3e, r29	; 62
     728:	0f be       	out	0x3f, r0	; 63
     72a:	cd bf       	out	0x3d, r28	; 61
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	08 95       	ret

00000736 <lcd_string>:

void lcd_string(char* str)
{
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	00 d0       	rcall	.+0      	; 0x73c <lcd_string+0x6>
     73c:	00 d0       	rcall	.+0      	; 0x73e <lcd_string+0x8>
     73e:	cd b7       	in	r28, 0x3d	; 61
     740:	de b7       	in	r29, 0x3e	; 62
     742:	9c 83       	std	Y+4, r25	; 0x04
     744:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
     746:	1a 82       	std	Y+2, r1	; 0x02
     748:	19 82       	std	Y+1, r1	; 0x01

	while(1) {
		if(str[i]=='\0') break;
     74a:	89 81       	ldd	r24, Y+1	; 0x01
     74c:	9a 81       	ldd	r25, Y+2	; 0x02
     74e:	2b 81       	ldd	r18, Y+3	; 0x03
     750:	3c 81       	ldd	r19, Y+4	; 0x04
     752:	82 0f       	add	r24, r18
     754:	93 1f       	adc	r25, r19
     756:	fc 01       	movw	r30, r24
     758:	80 81       	ld	r24, Z
     75a:	88 23       	and	r24, r24
     75c:	89 f0       	breq	.+34     	; 0x780 <lcd_string+0x4a>
		lcd_data(str[i++]);
     75e:	89 81       	ldd	r24, Y+1	; 0x01
     760:	9a 81       	ldd	r25, Y+2	; 0x02
     762:	2b 81       	ldd	r18, Y+3	; 0x03
     764:	3c 81       	ldd	r19, Y+4	; 0x04
     766:	82 0f       	add	r24, r18
     768:	93 1f       	adc	r25, r19
     76a:	fc 01       	movw	r30, r24
     76c:	20 81       	ld	r18, Z
     76e:	89 81       	ldd	r24, Y+1	; 0x01
     770:	9a 81       	ldd	r25, Y+2	; 0x02
     772:	01 96       	adiw	r24, 0x01	; 1
     774:	9a 83       	std	Y+2, r25	; 0x02
     776:	89 83       	std	Y+1, r24	; 0x01
     778:	82 2f       	mov	r24, r18
     77a:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_data>
	}
     77e:	e5 cf       	rjmp	.-54     	; 0x74a <lcd_string+0x14>
void lcd_string(char* str)
{
	int i=0;

	while(1) {
		if(str[i]=='\0') break;
     780:	00 00       	nop
		lcd_data(str[i++]);
	}
}
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	0f 90       	pop	r0
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	08 95       	ret

00000790 <lcd_clear>:

void lcd_clear()
{
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
	lcd_command(0b00000001);
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	0e 94 80 01 	call	0x300	; 0x300 <lcd_command>
}
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	08 95       	ret

000007a4 <lcd_cursor_home>:

void lcd_cursor_home()
{
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	cd b7       	in	r28, 0x3d	; 61
     7aa:	de b7       	in	r29, 0x3e	; 62
	lcd_command(0b00000010);
     7ac:	82 e0       	ldi	r24, 0x02	; 2
     7ae:	0e 94 80 01 	call	0x300	; 0x300 <lcd_command>
}
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	08 95       	ret

000007b8 <lcd_entry_mode>:

void lcd_entry_mode(int ID, int S)
{
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	00 d0       	rcall	.+0      	; 0x7be <lcd_entry_mode+0x6>
     7be:	00 d0       	rcall	.+0      	; 0x7c0 <lcd_entry_mode+0x8>
     7c0:	0f 92       	push	r0
     7c2:	cd b7       	in	r28, 0x3d	; 61
     7c4:	de b7       	in	r29, 0x3e	; 62
     7c6:	9b 83       	std	Y+3, r25	; 0x03
     7c8:	8a 83       	std	Y+2, r24	; 0x02
     7ca:	7d 83       	std	Y+5, r23	; 0x05
     7cc:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char cmd = 0b00000100;	
     7ce:	84 e0       	ldi	r24, 0x04	; 4
     7d0:	89 83       	std	Y+1, r24	; 0x01
	if(ID==1) cmd = cmd | 0b00000010;
     7d2:	8a 81       	ldd	r24, Y+2	; 0x02
     7d4:	9b 81       	ldd	r25, Y+3	; 0x03
     7d6:	81 30       	cpi	r24, 0x01	; 1
     7d8:	91 05       	cpc	r25, r1
     7da:	19 f4       	brne	.+6      	; 0x7e2 <lcd_entry_mode+0x2a>
     7dc:	89 81       	ldd	r24, Y+1	; 0x01
     7de:	82 60       	ori	r24, 0x02	; 2
     7e0:	89 83       	std	Y+1, r24	; 0x01
	if(S==1) cmd = cmd | 0b00000001;
     7e2:	8c 81       	ldd	r24, Y+4	; 0x04
     7e4:	9d 81       	ldd	r25, Y+5	; 0x05
     7e6:	81 30       	cpi	r24, 0x01	; 1
     7e8:	91 05       	cpc	r25, r1
     7ea:	19 f4       	brne	.+6      	; 0x7f2 <lcd_entry_mode+0x3a>
     7ec:	89 81       	ldd	r24, Y+1	; 0x01
     7ee:	81 60       	ori	r24, 0x01	; 1
     7f0:	89 83       	std	Y+1, r24	; 0x01
	// cmd = (1<<2)  | (ID<<1) | S;
	lcd_command(cmd);
     7f2:	89 81       	ldd	r24, Y+1	; 0x01
     7f4:	0e 94 80 01 	call	0x300	; 0x300 <lcd_command>
}
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	08 95       	ret

00000808 <lcd_cursordisplay_shift>:

void lcd_cursordisplay_shift(int SC, int RL)
{
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	00 d0       	rcall	.+0      	; 0x80e <lcd_cursordisplay_shift+0x6>
     80e:	00 d0       	rcall	.+0      	; 0x810 <lcd_cursordisplay_shift+0x8>
     810:	0f 92       	push	r0
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
     816:	9b 83       	std	Y+3, r25	; 0x03
     818:	8a 83       	std	Y+2, r24	; 0x02
     81a:	7d 83       	std	Y+5, r23	; 0x05
     81c:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char cmd = 0b00010000;	
     81e:	80 e1       	ldi	r24, 0x10	; 16
     820:	89 83       	std	Y+1, r24	; 0x01
	if(SC==1) cmd = cmd | 0b00001000;
     822:	8a 81       	ldd	r24, Y+2	; 0x02
     824:	9b 81       	ldd	r25, Y+3	; 0x03
     826:	81 30       	cpi	r24, 0x01	; 1
     828:	91 05       	cpc	r25, r1
     82a:	19 f4       	brne	.+6      	; 0x832 <lcd_cursordisplay_shift+0x2a>
     82c:	89 81       	ldd	r24, Y+1	; 0x01
     82e:	88 60       	ori	r24, 0x08	; 8
     830:	89 83       	std	Y+1, r24	; 0x01
	if(RL==1) cmd = cmd | 0b00000100;
     832:	8c 81       	ldd	r24, Y+4	; 0x04
     834:	9d 81       	ldd	r25, Y+5	; 0x05
     836:	81 30       	cpi	r24, 0x01	; 1
     838:	91 05       	cpc	r25, r1
     83a:	19 f4       	brne	.+6      	; 0x842 <lcd_cursordisplay_shift+0x3a>
     83c:	89 81       	ldd	r24, Y+1	; 0x01
     83e:	84 60       	ori	r24, 0x04	; 4
     840:	89 83       	std	Y+1, r24	; 0x01
	// cmd = (1<<4)  | (SC<<3) | (RL<<2);
	lcd_command(cmd);
     842:	89 81       	ldd	r24, Y+1	; 0x01
     844:	0e 94 80 01 	call	0x300	; 0x300 <lcd_command>
}
     848:	0f 90       	pop	r0
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	08 95       	ret

00000858 <lcd_display_position>:

void lcd_display_position(unsigned char row, unsigned char col)
{
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	00 d0       	rcall	.+0      	; 0x85e <lcd_display_position+0x6>
     85e:	0f 92       	push	r0
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
     864:	8a 83       	std	Y+2, r24	; 0x02
     866:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char cmd = 0b10000000 | ((row-1)*0x40 +(col-1));	
     868:	8a 81       	ldd	r24, Y+2	; 0x02
     86a:	88 2f       	mov	r24, r24
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	01 97       	sbiw	r24, 0x01	; 1
     870:	98 2f       	mov	r25, r24
     872:	92 95       	swap	r25
     874:	99 0f       	add	r25, r25
     876:	99 0f       	add	r25, r25
     878:	90 7c       	andi	r25, 0xC0	; 192
     87a:	8b 81       	ldd	r24, Y+3	; 0x03
     87c:	89 0f       	add	r24, r25
     87e:	81 50       	subi	r24, 0x01	; 1
     880:	80 68       	ori	r24, 0x80	; 128
     882:	89 83       	std	Y+1, r24	; 0x01
	lcd_command(cmd);
     884:	89 81       	ldd	r24, Y+1	; 0x01
     886:	0e 94 80 01 	call	0x300	; 0x300 <lcd_command>
     88a:	0f 90       	pop	r0
     88c:	0f 90       	pop	r0
     88e:	0f 90       	pop	r0
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	08 95       	ret

00000896 <__vector_5>:
#include <util/delay.h>
#include "txt_lcd.h"
//timer0, 비반전고속PWM, 122Hz, 12~24% duty cycle
double ocrDouble = 29.72;
double val = 0.0;
ISR(INT4_vect){
     896:	1f 92       	push	r1
     898:	0f 92       	push	r0
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	0f 92       	push	r0
     89e:	00 90 5b 00 	lds	r0, 0x005B
     8a2:	0f 92       	push	r0
     8a4:	11 24       	eor	r1, r1
     8a6:	0f 93       	push	r16
     8a8:	1f 93       	push	r17
     8aa:	2f 93       	push	r18
     8ac:	3f 93       	push	r19
     8ae:	4f 93       	push	r20
     8b0:	5f 93       	push	r21
     8b2:	6f 93       	push	r22
     8b4:	7f 93       	push	r23
     8b6:	8f 93       	push	r24
     8b8:	9f 93       	push	r25
     8ba:	af 93       	push	r26
     8bc:	bf 93       	push	r27
     8be:	ef 93       	push	r30
     8c0:	ff 93       	push	r31
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
     8ca:	a2 97       	sbiw	r28, 0x22	; 34
     8cc:	de bf       	out	0x3e, r29	; 62
     8ce:	cd bf       	out	0x3d, r28	; 61

    val+=0.1;
     8d0:	80 91 24 01 	lds	r24, 0x0124
     8d4:	90 91 25 01 	lds	r25, 0x0125
     8d8:	a0 91 26 01 	lds	r26, 0x0126
     8dc:	b0 91 27 01 	lds	r27, 0x0127
     8e0:	bc 01       	movw	r22, r24
     8e2:	cd 01       	movw	r24, r26
     8e4:	2d ec       	ldi	r18, 0xCD	; 205
     8e6:	3c ec       	ldi	r19, 0xCC	; 204
     8e8:	4c ec       	ldi	r20, 0xCC	; 204
     8ea:	5d e3       	ldi	r21, 0x3D	; 61
     8ec:	0e 94 94 09 	call	0x1328	; 0x1328 <__addsf3>
     8f0:	dc 01       	movw	r26, r24
     8f2:	cb 01       	movw	r24, r22
     8f4:	80 93 24 01 	sts	0x0124, r24
     8f8:	90 93 25 01 	sts	0x0125, r25
     8fc:	a0 93 26 01 	sts	0x0126, r26
     900:	b0 93 27 01 	sts	0x0127, r27
    ocrDouble += 2.56; // 1% 증가
     904:	80 91 00 01 	lds	r24, 0x0100
     908:	90 91 01 01 	lds	r25, 0x0101
     90c:	a0 91 02 01 	lds	r26, 0x0102
     910:	b0 91 03 01 	lds	r27, 0x0103
     914:	bc 01       	movw	r22, r24
     916:	cd 01       	movw	r24, r26
     918:	2a e0       	ldi	r18, 0x0A	; 10
     91a:	37 ed       	ldi	r19, 0xD7	; 215
     91c:	43 e2       	ldi	r20, 0x23	; 35
     91e:	50 e4       	ldi	r21, 0x40	; 64
     920:	0e 94 94 09 	call	0x1328	; 0x1328 <__addsf3>
     924:	dc 01       	movw	r26, r24
     926:	cb 01       	movw	r24, r22
     928:	80 93 00 01 	sts	0x0100, r24
     92c:	90 93 01 01 	sts	0x0101, r25
     930:	a0 93 02 01 	sts	0x0102, r26
     934:	b0 93 03 01 	sts	0x0103, r27
    OCR0 = (int)ocrDouble;
     938:	01 e5       	ldi	r16, 0x51	; 81
     93a:	10 e0       	ldi	r17, 0x00	; 0
     93c:	80 91 00 01 	lds	r24, 0x0100
     940:	90 91 01 01 	lds	r25, 0x0101
     944:	a0 91 02 01 	lds	r26, 0x0102
     948:	b0 91 03 01 	lds	r27, 0x0103
     94c:	bc 01       	movw	r22, r24
     94e:	cd 01       	movw	r24, r26
     950:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__fixsfsi>
     954:	dc 01       	movw	r26, r24
     956:	cb 01       	movw	r24, r22
     958:	f8 01       	movw	r30, r16
     95a:	80 83       	st	Z, r24
    //OCR1A = OCR0;
    char msg[20];
    lcd_display_position(2,1);
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	61 e0       	ldi	r22, 0x01	; 1
     960:	0e 94 2c 04 	call	0x858	; 0x858 <lcd_display_position>

    	sprintf(msg, "H:%.1lfms ", val);
     964:	80 91 24 01 	lds	r24, 0x0124
     968:	90 91 25 01 	lds	r25, 0x0125
     96c:	a0 91 26 01 	lds	r26, 0x0126
     970:	b0 91 27 01 	lds	r27, 0x0127
     974:	2d b7       	in	r18, 0x3d	; 61
     976:	3e b7       	in	r19, 0x3e	; 62
     978:	28 50       	subi	r18, 0x08	; 8
     97a:	30 40       	sbci	r19, 0x00	; 0
     97c:	0f b6       	in	r0, 0x3f	; 63
     97e:	f8 94       	cli
     980:	3e bf       	out	0x3e, r19	; 62
     982:	0f be       	out	0x3f, r0	; 63
     984:	2d bf       	out	0x3d, r18	; 61
     986:	2d b7       	in	r18, 0x3d	; 61
     988:	3e b7       	in	r19, 0x3e	; 62
     98a:	2f 5f       	subi	r18, 0xFF	; 255
     98c:	3f 4f       	sbci	r19, 0xFF	; 255
     98e:	ae 01       	movw	r20, r28
     990:	41 5f       	subi	r20, 0xF1	; 241
     992:	5f 4f       	sbci	r21, 0xFF	; 255
     994:	f9 01       	movw	r30, r18
     996:	51 83       	std	Z+1, r21	; 0x01
     998:	40 83       	st	Z, r20
     99a:	44 e0       	ldi	r20, 0x04	; 4
     99c:	51 e0       	ldi	r21, 0x01	; 1
     99e:	f9 01       	movw	r30, r18
     9a0:	53 83       	std	Z+3, r21	; 0x03
     9a2:	42 83       	std	Z+2, r20	; 0x02
     9a4:	f9 01       	movw	r30, r18
     9a6:	84 83       	std	Z+4, r24	; 0x04
     9a8:	95 83       	std	Z+5, r25	; 0x05
     9aa:	a6 83       	std	Z+6, r26	; 0x06
     9ac:	b7 83       	std	Z+7, r27	; 0x07
     9ae:	0e 94 8b 0c 	call	0x1916	; 0x1916 <sprintf>
     9b2:	2d b7       	in	r18, 0x3d	; 61
     9b4:	3e b7       	in	r19, 0x3e	; 62
     9b6:	28 5f       	subi	r18, 0xF8	; 248
     9b8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	f8 94       	cli
     9be:	3e bf       	out	0x3e, r19	; 62
     9c0:	0f be       	out	0x3f, r0	; 63
     9c2:	2d bf       	out	0x3d, r18	; 61
	lcd_string(msg);
     9c4:	ce 01       	movw	r24, r28
     9c6:	0f 96       	adiw	r24, 0x0f	; 15
     9c8:	0e 94 9b 03 	call	0x736	; 0x736 <lcd_string>
    if(ocrDouble>63){ //duty cycle이 약 24%일때 되돌림
     9cc:	80 91 00 01 	lds	r24, 0x0100
     9d0:	90 91 01 01 	lds	r25, 0x0101
     9d4:	a0 91 02 01 	lds	r26, 0x0102
     9d8:	b0 91 03 01 	lds	r27, 0x0103
     9dc:	11 e0       	ldi	r17, 0x01	; 1
     9de:	bc 01       	movw	r22, r24
     9e0:	cd 01       	movw	r24, r26
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	4c e7       	ldi	r20, 0x7C	; 124
     9e8:	52 e4       	ldi	r21, 0x42	; 66
     9ea:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__gesf2>
     9ee:	18 16       	cp	r1, r24
     9f0:	0c f0       	brlt	.+2      	; 0x9f4 <__vector_5+0x15e>
     9f2:	10 e0       	ldi	r17, 0x00	; 0
     9f4:	11 23       	and	r17, r17
     9f6:	b9 f0       	breq	.+46     	; 0xa26 <__vector_5+0x190>
        ocrDouble = 29.72; //약 12%
     9f8:	8f e8       	ldi	r24, 0x8F	; 143
     9fa:	92 ec       	ldi	r25, 0xC2	; 194
     9fc:	ad ee       	ldi	r26, 0xED	; 237
     9fe:	b1 e4       	ldi	r27, 0x41	; 65
     a00:	80 93 00 01 	sts	0x0100, r24
     a04:	90 93 01 01 	sts	0x0101, r25
     a08:	a0 93 02 01 	sts	0x0102, r26
     a0c:	b0 93 03 01 	sts	0x0103, r27
        val = 0.0;
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	dc 01       	movw	r26, r24
     a16:	80 93 24 01 	sts	0x0124, r24
     a1a:	90 93 25 01 	sts	0x0125, r25
     a1e:	a0 93 26 01 	sts	0x0126, r26
     a22:	b0 93 27 01 	sts	0x0127, r27
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	a8 ec       	ldi	r26, 0xC8	; 200
     a2c:	b2 e4       	ldi	r27, 0x42	; 66
     a2e:	89 83       	std	Y+1, r24	; 0x01
     a30:	9a 83       	std	Y+2, r25	; 0x02
     a32:	ab 83       	std	Y+3, r26	; 0x03
     a34:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     a36:	69 81       	ldd	r22, Y+1	; 0x01
     a38:	7a 81       	ldd	r23, Y+2	; 0x02
     a3a:	8b 81       	ldd	r24, Y+3	; 0x03
     a3c:	9c 81       	ldd	r25, Y+4	; 0x04
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	4a ef       	ldi	r20, 0xFA	; 250
     a44:	54 e4       	ldi	r21, 0x44	; 68
     a46:	0e 94 0e 0b 	call	0x161c	; 0x161c <__mulsf3>
     a4a:	dc 01       	movw	r26, r24
     a4c:	cb 01       	movw	r24, r22
     a4e:	8d 83       	std	Y+5, r24	; 0x05
     a50:	9e 83       	std	Y+6, r25	; 0x06
     a52:	af 83       	std	Y+7, r26	; 0x07
     a54:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     a56:	11 e0       	ldi	r17, 0x01	; 1
     a58:	6d 81       	ldd	r22, Y+5	; 0x05
     a5a:	7e 81       	ldd	r23, Y+6	; 0x06
     a5c:	8f 81       	ldd	r24, Y+7	; 0x07
     a5e:	98 85       	ldd	r25, Y+8	; 0x08
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	40 e8       	ldi	r20, 0x80	; 128
     a66:	5f e3       	ldi	r21, 0x3F	; 63
     a68:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__cmpsf2>
     a6c:	88 23       	and	r24, r24
     a6e:	0c f0       	brlt	.+2      	; 0xa72 <__vector_5+0x1dc>
     a70:	10 e0       	ldi	r17, 0x00	; 0
     a72:	11 23       	and	r17, r17
     a74:	29 f0       	breq	.+10     	; 0xa80 <__vector_5+0x1ea>
		__ticks = 1;
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	9a 87       	std	Y+10, r25	; 0x0a
     a7c:	89 87       	std	Y+9, r24	; 0x09
     a7e:	46 c0       	rjmp	.+140    	; 0xb0c <__vector_5+0x276>
	else if (__tmp > 65535)
     a80:	11 e0       	ldi	r17, 0x01	; 1
     a82:	6d 81       	ldd	r22, Y+5	; 0x05
     a84:	7e 81       	ldd	r23, Y+6	; 0x06
     a86:	8f 81       	ldd	r24, Y+7	; 0x07
     a88:	98 85       	ldd	r25, Y+8	; 0x08
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	3f ef       	ldi	r19, 0xFF	; 255
     a8e:	4f e7       	ldi	r20, 0x7F	; 127
     a90:	57 e4       	ldi	r21, 0x47	; 71
     a92:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__gesf2>
     a96:	18 16       	cp	r1, r24
     a98:	0c f0       	brlt	.+2      	; 0xa9c <__vector_5+0x206>
     a9a:	10 e0       	ldi	r17, 0x00	; 0
     a9c:	11 23       	and	r17, r17
     a9e:	61 f1       	breq	.+88     	; 0xaf8 <__vector_5+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     aa0:	69 81       	ldd	r22, Y+1	; 0x01
     aa2:	7a 81       	ldd	r23, Y+2	; 0x02
     aa4:	8b 81       	ldd	r24, Y+3	; 0x03
     aa6:	9c 81       	ldd	r25, Y+4	; 0x04
     aa8:	20 e0       	ldi	r18, 0x00	; 0
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e2       	ldi	r20, 0x20	; 32
     aae:	51 e4       	ldi	r21, 0x41	; 65
     ab0:	0e 94 0e 0b 	call	0x161c	; 0x161c <__mulsf3>
     ab4:	dc 01       	movw	r26, r24
     ab6:	cb 01       	movw	r24, r22
     ab8:	bc 01       	movw	r22, r24
     aba:	cd 01       	movw	r24, r26
     abc:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__fixunssfsi>
     ac0:	dc 01       	movw	r26, r24
     ac2:	cb 01       	movw	r24, r22
     ac4:	9a 87       	std	Y+10, r25	; 0x0a
     ac6:	89 87       	std	Y+9, r24	; 0x09
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__vector_5+0x258>
     aca:	88 ec       	ldi	r24, 0xC8	; 200
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	9c 87       	std	Y+12, r25	; 0x0c
     ad0:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ad2:	8b 85       	ldd	r24, Y+11	; 0x0b
     ad4:	9c 85       	ldd	r25, Y+12	; 0x0c
     ad6:	8c 01       	movw	r16, r24
     ad8:	c8 01       	movw	r24, r16
     ada:	01 97       	sbiw	r24, 0x01	; 1
     adc:	f1 f7       	brne	.-4      	; 0xada <__vector_5+0x244>
     ade:	8c 01       	movw	r16, r24
     ae0:	1c 87       	std	Y+12, r17	; 0x0c
     ae2:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ae4:	89 85       	ldd	r24, Y+9	; 0x09
     ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ae8:	01 97       	sbiw	r24, 0x01	; 1
     aea:	9a 87       	std	Y+10, r25	; 0x0a
     aec:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aee:	89 85       	ldd	r24, Y+9	; 0x09
     af0:	9a 85       	ldd	r25, Y+10	; 0x0a
     af2:	00 97       	sbiw	r24, 0x00	; 0
     af4:	51 f7       	brne	.-44     	; 0xaca <__vector_5+0x234>
     af6:	17 c0       	rjmp	.+46     	; 0xb26 <__vector_5+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     af8:	6d 81       	ldd	r22, Y+5	; 0x05
     afa:	7e 81       	ldd	r23, Y+6	; 0x06
     afc:	8f 81       	ldd	r24, Y+7	; 0x07
     afe:	98 85       	ldd	r25, Y+8	; 0x08
     b00:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__fixunssfsi>
     b04:	dc 01       	movw	r26, r24
     b06:	cb 01       	movw	r24, r22
     b08:	9a 87       	std	Y+10, r25	; 0x0a
     b0a:	89 87       	std	Y+9, r24	; 0x09
     b0c:	89 85       	ldd	r24, Y+9	; 0x09
     b0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     b10:	9e 87       	std	Y+14, r25	; 0x0e
     b12:	8d 87       	std	Y+13, r24	; 0x0d
     b14:	8d 85       	ldd	r24, Y+13	; 0x0d
     b16:	9e 85       	ldd	r25, Y+14	; 0x0e
     b18:	8c 01       	movw	r16, r24
     b1a:	f8 01       	movw	r30, r16
     b1c:	31 97       	sbiw	r30, 0x01	; 1
     b1e:	f1 f7       	brne	.-4      	; 0xb1c <__vector_5+0x286>
     b20:	8f 01       	movw	r16, r30
     b22:	1e 87       	std	Y+14, r17	; 0x0e
     b24:	0d 87       	std	Y+13, r16	; 0x0d
    }
    _delay_ms(100);
}
     b26:	a2 96       	adiw	r28, 0x22	; 34
     b28:	de bf       	out	0x3e, r29	; 62
     b2a:	cd bf       	out	0x3d, r28	; 61
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	ff 91       	pop	r31
     b32:	ef 91       	pop	r30
     b34:	bf 91       	pop	r27
     b36:	af 91       	pop	r26
     b38:	9f 91       	pop	r25
     b3a:	8f 91       	pop	r24
     b3c:	7f 91       	pop	r23
     b3e:	6f 91       	pop	r22
     b40:	5f 91       	pop	r21
     b42:	4f 91       	pop	r20
     b44:	3f 91       	pop	r19
     b46:	2f 91       	pop	r18
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	0f 90       	pop	r0
     b4e:	00 92 5b 00 	sts	0x005B, r0
     b52:	0f 90       	pop	r0
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	0f 90       	pop	r0
     b58:	1f 90       	pop	r1
     b5a:	18 95       	reti

00000b5c <main>:

int main(){
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	cd b7       	in	r28, 0x3d	; 61
     b62:	de b7       	in	r29, 0x3e	; 62
    DDRB = 0x20; //PB5(OC1A)출력
     b64:	87 e3       	ldi	r24, 0x37	; 55
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	20 e2       	ldi	r18, 0x20	; 32
     b6a:	fc 01       	movw	r30, r24
     b6c:	20 83       	st	Z, r18

    TCCR0 = 0b01101110; //FastPWM모드, 비반전비교출력모드, 분주비256
     b6e:	83 e5       	ldi	r24, 0x53	; 83
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	2e e6       	ldi	r18, 0x6E	; 110
     b74:	fc 01       	movw	r30, r24
     b76:	20 83       	st	Z, r18
                        //Foc0 = 8MHz / 256 * 256 = 122Hz;
    OCR0 = 0;
     b78:	81 e5       	ldi	r24, 0x51	; 81
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	fc 01       	movw	r30, r24
     b7e:	10 82       	st	Z, r1
    TCNT0 = 0x00;
     b80:	82 e5       	ldi	r24, 0x52	; 82
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	fc 01       	movw	r30, r24
     b86:	10 82       	st	Z, r1

    // TCCR1A = 0b01000011;
    // TCCR1B = 0b00011100; 
    // OCR1A=0;
    
    EIMSK = 0b00010000; //INT4 인에이블
     b88:	89 e5       	ldi	r24, 0x59	; 89
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	20 e1       	ldi	r18, 0x10	; 16
     b8e:	fc 01       	movw	r30, r24
     b90:	20 83       	st	Z, r18
    EICRB = 0x00;       //INT4 Low레벨에서 인터럽트요구
     b92:	8a e5       	ldi	r24, 0x5A	; 90
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	fc 01       	movw	r30, r24
     b98:	10 82       	st	Z, r1
    SREG = 0x80;        //전역 인터럽트 인에이블
     b9a:	8f e5       	ldi	r24, 0x5F	; 95
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	20 e8       	ldi	r18, 0x80	; 128
     ba0:	fc 01       	movw	r30, r24
     ba2:	20 83       	st	Z, r18

    lcd_init();
     ba4:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_init>
	lcd_string("ATmega128_PWM_Servo");
     ba8:	8f e0       	ldi	r24, 0x0F	; 15
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	0e 94 9b 03 	call	0x736	; 0x736 <lcd_string>
	PORTB = 0x20; //PB5(OC1A)출력
     bb0:	88 e3       	ldi	r24, 0x38	; 56
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	20 e2       	ldi	r18, 0x20	; 32
     bb6:	fc 01       	movw	r30, r24
     bb8:	20 83       	st	Z, r18
	while(1);
     bba:	ff cf       	rjmp	.-2      	; 0xbba <main+0x5e>

00000bbc <vfprintf>:
     bbc:	2f 92       	push	r2
     bbe:	3f 92       	push	r3
     bc0:	4f 92       	push	r4
     bc2:	5f 92       	push	r5
     bc4:	6f 92       	push	r6
     bc6:	7f 92       	push	r7
     bc8:	8f 92       	push	r8
     bca:	9f 92       	push	r9
     bcc:	af 92       	push	r10
     bce:	bf 92       	push	r11
     bd0:	cf 92       	push	r12
     bd2:	df 92       	push	r13
     bd4:	ef 92       	push	r14
     bd6:	ff 92       	push	r15
     bd8:	0f 93       	push	r16
     bda:	1f 93       	push	r17
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	65 97       	sbiw	r28, 0x15	; 21
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	f8 94       	cli
     bea:	de bf       	out	0x3e, r29	; 62
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	cd bf       	out	0x3d, r28	; 61
     bf0:	4c 01       	movw	r8, r24
     bf2:	7f 87       	std	Y+15, r23	; 0x0f
     bf4:	6e 87       	std	Y+14, r22	; 0x0e
     bf6:	fc 01       	movw	r30, r24
     bf8:	17 82       	std	Z+7, r1	; 0x07
     bfa:	16 82       	std	Z+6, r1	; 0x06
     bfc:	83 81       	ldd	r24, Z+3	; 0x03
     bfe:	81 fd       	sbrc	r24, 1
     c00:	04 c0       	rjmp	.+8      	; 0xc0a <vfprintf+0x4e>
     c02:	76 c3       	rjmp	.+1772   	; 0x12f0 <__stack+0x1f1>
     c04:	4c 85       	ldd	r20, Y+12	; 0x0c
     c06:	5d 85       	ldd	r21, Y+13	; 0x0d
     c08:	04 c0       	rjmp	.+8      	; 0xc12 <vfprintf+0x56>
     c0a:	1e 01       	movw	r2, r28
     c0c:	08 94       	sec
     c0e:	21 1c       	adc	r2, r1
     c10:	31 1c       	adc	r3, r1
     c12:	f4 01       	movw	r30, r8
     c14:	93 81       	ldd	r25, Z+3	; 0x03
     c16:	ee 85       	ldd	r30, Y+14	; 0x0e
     c18:	ff 85       	ldd	r31, Y+15	; 0x0f
     c1a:	93 fd       	sbrc	r25, 3
     c1c:	85 91       	lpm	r24, Z+
     c1e:	93 ff       	sbrs	r25, 3
     c20:	81 91       	ld	r24, Z+
     c22:	ff 87       	std	Y+15, r31	; 0x0f
     c24:	ee 87       	std	Y+14, r30	; 0x0e
     c26:	88 23       	and	r24, r24
     c28:	09 f4       	brne	.+2      	; 0xc2c <vfprintf+0x70>
     c2a:	5e c3       	rjmp	.+1724   	; 0x12e8 <__stack+0x1e9>
     c2c:	85 32       	cpi	r24, 0x25	; 37
     c2e:	41 f4       	brne	.+16     	; 0xc40 <vfprintf+0x84>
     c30:	93 fd       	sbrc	r25, 3
     c32:	85 91       	lpm	r24, Z+
     c34:	93 ff       	sbrs	r25, 3
     c36:	81 91       	ld	r24, Z+
     c38:	ff 87       	std	Y+15, r31	; 0x0f
     c3a:	ee 87       	std	Y+14, r30	; 0x0e
     c3c:	85 32       	cpi	r24, 0x25	; 37
     c3e:	59 f4       	brne	.+22     	; 0xc56 <vfprintf+0x9a>
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	b4 01       	movw	r22, r8
     c44:	4c 8b       	std	Y+20, r20	; 0x14
     c46:	5d 8b       	std	Y+21, r21	; 0x15
     c48:	0e 94 5f 0c 	call	0x18be	; 0x18be <fputc>
     c4c:	4c 89       	ldd	r20, Y+20	; 0x14
     c4e:	5d 89       	ldd	r21, Y+21	; 0x15
     c50:	5d 87       	std	Y+13, r21	; 0x0d
     c52:	4c 87       	std	Y+12, r20	; 0x0c
     c54:	d7 cf       	rjmp	.-82     	; 0xc04 <vfprintf+0x48>
     c56:	ff 24       	eor	r15, r15
     c58:	dd 24       	eor	r13, r13
     c5a:	10 e0       	ldi	r17, 0x00	; 0
     c5c:	10 32       	cpi	r17, 0x20	; 32
     c5e:	b0 f4       	brcc	.+44     	; 0xc8c <vfprintf+0xd0>
     c60:	8b 32       	cpi	r24, 0x2B	; 43
     c62:	69 f0       	breq	.+26     	; 0xc7e <vfprintf+0xc2>
     c64:	8c 32       	cpi	r24, 0x2C	; 44
     c66:	28 f4       	brcc	.+10     	; 0xc72 <vfprintf+0xb6>
     c68:	80 32       	cpi	r24, 0x20	; 32
     c6a:	51 f0       	breq	.+20     	; 0xc80 <vfprintf+0xc4>
     c6c:	83 32       	cpi	r24, 0x23	; 35
     c6e:	71 f4       	brne	.+28     	; 0xc8c <vfprintf+0xd0>
     c70:	0b c0       	rjmp	.+22     	; 0xc88 <vfprintf+0xcc>
     c72:	8d 32       	cpi	r24, 0x2D	; 45
     c74:	39 f0       	breq	.+14     	; 0xc84 <vfprintf+0xc8>
     c76:	80 33       	cpi	r24, 0x30	; 48
     c78:	49 f4       	brne	.+18     	; 0xc8c <vfprintf+0xd0>
     c7a:	11 60       	ori	r17, 0x01	; 1
     c7c:	2c c0       	rjmp	.+88     	; 0xcd6 <vfprintf+0x11a>
     c7e:	12 60       	ori	r17, 0x02	; 2
     c80:	14 60       	ori	r17, 0x04	; 4
     c82:	29 c0       	rjmp	.+82     	; 0xcd6 <vfprintf+0x11a>
     c84:	18 60       	ori	r17, 0x08	; 8
     c86:	27 c0       	rjmp	.+78     	; 0xcd6 <vfprintf+0x11a>
     c88:	10 61       	ori	r17, 0x10	; 16
     c8a:	25 c0       	rjmp	.+74     	; 0xcd6 <vfprintf+0x11a>
     c8c:	17 fd       	sbrc	r17, 7
     c8e:	2e c0       	rjmp	.+92     	; 0xcec <vfprintf+0x130>
     c90:	28 2f       	mov	r18, r24
     c92:	20 53       	subi	r18, 0x30	; 48
     c94:	2a 30       	cpi	r18, 0x0A	; 10
     c96:	98 f4       	brcc	.+38     	; 0xcbe <vfprintf+0x102>
     c98:	16 ff       	sbrs	r17, 6
     c9a:	08 c0       	rjmp	.+16     	; 0xcac <vfprintf+0xf0>
     c9c:	8f 2d       	mov	r24, r15
     c9e:	88 0f       	add	r24, r24
     ca0:	f8 2e       	mov	r15, r24
     ca2:	ff 0c       	add	r15, r15
     ca4:	ff 0c       	add	r15, r15
     ca6:	f8 0e       	add	r15, r24
     ca8:	f2 0e       	add	r15, r18
     caa:	15 c0       	rjmp	.+42     	; 0xcd6 <vfprintf+0x11a>
     cac:	8d 2d       	mov	r24, r13
     cae:	88 0f       	add	r24, r24
     cb0:	d8 2e       	mov	r13, r24
     cb2:	dd 0c       	add	r13, r13
     cb4:	dd 0c       	add	r13, r13
     cb6:	d8 0e       	add	r13, r24
     cb8:	d2 0e       	add	r13, r18
     cba:	10 62       	ori	r17, 0x20	; 32
     cbc:	0c c0       	rjmp	.+24     	; 0xcd6 <vfprintf+0x11a>
     cbe:	8e 32       	cpi	r24, 0x2E	; 46
     cc0:	21 f4       	brne	.+8      	; 0xcca <vfprintf+0x10e>
     cc2:	16 fd       	sbrc	r17, 6
     cc4:	11 c3       	rjmp	.+1570   	; 0x12e8 <__stack+0x1e9>
     cc6:	10 64       	ori	r17, 0x40	; 64
     cc8:	06 c0       	rjmp	.+12     	; 0xcd6 <vfprintf+0x11a>
     cca:	8c 36       	cpi	r24, 0x6C	; 108
     ccc:	11 f4       	brne	.+4      	; 0xcd2 <vfprintf+0x116>
     cce:	10 68       	ori	r17, 0x80	; 128
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <vfprintf+0x11a>
     cd2:	88 36       	cpi	r24, 0x68	; 104
     cd4:	59 f4       	brne	.+22     	; 0xcec <vfprintf+0x130>
     cd6:	ee 85       	ldd	r30, Y+14	; 0x0e
     cd8:	ff 85       	ldd	r31, Y+15	; 0x0f
     cda:	93 fd       	sbrc	r25, 3
     cdc:	85 91       	lpm	r24, Z+
     cde:	93 ff       	sbrs	r25, 3
     ce0:	81 91       	ld	r24, Z+
     ce2:	ff 87       	std	Y+15, r31	; 0x0f
     ce4:	ee 87       	std	Y+14, r30	; 0x0e
     ce6:	88 23       	and	r24, r24
     ce8:	09 f0       	breq	.+2      	; 0xcec <vfprintf+0x130>
     cea:	b8 cf       	rjmp	.-144    	; 0xc5c <vfprintf+0xa0>
     cec:	98 2f       	mov	r25, r24
     cee:	95 54       	subi	r25, 0x45	; 69
     cf0:	93 30       	cpi	r25, 0x03	; 3
     cf2:	18 f4       	brcc	.+6      	; 0xcfa <vfprintf+0x13e>
     cf4:	10 61       	ori	r17, 0x10	; 16
     cf6:	80 5e       	subi	r24, 0xE0	; 224
     cf8:	06 c0       	rjmp	.+12     	; 0xd06 <vfprintf+0x14a>
     cfa:	98 2f       	mov	r25, r24
     cfc:	95 56       	subi	r25, 0x65	; 101
     cfe:	93 30       	cpi	r25, 0x03	; 3
     d00:	08 f0       	brcs	.+2      	; 0xd04 <vfprintf+0x148>
     d02:	a2 c1       	rjmp	.+836    	; 0x1048 <vfprintf+0x48c>
     d04:	1f 7e       	andi	r17, 0xEF	; 239
     d06:	16 fd       	sbrc	r17, 6
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <vfprintf+0x152>
     d0a:	e6 e0       	ldi	r30, 0x06	; 6
     d0c:	fe 2e       	mov	r15, r30
     d0e:	1f 73       	andi	r17, 0x3F	; 63
     d10:	85 36       	cpi	r24, 0x65	; 101
     d12:	11 f4       	brne	.+4      	; 0xd18 <vfprintf+0x15c>
     d14:	10 64       	ori	r17, 0x40	; 64
     d16:	06 c0       	rjmp	.+12     	; 0xd24 <vfprintf+0x168>
     d18:	86 36       	cpi	r24, 0x66	; 102
     d1a:	11 f4       	brne	.+4      	; 0xd20 <vfprintf+0x164>
     d1c:	10 68       	ori	r17, 0x80	; 128
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <vfprintf+0x168>
     d20:	f1 10       	cpse	r15, r1
     d22:	fa 94       	dec	r15
     d24:	17 ff       	sbrs	r17, 7
     d26:	07 c0       	rjmp	.+14     	; 0xd36 <vfprintf+0x17a>
     d28:	fb e3       	ldi	r31, 0x3B	; 59
     d2a:	ff 15       	cp	r31, r15
     d2c:	48 f0       	brcs	.+18     	; 0xd40 <vfprintf+0x184>
     d2e:	ef 2c       	mov	r14, r15
     d30:	e3 94       	inc	r14
     d32:	27 e0       	ldi	r18, 0x07	; 7
     d34:	0d c0       	rjmp	.+26     	; 0xd50 <vfprintf+0x194>
     d36:	27 e0       	ldi	r18, 0x07	; 7
     d38:	2f 15       	cp	r18, r15
     d3a:	30 f0       	brcs	.+12     	; 0xd48 <vfprintf+0x18c>
     d3c:	2f 2d       	mov	r18, r15
     d3e:	07 c0       	rjmp	.+14     	; 0xd4e <vfprintf+0x192>
     d40:	27 e0       	ldi	r18, 0x07	; 7
     d42:	7c e3       	ldi	r23, 0x3C	; 60
     d44:	e7 2e       	mov	r14, r23
     d46:	04 c0       	rjmp	.+8      	; 0xd50 <vfprintf+0x194>
     d48:	27 e0       	ldi	r18, 0x07	; 7
     d4a:	67 e0       	ldi	r22, 0x07	; 7
     d4c:	f6 2e       	mov	r15, r22
     d4e:	ee 24       	eor	r14, r14
     d50:	ca 01       	movw	r24, r20
     d52:	04 96       	adiw	r24, 0x04	; 4
     d54:	9d 87       	std	Y+13, r25	; 0x0d
     d56:	8c 87       	std	Y+12, r24	; 0x0c
     d58:	fa 01       	movw	r30, r20
     d5a:	60 81       	ld	r22, Z
     d5c:	71 81       	ldd	r23, Z+1	; 0x01
     d5e:	82 81       	ldd	r24, Z+2	; 0x02
     d60:	93 81       	ldd	r25, Z+3	; 0x03
     d62:	a1 01       	movw	r20, r2
     d64:	0e 2d       	mov	r16, r14
     d66:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <__ftoa_engine>
     d6a:	5c 01       	movw	r10, r24
     d6c:	c9 80       	ldd	r12, Y+1	; 0x01
     d6e:	2c 2d       	mov	r18, r12
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	39 8b       	std	Y+17, r19	; 0x11
     d74:	28 8b       	std	Y+16, r18	; 0x10
     d76:	c0 fe       	sbrs	r12, 0
     d78:	03 c0       	rjmp	.+6      	; 0xd80 <vfprintf+0x1c4>
     d7a:	38 89       	ldd	r19, Y+16	; 0x10
     d7c:	33 ff       	sbrs	r19, 3
     d7e:	06 c0       	rjmp	.+12     	; 0xd8c <vfprintf+0x1d0>
     d80:	11 fd       	sbrc	r17, 1
     d82:	06 c0       	rjmp	.+12     	; 0xd90 <vfprintf+0x1d4>
     d84:	12 ff       	sbrs	r17, 2
     d86:	06 c0       	rjmp	.+12     	; 0xd94 <vfprintf+0x1d8>
     d88:	00 e2       	ldi	r16, 0x20	; 32
     d8a:	05 c0       	rjmp	.+10     	; 0xd96 <vfprintf+0x1da>
     d8c:	0d e2       	ldi	r16, 0x2D	; 45
     d8e:	03 c0       	rjmp	.+6      	; 0xd96 <vfprintf+0x1da>
     d90:	0b e2       	ldi	r16, 0x2B	; 43
     d92:	01 c0       	rjmp	.+2      	; 0xd96 <vfprintf+0x1da>
     d94:	00 e0       	ldi	r16, 0x00	; 0
     d96:	88 89       	ldd	r24, Y+16	; 0x10
     d98:	99 89       	ldd	r25, Y+17	; 0x11
     d9a:	8c 70       	andi	r24, 0x0C	; 12
     d9c:	90 70       	andi	r25, 0x00	; 0
     d9e:	00 97       	sbiw	r24, 0x00	; 0
     da0:	09 f4       	brne	.+2      	; 0xda4 <vfprintf+0x1e8>
     da2:	3c c0       	rjmp	.+120    	; 0xe1c <vfprintf+0x260>
     da4:	00 23       	and	r16, r16
     da6:	11 f0       	breq	.+4      	; 0xdac <vfprintf+0x1f0>
     da8:	84 e0       	ldi	r24, 0x04	; 4
     daa:	01 c0       	rjmp	.+2      	; 0xdae <vfprintf+0x1f2>
     dac:	83 e0       	ldi	r24, 0x03	; 3
     dae:	8d 15       	cp	r24, r13
     db0:	58 f4       	brcc	.+22     	; 0xdc8 <vfprintf+0x20c>
     db2:	d8 1a       	sub	r13, r24
     db4:	13 fd       	sbrc	r17, 3
     db6:	09 c0       	rjmp	.+18     	; 0xdca <vfprintf+0x20e>
     db8:	80 e2       	ldi	r24, 0x20	; 32
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	b4 01       	movw	r22, r8
     dbe:	0e 94 5f 0c 	call	0x18be	; 0x18be <fputc>
     dc2:	da 94       	dec	r13
     dc4:	c9 f7       	brne	.-14     	; 0xdb8 <vfprintf+0x1fc>
     dc6:	01 c0       	rjmp	.+2      	; 0xdca <vfprintf+0x20e>
     dc8:	dd 24       	eor	r13, r13
     dca:	00 23       	and	r16, r16
     dcc:	29 f0       	breq	.+10     	; 0xdd8 <vfprintf+0x21c>
     dce:	80 2f       	mov	r24, r16
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	b4 01       	movw	r22, r8
     dd4:	0e 94 5f 0c 	call	0x18be	; 0x18be <fputc>
     dd8:	88 89       	ldd	r24, Y+16	; 0x10
     dda:	83 fd       	sbrc	r24, 3
     ddc:	05 c0       	rjmp	.+10     	; 0xde8 <vfprintf+0x22c>
     dde:	30 e9       	ldi	r19, 0x90	; 144
     de0:	e3 2e       	mov	r14, r19
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	f3 2e       	mov	r15, r19
     de6:	11 c0       	rjmp	.+34     	; 0xe0a <vfprintf+0x24e>
     de8:	2c e8       	ldi	r18, 0x8C	; 140
     dea:	e2 2e       	mov	r14, r18
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	f2 2e       	mov	r15, r18
     df0:	0c c0       	rjmp	.+24     	; 0xe0a <vfprintf+0x24e>
     df2:	01 15       	cp	r16, r1
     df4:	11 05       	cpc	r17, r1
     df6:	09 f0       	breq	.+2      	; 0xdfa <vfprintf+0x23e>
     df8:	80 52       	subi	r24, 0x20	; 32
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	b4 01       	movw	r22, r8
     dfe:	0e 94 5f 0c 	call	0x18be	; 0x18be <fputc>
     e02:	08 94       	sec
     e04:	e1 1c       	adc	r14, r1
     e06:	f1 1c       	adc	r15, r1
     e08:	04 c0       	rjmp	.+8      	; 0xe12 <vfprintf+0x256>
     e0a:	01 2f       	mov	r16, r17
     e0c:	10 e0       	ldi	r17, 0x00	; 0
     e0e:	00 71       	andi	r16, 0x10	; 16
     e10:	10 70       	andi	r17, 0x00	; 0
     e12:	f7 01       	movw	r30, r14
     e14:	84 91       	lpm	r24, Z
     e16:	88 23       	and	r24, r24
     e18:	61 f7       	brne	.-40     	; 0xdf2 <vfprintf+0x236>
     e1a:	63 c2       	rjmp	.+1222   	; 0x12e2 <__stack+0x1e3>
     e1c:	17 ff       	sbrs	r17, 7
     e1e:	0e c0       	rjmp	.+28     	; 0xe3c <vfprintf+0x280>
     e20:	ea 0c       	add	r14, r10
     e22:	f8 89       	ldd	r31, Y+16	; 0x10
     e24:	f4 ff       	sbrs	r31, 4
     e26:	04 c0       	rjmp	.+8      	; 0xe30 <vfprintf+0x274>
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	81 33       	cpi	r24, 0x31	; 49
     e2c:	09 f4       	brne	.+2      	; 0xe30 <vfprintf+0x274>
     e2e:	ea 94       	dec	r14
     e30:	1e 14       	cp	r1, r14
     e32:	4c f5       	brge	.+82     	; 0xe86 <vfprintf+0x2ca>
     e34:	28 e0       	ldi	r18, 0x08	; 8
     e36:	2e 15       	cp	r18, r14
     e38:	48 f1       	brcs	.+82     	; 0xe8c <vfprintf+0x2d0>
     e3a:	2c c0       	rjmp	.+88     	; 0xe94 <vfprintf+0x2d8>
     e3c:	16 fd       	sbrc	r17, 6
     e3e:	2a c0       	rjmp	.+84     	; 0xe94 <vfprintf+0x2d8>
     e40:	8f 2d       	mov	r24, r15
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	8a 15       	cp	r24, r10
     e46:	9b 05       	cpc	r25, r11
     e48:	44 f0       	brlt	.+16     	; 0xe5a <vfprintf+0x29e>
     e4a:	3c ef       	ldi	r19, 0xFC	; 252
     e4c:	a3 16       	cp	r10, r19
     e4e:	3f ef       	ldi	r19, 0xFF	; 255
     e50:	b3 06       	cpc	r11, r19
     e52:	1c f0       	brlt	.+6      	; 0xe5a <vfprintf+0x29e>
     e54:	10 68       	ori	r17, 0x80	; 128
     e56:	01 c0       	rjmp	.+2      	; 0xe5a <vfprintf+0x29e>
     e58:	fa 94       	dec	r15
     e5a:	ff 20       	and	r15, r15
     e5c:	49 f0       	breq	.+18     	; 0xe70 <vfprintf+0x2b4>
     e5e:	e2 e0       	ldi	r30, 0x02	; 2
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	ec 0f       	add	r30, r28
     e64:	fd 1f       	adc	r31, r29
     e66:	ef 0d       	add	r30, r15
     e68:	f1 1d       	adc	r31, r1
     e6a:	80 81       	ld	r24, Z
     e6c:	80 33       	cpi	r24, 0x30	; 48
     e6e:	a1 f3       	breq	.-24     	; 0xe58 <vfprintf+0x29c>
     e70:	17 ff       	sbrs	r17, 7
     e72:	10 c0       	rjmp	.+32     	; 0xe94 <vfprintf+0x2d8>
     e74:	ef 2c       	mov	r14, r15
     e76:	e3 94       	inc	r14
     e78:	8f 2d       	mov	r24, r15
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	a8 16       	cp	r10, r24
     e7e:	b9 06       	cpc	r11, r25
     e80:	44 f4       	brge	.+16     	; 0xe92 <vfprintf+0x2d6>
     e82:	fa 18       	sub	r15, r10
     e84:	07 c0       	rjmp	.+14     	; 0xe94 <vfprintf+0x2d8>
     e86:	ee 24       	eor	r14, r14
     e88:	e3 94       	inc	r14
     e8a:	04 c0       	rjmp	.+8      	; 0xe94 <vfprintf+0x2d8>
     e8c:	98 e0       	ldi	r25, 0x08	; 8
     e8e:	e9 2e       	mov	r14, r25
     e90:	01 c0       	rjmp	.+2      	; 0xe94 <vfprintf+0x2d8>
     e92:	ff 24       	eor	r15, r15
     e94:	17 ff       	sbrs	r17, 7
     e96:	07 c0       	rjmp	.+14     	; 0xea6 <vfprintf+0x2ea>
     e98:	1a 14       	cp	r1, r10
     e9a:	1b 04       	cpc	r1, r11
     e9c:	3c f4       	brge	.+14     	; 0xeac <vfprintf+0x2f0>
     e9e:	95 01       	movw	r18, r10
     ea0:	2f 5f       	subi	r18, 0xFF	; 255
     ea2:	3f 4f       	sbci	r19, 0xFF	; 255
     ea4:	05 c0       	rjmp	.+10     	; 0xeb0 <vfprintf+0x2f4>
     ea6:	25 e0       	ldi	r18, 0x05	; 5
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <vfprintf+0x2f4>
     eac:	21 e0       	ldi	r18, 0x01	; 1
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	00 23       	and	r16, r16
     eb2:	11 f0       	breq	.+4      	; 0xeb8 <vfprintf+0x2fc>
     eb4:	2f 5f       	subi	r18, 0xFF	; 255
     eb6:	3f 4f       	sbci	r19, 0xFF	; 255
     eb8:	ff 20       	and	r15, r15
     eba:	29 f0       	breq	.+10     	; 0xec6 <vfprintf+0x30a>
     ebc:	8f 2d       	mov	r24, r15
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	01 96       	adiw	r24, 0x01	; 1
     ec2:	28 0f       	add	r18, r24
     ec4:	39 1f       	adc	r19, r25
     ec6:	8d 2d       	mov	r24, r13
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	28 17       	cp	r18, r24
     ecc:	39 07       	cpc	r19, r25
     ece:	14 f4       	brge	.+4      	; 0xed4 <vfprintf+0x318>
     ed0:	d2 1a       	sub	r13, r18
     ed2:	01 c0       	rjmp	.+2      	; 0xed6 <vfprintf+0x31a>
     ed4:	dd 24       	eor	r13, r13
     ed6:	61 2e       	mov	r6, r17
     ed8:	77 24       	eor	r7, r7
     eda:	c3 01       	movw	r24, r6
     edc:	89 70       	andi	r24, 0x09	; 9
     ede:	90 70       	andi	r25, 0x00	; 0
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	49 f4       	brne	.+18     	; 0xef6 <vfprintf+0x33a>
     ee4:	06 c0       	rjmp	.+12     	; 0xef2 <vfprintf+0x336>
     ee6:	80 e2       	ldi	r24, 0x20	; 32
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	b4 01       	movw	r22, r8
     eec:	0e 94 5f 0c 	call	0x18be	; 0x18be <fputc>
     ef0:	da 94       	dec	r13
     ef2:	dd 20       	and	r13, r13
     ef4:	c1 f7       	brne	.-16     	; 0xee6 <vfprintf+0x32a>
     ef6:	00 23       	and	r16, r16
     ef8:	29 f0       	breq	.+10     	; 0xf04 <vfprintf+0x348>
     efa:	80 2f       	mov	r24, r16
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	b4 01       	movw	r22, r8
     f00:	0e 94 5f 0c 	call	0x18be	; 0x18be <fputc>
     f04:	63 fc       	sbrc	r6, 3
     f06:	09 c0       	rjmp	.+18     	; 0xf1a <vfprintf+0x35e>
     f08:	06 c0       	rjmp	.+12     	; 0xf16 <vfprintf+0x35a>
     f0a:	80 e3       	ldi	r24, 0x30	; 48
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	b4 01       	movw	r22, r8
     f10:	0e 94 5f 0c 	call	0x18be	; 0x18be <fputc>
     f14:	da 94       	dec	r13
     f16:	dd 20       	and	r13, r13
     f18:	c1 f7       	brne	.-16     	; 0xf0a <vfprintf+0x34e>
     f1a:	17 ff       	sbrs	r17, 7
     f1c:	48 c0       	rjmp	.+144    	; 0xfae <vfprintf+0x3f2>
     f1e:	85 01       	movw	r16, r10
     f20:	b7 fe       	sbrs	r11, 7
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <vfprintf+0x36c>
     f24:	00 e0       	ldi	r16, 0x00	; 0
     f26:	10 e0       	ldi	r17, 0x00	; 0
     f28:	66 24       	eor	r6, r6
     f2a:	77 24       	eor	r7, r7
     f2c:	95 01       	movw	r18, r10
     f2e:	2e 19       	sub	r18, r14
     f30:	31 09       	sbc	r19, r1
     f32:	3b 8b       	std	Y+19, r19	; 0x13
     f34:	2a 8b       	std	Y+18, r18	; 0x12
     f36:	25 01       	movw	r4, r10
     f38:	40 1a       	sub	r4, r16
     f3a:	51 0a       	sbc	r5, r17
     f3c:	42 0c       	add	r4, r2
     f3e:	53 1c       	adc	r5, r3
     f40:	6f 2d       	mov	r22, r15
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	ee 24       	eor	r14, r14
     f46:	ff 24       	eor	r15, r15
     f48:	e6 1a       	sub	r14, r22
     f4a:	f7 0a       	sbc	r15, r23
     f4c:	3f ef       	ldi	r19, 0xFF	; 255
     f4e:	0f 3f       	cpi	r16, 0xFF	; 255
     f50:	13 07       	cpc	r17, r19
     f52:	29 f4       	brne	.+10     	; 0xf5e <vfprintf+0x3a2>
     f54:	8e e2       	ldi	r24, 0x2E	; 46
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	b4 01       	movw	r22, r8
     f5a:	0e 94 5f 0c 	call	0x18be	; 0x18be <fputc>
     f5e:	a0 16       	cp	r10, r16
     f60:	b1 06       	cpc	r11, r17
     f62:	54 f0       	brlt	.+20     	; 0xf78 <vfprintf+0x3bc>
     f64:	2a 89       	ldd	r18, Y+18	; 0x12
     f66:	3b 89       	ldd	r19, Y+19	; 0x13
     f68:	20 17       	cp	r18, r16
     f6a:	31 07       	cpc	r19, r17
     f6c:	2c f4       	brge	.+10     	; 0xf78 <vfprintf+0x3bc>
     f6e:	f2 01       	movw	r30, r4
     f70:	e6 0d       	add	r30, r6
     f72:	f7 1d       	adc	r31, r7
     f74:	81 81       	ldd	r24, Z+1	; 0x01
     f76:	01 c0       	rjmp	.+2      	; 0xf7a <vfprintf+0x3be>
     f78:	80 e3       	ldi	r24, 0x30	; 48
     f7a:	01 50       	subi	r16, 0x01	; 1
     f7c:	10 40       	sbci	r17, 0x00	; 0
     f7e:	08 94       	sec
     f80:	61 1c       	adc	r6, r1
     f82:	71 1c       	adc	r7, r1
     f84:	0e 15       	cp	r16, r14
     f86:	1f 05       	cpc	r17, r15
     f88:	2c f0       	brlt	.+10     	; 0xf94 <vfprintf+0x3d8>
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	b4 01       	movw	r22, r8
     f8e:	0e 94 5f 0c 	call	0x18be	; 0x18be <fputc>
     f92:	dc cf       	rjmp	.-72     	; 0xf4c <vfprintf+0x390>
     f94:	0a 15       	cp	r16, r10
     f96:	1b 05       	cpc	r17, r11
     f98:	41 f4       	brne	.+16     	; 0xfaa <vfprintf+0x3ee>
     f9a:	9a 81       	ldd	r25, Y+2	; 0x02
     f9c:	96 33       	cpi	r25, 0x36	; 54
     f9e:	20 f4       	brcc	.+8      	; 0xfa8 <vfprintf+0x3ec>
     fa0:	95 33       	cpi	r25, 0x35	; 53
     fa2:	19 f4       	brne	.+6      	; 0xfaa <vfprintf+0x3ee>
     fa4:	38 89       	ldd	r19, Y+16	; 0x10
     fa6:	34 ff       	sbrs	r19, 4
     fa8:	81 e3       	ldi	r24, 0x31	; 49
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	49 c0       	rjmp	.+146    	; 0x1040 <vfprintf+0x484>
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	81 33       	cpi	r24, 0x31	; 49
     fb2:	11 f0       	breq	.+4      	; 0xfb8 <vfprintf+0x3fc>
     fb4:	9f ee       	ldi	r25, 0xEF	; 239
     fb6:	c9 22       	and	r12, r25
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	b4 01       	movw	r22, r8
     fbc:	0e 94 5f 0c 	call	0x18be	; 0x18be <fputc>
     fc0:	ff 20       	and	r15, r15
     fc2:	89 f0       	breq	.+34     	; 0xfe6 <vfprintf+0x42a>
     fc4:	8e e2       	ldi	r24, 0x2E	; 46
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	b4 01       	movw	r22, r8
     fca:	0e 94 5f 0c 	call	0x18be	; 0x18be <fputc>
     fce:	12 e0       	ldi	r17, 0x02	; 2
     fd0:	f1 01       	movw	r30, r2
     fd2:	e1 0f       	add	r30, r17
     fd4:	f1 1d       	adc	r31, r1
     fd6:	1f 5f       	subi	r17, 0xFF	; 255
     fd8:	80 81       	ld	r24, Z
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	b4 01       	movw	r22, r8
     fde:	0e 94 5f 0c 	call	0x18be	; 0x18be <fputc>
     fe2:	fa 94       	dec	r15
     fe4:	a9 f7       	brne	.-22     	; 0xfd0 <vfprintf+0x414>
     fe6:	64 fe       	sbrs	r6, 4
     fe8:	03 c0       	rjmp	.+6      	; 0xff0 <vfprintf+0x434>
     fea:	85 e4       	ldi	r24, 0x45	; 69
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <vfprintf+0x438>
     ff0:	85 e6       	ldi	r24, 0x65	; 101
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	b4 01       	movw	r22, r8
     ff6:	0e 94 5f 0c 	call	0x18be	; 0x18be <fputc>
     ffa:	b7 fc       	sbrc	r11, 7
     ffc:	05 c0       	rjmp	.+10     	; 0x1008 <vfprintf+0x44c>
     ffe:	a1 14       	cp	r10, r1
    1000:	b1 04       	cpc	r11, r1
    1002:	41 f4       	brne	.+16     	; 0x1014 <vfprintf+0x458>
    1004:	c4 fe       	sbrs	r12, 4
    1006:	06 c0       	rjmp	.+12     	; 0x1014 <vfprintf+0x458>
    1008:	b0 94       	com	r11
    100a:	a1 94       	neg	r10
    100c:	b1 08       	sbc	r11, r1
    100e:	b3 94       	inc	r11
    1010:	8d e2       	ldi	r24, 0x2D	; 45
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <vfprintf+0x45a>
    1014:	8b e2       	ldi	r24, 0x2B	; 43
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	b4 01       	movw	r22, r8
    101a:	0e 94 5f 0c 	call	0x18be	; 0x18be <fputc>
    101e:	80 e3       	ldi	r24, 0x30	; 48
    1020:	05 c0       	rjmp	.+10     	; 0x102c <vfprintf+0x470>
    1022:	8f 5f       	subi	r24, 0xFF	; 255
    1024:	e6 ef       	ldi	r30, 0xF6	; 246
    1026:	ff ef       	ldi	r31, 0xFF	; 255
    1028:	ae 0e       	add	r10, r30
    102a:	bf 1e       	adc	r11, r31
    102c:	fa e0       	ldi	r31, 0x0A	; 10
    102e:	af 16       	cp	r10, r31
    1030:	b1 04       	cpc	r11, r1
    1032:	bc f7       	brge	.-18     	; 0x1022 <vfprintf+0x466>
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	b4 01       	movw	r22, r8
    1038:	0e 94 5f 0c 	call	0x18be	; 0x18be <fputc>
    103c:	c5 01       	movw	r24, r10
    103e:	c0 96       	adiw	r24, 0x30	; 48
    1040:	b4 01       	movw	r22, r8
    1042:	0e 94 5f 0c 	call	0x18be	; 0x18be <fputc>
    1046:	4d c1       	rjmp	.+666    	; 0x12e2 <__stack+0x1e3>
    1048:	83 36       	cpi	r24, 0x63	; 99
    104a:	31 f0       	breq	.+12     	; 0x1058 <vfprintf+0x49c>
    104c:	83 37       	cpi	r24, 0x73	; 115
    104e:	89 f0       	breq	.+34     	; 0x1072 <vfprintf+0x4b6>
    1050:	83 35       	cpi	r24, 0x53	; 83
    1052:	09 f0       	breq	.+2      	; 0x1056 <vfprintf+0x49a>
    1054:	59 c0       	rjmp	.+178    	; 0x1108 <__stack+0x9>
    1056:	22 c0       	rjmp	.+68     	; 0x109c <vfprintf+0x4e0>
    1058:	9a 01       	movw	r18, r20
    105a:	2e 5f       	subi	r18, 0xFE	; 254
    105c:	3f 4f       	sbci	r19, 0xFF	; 255
    105e:	3d 87       	std	Y+13, r19	; 0x0d
    1060:	2c 87       	std	Y+12, r18	; 0x0c
    1062:	fa 01       	movw	r30, r20
    1064:	80 81       	ld	r24, Z
    1066:	89 83       	std	Y+1, r24	; 0x01
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	e8 2e       	mov	r14, r24
    106c:	f1 2c       	mov	r15, r1
    106e:	51 01       	movw	r10, r2
    1070:	13 c0       	rjmp	.+38     	; 0x1098 <vfprintf+0x4dc>
    1072:	9a 01       	movw	r18, r20
    1074:	2e 5f       	subi	r18, 0xFE	; 254
    1076:	3f 4f       	sbci	r19, 0xFF	; 255
    1078:	3d 87       	std	Y+13, r19	; 0x0d
    107a:	2c 87       	std	Y+12, r18	; 0x0c
    107c:	fa 01       	movw	r30, r20
    107e:	a0 80       	ld	r10, Z
    1080:	b1 80       	ldd	r11, Z+1	; 0x01
    1082:	16 ff       	sbrs	r17, 6
    1084:	03 c0       	rjmp	.+6      	; 0x108c <vfprintf+0x4d0>
    1086:	6f 2d       	mov	r22, r15
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <vfprintf+0x4d4>
    108c:	6f ef       	ldi	r22, 0xFF	; 255
    108e:	7f ef       	ldi	r23, 0xFF	; 255
    1090:	c5 01       	movw	r24, r10
    1092:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <strnlen>
    1096:	7c 01       	movw	r14, r24
    1098:	1f 77       	andi	r17, 0x7F	; 127
    109a:	14 c0       	rjmp	.+40     	; 0x10c4 <vfprintf+0x508>
    109c:	9a 01       	movw	r18, r20
    109e:	2e 5f       	subi	r18, 0xFE	; 254
    10a0:	3f 4f       	sbci	r19, 0xFF	; 255
    10a2:	3d 87       	std	Y+13, r19	; 0x0d
    10a4:	2c 87       	std	Y+12, r18	; 0x0c
    10a6:	fa 01       	movw	r30, r20
    10a8:	a0 80       	ld	r10, Z
    10aa:	b1 80       	ldd	r11, Z+1	; 0x01
    10ac:	16 ff       	sbrs	r17, 6
    10ae:	03 c0       	rjmp	.+6      	; 0x10b6 <vfprintf+0x4fa>
    10b0:	6f 2d       	mov	r22, r15
    10b2:	70 e0       	ldi	r23, 0x00	; 0
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <vfprintf+0x4fe>
    10b6:	6f ef       	ldi	r22, 0xFF	; 255
    10b8:	7f ef       	ldi	r23, 0xFF	; 255
    10ba:	c5 01       	movw	r24, r10
    10bc:	0e 94 49 0c 	call	0x1892	; 0x1892 <strnlen_P>
    10c0:	7c 01       	movw	r14, r24
    10c2:	10 68       	ori	r17, 0x80	; 128
    10c4:	13 fd       	sbrc	r17, 3
    10c6:	1c c0       	rjmp	.+56     	; 0x1100 <__stack+0x1>
    10c8:	06 c0       	rjmp	.+12     	; 0x10d6 <vfprintf+0x51a>
    10ca:	80 e2       	ldi	r24, 0x20	; 32
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	b4 01       	movw	r22, r8
    10d0:	0e 94 5f 0c 	call	0x18be	; 0x18be <fputc>
    10d4:	da 94       	dec	r13
    10d6:	8d 2d       	mov	r24, r13
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	e8 16       	cp	r14, r24
    10dc:	f9 06       	cpc	r15, r25
    10de:	a8 f3       	brcs	.-22     	; 0x10ca <vfprintf+0x50e>
    10e0:	0f c0       	rjmp	.+30     	; 0x1100 <__stack+0x1>
    10e2:	f5 01       	movw	r30, r10
    10e4:	17 fd       	sbrc	r17, 7
    10e6:	85 91       	lpm	r24, Z+
    10e8:	17 ff       	sbrs	r17, 7
    10ea:	81 91       	ld	r24, Z+
    10ec:	5f 01       	movw	r10, r30
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	b4 01       	movw	r22, r8
    10f2:	0e 94 5f 0c 	call	0x18be	; 0x18be <fputc>
    10f6:	d1 10       	cpse	r13, r1
    10f8:	da 94       	dec	r13
    10fa:	08 94       	sec
    10fc:	e1 08       	sbc	r14, r1
    10fe:	f1 08       	sbc	r15, r1
    1100:	e1 14       	cp	r14, r1
    1102:	f1 04       	cpc	r15, r1
    1104:	71 f7       	brne	.-36     	; 0x10e2 <vfprintf+0x526>
    1106:	ed c0       	rjmp	.+474    	; 0x12e2 <__stack+0x1e3>
    1108:	84 36       	cpi	r24, 0x64	; 100
    110a:	11 f0       	breq	.+4      	; 0x1110 <__stack+0x11>
    110c:	89 36       	cpi	r24, 0x69	; 105
    110e:	71 f5       	brne	.+92     	; 0x116c <__stack+0x6d>
    1110:	9a 01       	movw	r18, r20
    1112:	17 ff       	sbrs	r17, 7
    1114:	0a c0       	rjmp	.+20     	; 0x112a <__stack+0x2b>
    1116:	2c 5f       	subi	r18, 0xFC	; 252
    1118:	3f 4f       	sbci	r19, 0xFF	; 255
    111a:	3d 87       	std	Y+13, r19	; 0x0d
    111c:	2c 87       	std	Y+12, r18	; 0x0c
    111e:	fa 01       	movw	r30, r20
    1120:	80 81       	ld	r24, Z
    1122:	91 81       	ldd	r25, Z+1	; 0x01
    1124:	a2 81       	ldd	r26, Z+2	; 0x02
    1126:	b3 81       	ldd	r27, Z+3	; 0x03
    1128:	0b c0       	rjmp	.+22     	; 0x1140 <__stack+0x41>
    112a:	2e 5f       	subi	r18, 0xFE	; 254
    112c:	3f 4f       	sbci	r19, 0xFF	; 255
    112e:	3d 87       	std	Y+13, r19	; 0x0d
    1130:	2c 87       	std	Y+12, r18	; 0x0c
    1132:	fa 01       	movw	r30, r20
    1134:	80 81       	ld	r24, Z
    1136:	91 81       	ldd	r25, Z+1	; 0x01
    1138:	aa 27       	eor	r26, r26
    113a:	97 fd       	sbrc	r25, 7
    113c:	a0 95       	com	r26
    113e:	ba 2f       	mov	r27, r26
    1140:	01 2f       	mov	r16, r17
    1142:	0f 76       	andi	r16, 0x6F	; 111
    1144:	b7 ff       	sbrs	r27, 7
    1146:	08 c0       	rjmp	.+16     	; 0x1158 <__stack+0x59>
    1148:	b0 95       	com	r27
    114a:	a0 95       	com	r26
    114c:	90 95       	com	r25
    114e:	81 95       	neg	r24
    1150:	9f 4f       	sbci	r25, 0xFF	; 255
    1152:	af 4f       	sbci	r26, 0xFF	; 255
    1154:	bf 4f       	sbci	r27, 0xFF	; 255
    1156:	00 68       	ori	r16, 0x80	; 128
    1158:	bc 01       	movw	r22, r24
    115a:	cd 01       	movw	r24, r26
    115c:	a1 01       	movw	r20, r2
    115e:	2a e0       	ldi	r18, 0x0A	; 10
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__ultoa_invert>
    1166:	e8 2e       	mov	r14, r24
    1168:	e2 18       	sub	r14, r2
    116a:	41 c0       	rjmp	.+130    	; 0x11ee <__stack+0xef>
    116c:	85 37       	cpi	r24, 0x75	; 117
    116e:	21 f4       	brne	.+8      	; 0x1178 <__stack+0x79>
    1170:	1f 7e       	andi	r17, 0xEF	; 239
    1172:	2a e0       	ldi	r18, 0x0A	; 10
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	20 c0       	rjmp	.+64     	; 0x11b8 <__stack+0xb9>
    1178:	19 7f       	andi	r17, 0xF9	; 249
    117a:	8f 36       	cpi	r24, 0x6F	; 111
    117c:	a9 f0       	breq	.+42     	; 0x11a8 <__stack+0xa9>
    117e:	80 37       	cpi	r24, 0x70	; 112
    1180:	20 f4       	brcc	.+8      	; 0x118a <__stack+0x8b>
    1182:	88 35       	cpi	r24, 0x58	; 88
    1184:	09 f0       	breq	.+2      	; 0x1188 <__stack+0x89>
    1186:	b0 c0       	rjmp	.+352    	; 0x12e8 <__stack+0x1e9>
    1188:	0b c0       	rjmp	.+22     	; 0x11a0 <__stack+0xa1>
    118a:	80 37       	cpi	r24, 0x70	; 112
    118c:	21 f0       	breq	.+8      	; 0x1196 <__stack+0x97>
    118e:	88 37       	cpi	r24, 0x78	; 120
    1190:	09 f0       	breq	.+2      	; 0x1194 <__stack+0x95>
    1192:	aa c0       	rjmp	.+340    	; 0x12e8 <__stack+0x1e9>
    1194:	01 c0       	rjmp	.+2      	; 0x1198 <__stack+0x99>
    1196:	10 61       	ori	r17, 0x10	; 16
    1198:	14 ff       	sbrs	r17, 4
    119a:	09 c0       	rjmp	.+18     	; 0x11ae <__stack+0xaf>
    119c:	14 60       	ori	r17, 0x04	; 4
    119e:	07 c0       	rjmp	.+14     	; 0x11ae <__stack+0xaf>
    11a0:	14 ff       	sbrs	r17, 4
    11a2:	08 c0       	rjmp	.+16     	; 0x11b4 <__stack+0xb5>
    11a4:	16 60       	ori	r17, 0x06	; 6
    11a6:	06 c0       	rjmp	.+12     	; 0x11b4 <__stack+0xb5>
    11a8:	28 e0       	ldi	r18, 0x08	; 8
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	05 c0       	rjmp	.+10     	; 0x11b8 <__stack+0xb9>
    11ae:	20 e1       	ldi	r18, 0x10	; 16
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <__stack+0xb9>
    11b4:	20 e1       	ldi	r18, 0x10	; 16
    11b6:	32 e0       	ldi	r19, 0x02	; 2
    11b8:	ca 01       	movw	r24, r20
    11ba:	17 ff       	sbrs	r17, 7
    11bc:	09 c0       	rjmp	.+18     	; 0x11d0 <__stack+0xd1>
    11be:	04 96       	adiw	r24, 0x04	; 4
    11c0:	9d 87       	std	Y+13, r25	; 0x0d
    11c2:	8c 87       	std	Y+12, r24	; 0x0c
    11c4:	fa 01       	movw	r30, r20
    11c6:	60 81       	ld	r22, Z
    11c8:	71 81       	ldd	r23, Z+1	; 0x01
    11ca:	82 81       	ldd	r24, Z+2	; 0x02
    11cc:	93 81       	ldd	r25, Z+3	; 0x03
    11ce:	08 c0       	rjmp	.+16     	; 0x11e0 <__stack+0xe1>
    11d0:	02 96       	adiw	r24, 0x02	; 2
    11d2:	9d 87       	std	Y+13, r25	; 0x0d
    11d4:	8c 87       	std	Y+12, r24	; 0x0c
    11d6:	fa 01       	movw	r30, r20
    11d8:	60 81       	ld	r22, Z
    11da:	71 81       	ldd	r23, Z+1	; 0x01
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	a1 01       	movw	r20, r2
    11e2:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__ultoa_invert>
    11e6:	e8 2e       	mov	r14, r24
    11e8:	e2 18       	sub	r14, r2
    11ea:	01 2f       	mov	r16, r17
    11ec:	0f 77       	andi	r16, 0x7F	; 127
    11ee:	06 ff       	sbrs	r16, 6
    11f0:	09 c0       	rjmp	.+18     	; 0x1204 <__stack+0x105>
    11f2:	0e 7f       	andi	r16, 0xFE	; 254
    11f4:	ef 14       	cp	r14, r15
    11f6:	30 f4       	brcc	.+12     	; 0x1204 <__stack+0x105>
    11f8:	04 ff       	sbrs	r16, 4
    11fa:	06 c0       	rjmp	.+12     	; 0x1208 <__stack+0x109>
    11fc:	02 fd       	sbrc	r16, 2
    11fe:	04 c0       	rjmp	.+8      	; 0x1208 <__stack+0x109>
    1200:	0f 7e       	andi	r16, 0xEF	; 239
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <__stack+0x109>
    1204:	1e 2d       	mov	r17, r14
    1206:	01 c0       	rjmp	.+2      	; 0x120a <__stack+0x10b>
    1208:	1f 2d       	mov	r17, r15
    120a:	80 2f       	mov	r24, r16
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	04 ff       	sbrs	r16, 4
    1210:	0c c0       	rjmp	.+24     	; 0x122a <__stack+0x12b>
    1212:	fe 01       	movw	r30, r28
    1214:	ee 0d       	add	r30, r14
    1216:	f1 1d       	adc	r31, r1
    1218:	20 81       	ld	r18, Z
    121a:	20 33       	cpi	r18, 0x30	; 48
    121c:	11 f4       	brne	.+4      	; 0x1222 <__stack+0x123>
    121e:	09 7e       	andi	r16, 0xE9	; 233
    1220:	09 c0       	rjmp	.+18     	; 0x1234 <__stack+0x135>
    1222:	02 ff       	sbrs	r16, 2
    1224:	06 c0       	rjmp	.+12     	; 0x1232 <__stack+0x133>
    1226:	1e 5f       	subi	r17, 0xFE	; 254
    1228:	05 c0       	rjmp	.+10     	; 0x1234 <__stack+0x135>
    122a:	86 78       	andi	r24, 0x86	; 134
    122c:	90 70       	andi	r25, 0x00	; 0
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	09 f0       	breq	.+2      	; 0x1234 <__stack+0x135>
    1232:	1f 5f       	subi	r17, 0xFF	; 255
    1234:	a0 2e       	mov	r10, r16
    1236:	bb 24       	eor	r11, r11
    1238:	03 fd       	sbrc	r16, 3
    123a:	12 c0       	rjmp	.+36     	; 0x1260 <__stack+0x161>
    123c:	00 ff       	sbrs	r16, 0
    123e:	0d c0       	rjmp	.+26     	; 0x125a <__stack+0x15b>
    1240:	fe 2c       	mov	r15, r14
    1242:	1d 15       	cp	r17, r13
    1244:	50 f4       	brcc	.+20     	; 0x125a <__stack+0x15b>
    1246:	fd 0c       	add	r15, r13
    1248:	f1 1a       	sub	r15, r17
    124a:	1d 2d       	mov	r17, r13
    124c:	06 c0       	rjmp	.+12     	; 0x125a <__stack+0x15b>
    124e:	80 e2       	ldi	r24, 0x20	; 32
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	b4 01       	movw	r22, r8
    1254:	0e 94 5f 0c 	call	0x18be	; 0x18be <fputc>
    1258:	1f 5f       	subi	r17, 0xFF	; 255
    125a:	1d 15       	cp	r17, r13
    125c:	c0 f3       	brcs	.-16     	; 0x124e <__stack+0x14f>
    125e:	04 c0       	rjmp	.+8      	; 0x1268 <__stack+0x169>
    1260:	1d 15       	cp	r17, r13
    1262:	10 f4       	brcc	.+4      	; 0x1268 <__stack+0x169>
    1264:	d1 1a       	sub	r13, r17
    1266:	01 c0       	rjmp	.+2      	; 0x126a <__stack+0x16b>
    1268:	dd 24       	eor	r13, r13
    126a:	a4 fe       	sbrs	r10, 4
    126c:	0f c0       	rjmp	.+30     	; 0x128c <__stack+0x18d>
    126e:	80 e3       	ldi	r24, 0x30	; 48
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	b4 01       	movw	r22, r8
    1274:	0e 94 5f 0c 	call	0x18be	; 0x18be <fputc>
    1278:	a2 fe       	sbrs	r10, 2
    127a:	1f c0       	rjmp	.+62     	; 0x12ba <__stack+0x1bb>
    127c:	a1 fe       	sbrs	r10, 1
    127e:	03 c0       	rjmp	.+6      	; 0x1286 <__stack+0x187>
    1280:	88 e5       	ldi	r24, 0x58	; 88
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	10 c0       	rjmp	.+32     	; 0x12a6 <__stack+0x1a7>
    1286:	88 e7       	ldi	r24, 0x78	; 120
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	0d c0       	rjmp	.+26     	; 0x12a6 <__stack+0x1a7>
    128c:	c5 01       	movw	r24, r10
    128e:	86 78       	andi	r24, 0x86	; 134
    1290:	90 70       	andi	r25, 0x00	; 0
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	91 f0       	breq	.+36     	; 0x12ba <__stack+0x1bb>
    1296:	a1 fc       	sbrc	r10, 1
    1298:	02 c0       	rjmp	.+4      	; 0x129e <__stack+0x19f>
    129a:	80 e2       	ldi	r24, 0x20	; 32
    129c:	01 c0       	rjmp	.+2      	; 0x12a0 <__stack+0x1a1>
    129e:	8b e2       	ldi	r24, 0x2B	; 43
    12a0:	07 fd       	sbrc	r16, 7
    12a2:	8d e2       	ldi	r24, 0x2D	; 45
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	b4 01       	movw	r22, r8
    12a8:	0e 94 5f 0c 	call	0x18be	; 0x18be <fputc>
    12ac:	06 c0       	rjmp	.+12     	; 0x12ba <__stack+0x1bb>
    12ae:	80 e3       	ldi	r24, 0x30	; 48
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	b4 01       	movw	r22, r8
    12b4:	0e 94 5f 0c 	call	0x18be	; 0x18be <fputc>
    12b8:	fa 94       	dec	r15
    12ba:	ef 14       	cp	r14, r15
    12bc:	c0 f3       	brcs	.-16     	; 0x12ae <__stack+0x1af>
    12be:	ea 94       	dec	r14
    12c0:	f1 01       	movw	r30, r2
    12c2:	ee 0d       	add	r30, r14
    12c4:	f1 1d       	adc	r31, r1
    12c6:	80 81       	ld	r24, Z
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	b4 01       	movw	r22, r8
    12cc:	0e 94 5f 0c 	call	0x18be	; 0x18be <fputc>
    12d0:	ee 20       	and	r14, r14
    12d2:	a9 f7       	brne	.-22     	; 0x12be <__stack+0x1bf>
    12d4:	06 c0       	rjmp	.+12     	; 0x12e2 <__stack+0x1e3>
    12d6:	80 e2       	ldi	r24, 0x20	; 32
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	b4 01       	movw	r22, r8
    12dc:	0e 94 5f 0c 	call	0x18be	; 0x18be <fputc>
    12e0:	da 94       	dec	r13
    12e2:	dd 20       	and	r13, r13
    12e4:	c1 f7       	brne	.-16     	; 0x12d6 <__stack+0x1d7>
    12e6:	8e cc       	rjmp	.-1764   	; 0xc04 <vfprintf+0x48>
    12e8:	f4 01       	movw	r30, r8
    12ea:	86 81       	ldd	r24, Z+6	; 0x06
    12ec:	97 81       	ldd	r25, Z+7	; 0x07
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <__stack+0x1f5>
    12f0:	8f ef       	ldi	r24, 0xFF	; 255
    12f2:	9f ef       	ldi	r25, 0xFF	; 255
    12f4:	65 96       	adiw	r28, 0x15	; 21
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	cd bf       	out	0x3d, r28	; 61
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	1f 91       	pop	r17
    1306:	0f 91       	pop	r16
    1308:	ff 90       	pop	r15
    130a:	ef 90       	pop	r14
    130c:	df 90       	pop	r13
    130e:	cf 90       	pop	r12
    1310:	bf 90       	pop	r11
    1312:	af 90       	pop	r10
    1314:	9f 90       	pop	r9
    1316:	8f 90       	pop	r8
    1318:	7f 90       	pop	r7
    131a:	6f 90       	pop	r6
    131c:	5f 90       	pop	r5
    131e:	4f 90       	pop	r4
    1320:	3f 90       	pop	r3
    1322:	2f 90       	pop	r2
    1324:	08 95       	ret

00001326 <__subsf3>:
    1326:	50 58       	subi	r21, 0x80	; 128

00001328 <__addsf3>:
    1328:	bb 27       	eor	r27, r27
    132a:	aa 27       	eor	r26, r26
    132c:	0e d0       	rcall	.+28     	; 0x134a <__addsf3x>
    132e:	38 c1       	rjmp	.+624    	; 0x15a0 <__fp_round>
    1330:	29 d1       	rcall	.+594    	; 0x1584 <__fp_pscA>
    1332:	30 f0       	brcs	.+12     	; 0x1340 <__addsf3+0x18>
    1334:	2e d1       	rcall	.+604    	; 0x1592 <__fp_pscB>
    1336:	20 f0       	brcs	.+8      	; 0x1340 <__addsf3+0x18>
    1338:	31 f4       	brne	.+12     	; 0x1346 <__addsf3+0x1e>
    133a:	9f 3f       	cpi	r25, 0xFF	; 255
    133c:	11 f4       	brne	.+4      	; 0x1342 <__addsf3+0x1a>
    133e:	1e f4       	brtc	.+6      	; 0x1346 <__addsf3+0x1e>
    1340:	1e c1       	rjmp	.+572    	; 0x157e <__fp_nan>
    1342:	0e f4       	brtc	.+2      	; 0x1346 <__addsf3+0x1e>
    1344:	e0 95       	com	r30
    1346:	e7 fb       	bst	r30, 7
    1348:	14 c1       	rjmp	.+552    	; 0x1572 <__fp_inf>

0000134a <__addsf3x>:
    134a:	e9 2f       	mov	r30, r25
    134c:	3a d1       	rcall	.+628    	; 0x15c2 <__fp_split3>
    134e:	80 f3       	brcs	.-32     	; 0x1330 <__addsf3+0x8>
    1350:	ba 17       	cp	r27, r26
    1352:	62 07       	cpc	r22, r18
    1354:	73 07       	cpc	r23, r19
    1356:	84 07       	cpc	r24, r20
    1358:	95 07       	cpc	r25, r21
    135a:	18 f0       	brcs	.+6      	; 0x1362 <__addsf3x+0x18>
    135c:	71 f4       	brne	.+28     	; 0x137a <__addsf3x+0x30>
    135e:	9e f5       	brtc	.+102    	; 0x13c6 <__addsf3x+0x7c>
    1360:	52 c1       	rjmp	.+676    	; 0x1606 <__fp_zero>
    1362:	0e f4       	brtc	.+2      	; 0x1366 <__addsf3x+0x1c>
    1364:	e0 95       	com	r30
    1366:	0b 2e       	mov	r0, r27
    1368:	ba 2f       	mov	r27, r26
    136a:	a0 2d       	mov	r26, r0
    136c:	0b 01       	movw	r0, r22
    136e:	b9 01       	movw	r22, r18
    1370:	90 01       	movw	r18, r0
    1372:	0c 01       	movw	r0, r24
    1374:	ca 01       	movw	r24, r20
    1376:	a0 01       	movw	r20, r0
    1378:	11 24       	eor	r1, r1
    137a:	ff 27       	eor	r31, r31
    137c:	59 1b       	sub	r21, r25
    137e:	99 f0       	breq	.+38     	; 0x13a6 <__addsf3x+0x5c>
    1380:	59 3f       	cpi	r21, 0xF9	; 249
    1382:	50 f4       	brcc	.+20     	; 0x1398 <__addsf3x+0x4e>
    1384:	50 3e       	cpi	r21, 0xE0	; 224
    1386:	68 f1       	brcs	.+90     	; 0x13e2 <__addsf3x+0x98>
    1388:	1a 16       	cp	r1, r26
    138a:	f0 40       	sbci	r31, 0x00	; 0
    138c:	a2 2f       	mov	r26, r18
    138e:	23 2f       	mov	r18, r19
    1390:	34 2f       	mov	r19, r20
    1392:	44 27       	eor	r20, r20
    1394:	58 5f       	subi	r21, 0xF8	; 248
    1396:	f3 cf       	rjmp	.-26     	; 0x137e <__addsf3x+0x34>
    1398:	46 95       	lsr	r20
    139a:	37 95       	ror	r19
    139c:	27 95       	ror	r18
    139e:	a7 95       	ror	r26
    13a0:	f0 40       	sbci	r31, 0x00	; 0
    13a2:	53 95       	inc	r21
    13a4:	c9 f7       	brne	.-14     	; 0x1398 <__addsf3x+0x4e>
    13a6:	7e f4       	brtc	.+30     	; 0x13c6 <__addsf3x+0x7c>
    13a8:	1f 16       	cp	r1, r31
    13aa:	ba 0b       	sbc	r27, r26
    13ac:	62 0b       	sbc	r22, r18
    13ae:	73 0b       	sbc	r23, r19
    13b0:	84 0b       	sbc	r24, r20
    13b2:	ba f0       	brmi	.+46     	; 0x13e2 <__addsf3x+0x98>
    13b4:	91 50       	subi	r25, 0x01	; 1
    13b6:	a1 f0       	breq	.+40     	; 0x13e0 <__addsf3x+0x96>
    13b8:	ff 0f       	add	r31, r31
    13ba:	bb 1f       	adc	r27, r27
    13bc:	66 1f       	adc	r22, r22
    13be:	77 1f       	adc	r23, r23
    13c0:	88 1f       	adc	r24, r24
    13c2:	c2 f7       	brpl	.-16     	; 0x13b4 <__addsf3x+0x6a>
    13c4:	0e c0       	rjmp	.+28     	; 0x13e2 <__addsf3x+0x98>
    13c6:	ba 0f       	add	r27, r26
    13c8:	62 1f       	adc	r22, r18
    13ca:	73 1f       	adc	r23, r19
    13cc:	84 1f       	adc	r24, r20
    13ce:	48 f4       	brcc	.+18     	; 0x13e2 <__addsf3x+0x98>
    13d0:	87 95       	ror	r24
    13d2:	77 95       	ror	r23
    13d4:	67 95       	ror	r22
    13d6:	b7 95       	ror	r27
    13d8:	f7 95       	ror	r31
    13da:	9e 3f       	cpi	r25, 0xFE	; 254
    13dc:	08 f0       	brcs	.+2      	; 0x13e0 <__addsf3x+0x96>
    13de:	b3 cf       	rjmp	.-154    	; 0x1346 <__addsf3+0x1e>
    13e0:	93 95       	inc	r25
    13e2:	88 0f       	add	r24, r24
    13e4:	08 f0       	brcs	.+2      	; 0x13e8 <__addsf3x+0x9e>
    13e6:	99 27       	eor	r25, r25
    13e8:	ee 0f       	add	r30, r30
    13ea:	97 95       	ror	r25
    13ec:	87 95       	ror	r24
    13ee:	08 95       	ret

000013f0 <__cmpsf2>:
    13f0:	9c d0       	rcall	.+312    	; 0x152a <__fp_cmp>
    13f2:	08 f4       	brcc	.+2      	; 0x13f6 <__cmpsf2+0x6>
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	08 95       	ret

000013f8 <__divsf3>:
    13f8:	0c d0       	rcall	.+24     	; 0x1412 <__divsf3x>
    13fa:	d2 c0       	rjmp	.+420    	; 0x15a0 <__fp_round>
    13fc:	ca d0       	rcall	.+404    	; 0x1592 <__fp_pscB>
    13fe:	40 f0       	brcs	.+16     	; 0x1410 <__divsf3+0x18>
    1400:	c1 d0       	rcall	.+386    	; 0x1584 <__fp_pscA>
    1402:	30 f0       	brcs	.+12     	; 0x1410 <__divsf3+0x18>
    1404:	21 f4       	brne	.+8      	; 0x140e <__divsf3+0x16>
    1406:	5f 3f       	cpi	r21, 0xFF	; 255
    1408:	19 f0       	breq	.+6      	; 0x1410 <__divsf3+0x18>
    140a:	b3 c0       	rjmp	.+358    	; 0x1572 <__fp_inf>
    140c:	51 11       	cpse	r21, r1
    140e:	fc c0       	rjmp	.+504    	; 0x1608 <__fp_szero>
    1410:	b6 c0       	rjmp	.+364    	; 0x157e <__fp_nan>

00001412 <__divsf3x>:
    1412:	d7 d0       	rcall	.+430    	; 0x15c2 <__fp_split3>
    1414:	98 f3       	brcs	.-26     	; 0x13fc <__divsf3+0x4>

00001416 <__divsf3_pse>:
    1416:	99 23       	and	r25, r25
    1418:	c9 f3       	breq	.-14     	; 0x140c <__divsf3+0x14>
    141a:	55 23       	and	r21, r21
    141c:	b1 f3       	breq	.-20     	; 0x140a <__divsf3+0x12>
    141e:	95 1b       	sub	r25, r21
    1420:	55 0b       	sbc	r21, r21
    1422:	bb 27       	eor	r27, r27
    1424:	aa 27       	eor	r26, r26
    1426:	62 17       	cp	r22, r18
    1428:	73 07       	cpc	r23, r19
    142a:	84 07       	cpc	r24, r20
    142c:	38 f0       	brcs	.+14     	; 0x143c <__divsf3_pse+0x26>
    142e:	9f 5f       	subi	r25, 0xFF	; 255
    1430:	5f 4f       	sbci	r21, 0xFF	; 255
    1432:	22 0f       	add	r18, r18
    1434:	33 1f       	adc	r19, r19
    1436:	44 1f       	adc	r20, r20
    1438:	aa 1f       	adc	r26, r26
    143a:	a9 f3       	breq	.-22     	; 0x1426 <__divsf3_pse+0x10>
    143c:	33 d0       	rcall	.+102    	; 0x14a4 <__divsf3_pse+0x8e>
    143e:	0e 2e       	mov	r0, r30
    1440:	3a f0       	brmi	.+14     	; 0x1450 <__divsf3_pse+0x3a>
    1442:	e0 e8       	ldi	r30, 0x80	; 128
    1444:	30 d0       	rcall	.+96     	; 0x14a6 <__divsf3_pse+0x90>
    1446:	91 50       	subi	r25, 0x01	; 1
    1448:	50 40       	sbci	r21, 0x00	; 0
    144a:	e6 95       	lsr	r30
    144c:	00 1c       	adc	r0, r0
    144e:	ca f7       	brpl	.-14     	; 0x1442 <__divsf3_pse+0x2c>
    1450:	29 d0       	rcall	.+82     	; 0x14a4 <__divsf3_pse+0x8e>
    1452:	fe 2f       	mov	r31, r30
    1454:	27 d0       	rcall	.+78     	; 0x14a4 <__divsf3_pse+0x8e>
    1456:	66 0f       	add	r22, r22
    1458:	77 1f       	adc	r23, r23
    145a:	88 1f       	adc	r24, r24
    145c:	bb 1f       	adc	r27, r27
    145e:	26 17       	cp	r18, r22
    1460:	37 07       	cpc	r19, r23
    1462:	48 07       	cpc	r20, r24
    1464:	ab 07       	cpc	r26, r27
    1466:	b0 e8       	ldi	r27, 0x80	; 128
    1468:	09 f0       	breq	.+2      	; 0x146c <__divsf3_pse+0x56>
    146a:	bb 0b       	sbc	r27, r27
    146c:	80 2d       	mov	r24, r0
    146e:	bf 01       	movw	r22, r30
    1470:	ff 27       	eor	r31, r31
    1472:	93 58       	subi	r25, 0x83	; 131
    1474:	5f 4f       	sbci	r21, 0xFF	; 255
    1476:	2a f0       	brmi	.+10     	; 0x1482 <__divsf3_pse+0x6c>
    1478:	9e 3f       	cpi	r25, 0xFE	; 254
    147a:	51 05       	cpc	r21, r1
    147c:	68 f0       	brcs	.+26     	; 0x1498 <__divsf3_pse+0x82>
    147e:	79 c0       	rjmp	.+242    	; 0x1572 <__fp_inf>
    1480:	c3 c0       	rjmp	.+390    	; 0x1608 <__fp_szero>
    1482:	5f 3f       	cpi	r21, 0xFF	; 255
    1484:	ec f3       	brlt	.-6      	; 0x1480 <__divsf3_pse+0x6a>
    1486:	98 3e       	cpi	r25, 0xE8	; 232
    1488:	dc f3       	brlt	.-10     	; 0x1480 <__divsf3_pse+0x6a>
    148a:	86 95       	lsr	r24
    148c:	77 95       	ror	r23
    148e:	67 95       	ror	r22
    1490:	b7 95       	ror	r27
    1492:	f7 95       	ror	r31
    1494:	9f 5f       	subi	r25, 0xFF	; 255
    1496:	c9 f7       	brne	.-14     	; 0x148a <__divsf3_pse+0x74>
    1498:	88 0f       	add	r24, r24
    149a:	91 1d       	adc	r25, r1
    149c:	96 95       	lsr	r25
    149e:	87 95       	ror	r24
    14a0:	97 f9       	bld	r25, 7
    14a2:	08 95       	ret
    14a4:	e1 e0       	ldi	r30, 0x01	; 1
    14a6:	66 0f       	add	r22, r22
    14a8:	77 1f       	adc	r23, r23
    14aa:	88 1f       	adc	r24, r24
    14ac:	bb 1f       	adc	r27, r27
    14ae:	62 17       	cp	r22, r18
    14b0:	73 07       	cpc	r23, r19
    14b2:	84 07       	cpc	r24, r20
    14b4:	ba 07       	cpc	r27, r26
    14b6:	20 f0       	brcs	.+8      	; 0x14c0 <__divsf3_pse+0xaa>
    14b8:	62 1b       	sub	r22, r18
    14ba:	73 0b       	sbc	r23, r19
    14bc:	84 0b       	sbc	r24, r20
    14be:	ba 0b       	sbc	r27, r26
    14c0:	ee 1f       	adc	r30, r30
    14c2:	88 f7       	brcc	.-30     	; 0x14a6 <__divsf3_pse+0x90>
    14c4:	e0 95       	com	r30
    14c6:	08 95       	ret

000014c8 <__fixsfsi>:
    14c8:	04 d0       	rcall	.+8      	; 0x14d2 <__fixunssfsi>
    14ca:	68 94       	set
    14cc:	b1 11       	cpse	r27, r1
    14ce:	9c c0       	rjmp	.+312    	; 0x1608 <__fp_szero>
    14d0:	08 95       	ret

000014d2 <__fixunssfsi>:
    14d2:	7f d0       	rcall	.+254    	; 0x15d2 <__fp_splitA>
    14d4:	88 f0       	brcs	.+34     	; 0x14f8 <__fixunssfsi+0x26>
    14d6:	9f 57       	subi	r25, 0x7F	; 127
    14d8:	90 f0       	brcs	.+36     	; 0x14fe <__fixunssfsi+0x2c>
    14da:	b9 2f       	mov	r27, r25
    14dc:	99 27       	eor	r25, r25
    14de:	b7 51       	subi	r27, 0x17	; 23
    14e0:	a0 f0       	brcs	.+40     	; 0x150a <__fixunssfsi+0x38>
    14e2:	d1 f0       	breq	.+52     	; 0x1518 <__fixunssfsi+0x46>
    14e4:	66 0f       	add	r22, r22
    14e6:	77 1f       	adc	r23, r23
    14e8:	88 1f       	adc	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	1a f0       	brmi	.+6      	; 0x14f4 <__fixunssfsi+0x22>
    14ee:	ba 95       	dec	r27
    14f0:	c9 f7       	brne	.-14     	; 0x14e4 <__fixunssfsi+0x12>
    14f2:	12 c0       	rjmp	.+36     	; 0x1518 <__fixunssfsi+0x46>
    14f4:	b1 30       	cpi	r27, 0x01	; 1
    14f6:	81 f0       	breq	.+32     	; 0x1518 <__fixunssfsi+0x46>
    14f8:	86 d0       	rcall	.+268    	; 0x1606 <__fp_zero>
    14fa:	b1 e0       	ldi	r27, 0x01	; 1
    14fc:	08 95       	ret
    14fe:	83 c0       	rjmp	.+262    	; 0x1606 <__fp_zero>
    1500:	67 2f       	mov	r22, r23
    1502:	78 2f       	mov	r23, r24
    1504:	88 27       	eor	r24, r24
    1506:	b8 5f       	subi	r27, 0xF8	; 248
    1508:	39 f0       	breq	.+14     	; 0x1518 <__fixunssfsi+0x46>
    150a:	b9 3f       	cpi	r27, 0xF9	; 249
    150c:	cc f3       	brlt	.-14     	; 0x1500 <__fixunssfsi+0x2e>
    150e:	86 95       	lsr	r24
    1510:	77 95       	ror	r23
    1512:	67 95       	ror	r22
    1514:	b3 95       	inc	r27
    1516:	d9 f7       	brne	.-10     	; 0x150e <__fixunssfsi+0x3c>
    1518:	3e f4       	brtc	.+14     	; 0x1528 <__fixunssfsi+0x56>
    151a:	90 95       	com	r25
    151c:	80 95       	com	r24
    151e:	70 95       	com	r23
    1520:	61 95       	neg	r22
    1522:	7f 4f       	sbci	r23, 0xFF	; 255
    1524:	8f 4f       	sbci	r24, 0xFF	; 255
    1526:	9f 4f       	sbci	r25, 0xFF	; 255
    1528:	08 95       	ret

0000152a <__fp_cmp>:
    152a:	99 0f       	add	r25, r25
    152c:	00 08       	sbc	r0, r0
    152e:	55 0f       	add	r21, r21
    1530:	aa 0b       	sbc	r26, r26
    1532:	e0 e8       	ldi	r30, 0x80	; 128
    1534:	fe ef       	ldi	r31, 0xFE	; 254
    1536:	16 16       	cp	r1, r22
    1538:	17 06       	cpc	r1, r23
    153a:	e8 07       	cpc	r30, r24
    153c:	f9 07       	cpc	r31, r25
    153e:	c0 f0       	brcs	.+48     	; 0x1570 <__fp_cmp+0x46>
    1540:	12 16       	cp	r1, r18
    1542:	13 06       	cpc	r1, r19
    1544:	e4 07       	cpc	r30, r20
    1546:	f5 07       	cpc	r31, r21
    1548:	98 f0       	brcs	.+38     	; 0x1570 <__fp_cmp+0x46>
    154a:	62 1b       	sub	r22, r18
    154c:	73 0b       	sbc	r23, r19
    154e:	84 0b       	sbc	r24, r20
    1550:	95 0b       	sbc	r25, r21
    1552:	39 f4       	brne	.+14     	; 0x1562 <__fp_cmp+0x38>
    1554:	0a 26       	eor	r0, r26
    1556:	61 f0       	breq	.+24     	; 0x1570 <__fp_cmp+0x46>
    1558:	23 2b       	or	r18, r19
    155a:	24 2b       	or	r18, r20
    155c:	25 2b       	or	r18, r21
    155e:	21 f4       	brne	.+8      	; 0x1568 <__fp_cmp+0x3e>
    1560:	08 95       	ret
    1562:	0a 26       	eor	r0, r26
    1564:	09 f4       	brne	.+2      	; 0x1568 <__fp_cmp+0x3e>
    1566:	a1 40       	sbci	r26, 0x01	; 1
    1568:	a6 95       	lsr	r26
    156a:	8f ef       	ldi	r24, 0xFF	; 255
    156c:	81 1d       	adc	r24, r1
    156e:	81 1d       	adc	r24, r1
    1570:	08 95       	ret

00001572 <__fp_inf>:
    1572:	97 f9       	bld	r25, 7
    1574:	9f 67       	ori	r25, 0x7F	; 127
    1576:	80 e8       	ldi	r24, 0x80	; 128
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	08 95       	ret

0000157e <__fp_nan>:
    157e:	9f ef       	ldi	r25, 0xFF	; 255
    1580:	80 ec       	ldi	r24, 0xC0	; 192
    1582:	08 95       	ret

00001584 <__fp_pscA>:
    1584:	00 24       	eor	r0, r0
    1586:	0a 94       	dec	r0
    1588:	16 16       	cp	r1, r22
    158a:	17 06       	cpc	r1, r23
    158c:	18 06       	cpc	r1, r24
    158e:	09 06       	cpc	r0, r25
    1590:	08 95       	ret

00001592 <__fp_pscB>:
    1592:	00 24       	eor	r0, r0
    1594:	0a 94       	dec	r0
    1596:	12 16       	cp	r1, r18
    1598:	13 06       	cpc	r1, r19
    159a:	14 06       	cpc	r1, r20
    159c:	05 06       	cpc	r0, r21
    159e:	08 95       	ret

000015a0 <__fp_round>:
    15a0:	09 2e       	mov	r0, r25
    15a2:	03 94       	inc	r0
    15a4:	00 0c       	add	r0, r0
    15a6:	11 f4       	brne	.+4      	; 0x15ac <__fp_round+0xc>
    15a8:	88 23       	and	r24, r24
    15aa:	52 f0       	brmi	.+20     	; 0x15c0 <__fp_round+0x20>
    15ac:	bb 0f       	add	r27, r27
    15ae:	40 f4       	brcc	.+16     	; 0x15c0 <__fp_round+0x20>
    15b0:	bf 2b       	or	r27, r31
    15b2:	11 f4       	brne	.+4      	; 0x15b8 <__fp_round+0x18>
    15b4:	60 ff       	sbrs	r22, 0
    15b6:	04 c0       	rjmp	.+8      	; 0x15c0 <__fp_round+0x20>
    15b8:	6f 5f       	subi	r22, 0xFF	; 255
    15ba:	7f 4f       	sbci	r23, 0xFF	; 255
    15bc:	8f 4f       	sbci	r24, 0xFF	; 255
    15be:	9f 4f       	sbci	r25, 0xFF	; 255
    15c0:	08 95       	ret

000015c2 <__fp_split3>:
    15c2:	57 fd       	sbrc	r21, 7
    15c4:	90 58       	subi	r25, 0x80	; 128
    15c6:	44 0f       	add	r20, r20
    15c8:	55 1f       	adc	r21, r21
    15ca:	59 f0       	breq	.+22     	; 0x15e2 <__fp_splitA+0x10>
    15cc:	5f 3f       	cpi	r21, 0xFF	; 255
    15ce:	71 f0       	breq	.+28     	; 0x15ec <__fp_splitA+0x1a>
    15d0:	47 95       	ror	r20

000015d2 <__fp_splitA>:
    15d2:	88 0f       	add	r24, r24
    15d4:	97 fb       	bst	r25, 7
    15d6:	99 1f       	adc	r25, r25
    15d8:	61 f0       	breq	.+24     	; 0x15f2 <__fp_splitA+0x20>
    15da:	9f 3f       	cpi	r25, 0xFF	; 255
    15dc:	79 f0       	breq	.+30     	; 0x15fc <__fp_splitA+0x2a>
    15de:	87 95       	ror	r24
    15e0:	08 95       	ret
    15e2:	12 16       	cp	r1, r18
    15e4:	13 06       	cpc	r1, r19
    15e6:	14 06       	cpc	r1, r20
    15e8:	55 1f       	adc	r21, r21
    15ea:	f2 cf       	rjmp	.-28     	; 0x15d0 <__fp_split3+0xe>
    15ec:	46 95       	lsr	r20
    15ee:	f1 df       	rcall	.-30     	; 0x15d2 <__fp_splitA>
    15f0:	08 c0       	rjmp	.+16     	; 0x1602 <__fp_splitA+0x30>
    15f2:	16 16       	cp	r1, r22
    15f4:	17 06       	cpc	r1, r23
    15f6:	18 06       	cpc	r1, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	f1 cf       	rjmp	.-30     	; 0x15de <__fp_splitA+0xc>
    15fc:	86 95       	lsr	r24
    15fe:	71 05       	cpc	r23, r1
    1600:	61 05       	cpc	r22, r1
    1602:	08 94       	sec
    1604:	08 95       	ret

00001606 <__fp_zero>:
    1606:	e8 94       	clt

00001608 <__fp_szero>:
    1608:	bb 27       	eor	r27, r27
    160a:	66 27       	eor	r22, r22
    160c:	77 27       	eor	r23, r23
    160e:	cb 01       	movw	r24, r22
    1610:	97 f9       	bld	r25, 7
    1612:	08 95       	ret

00001614 <__gesf2>:
    1614:	8a df       	rcall	.-236    	; 0x152a <__fp_cmp>
    1616:	08 f4       	brcc	.+2      	; 0x161a <__gesf2+0x6>
    1618:	8f ef       	ldi	r24, 0xFF	; 255
    161a:	08 95       	ret

0000161c <__mulsf3>:
    161c:	0b d0       	rcall	.+22     	; 0x1634 <__mulsf3x>
    161e:	c0 cf       	rjmp	.-128    	; 0x15a0 <__fp_round>
    1620:	b1 df       	rcall	.-158    	; 0x1584 <__fp_pscA>
    1622:	28 f0       	brcs	.+10     	; 0x162e <__mulsf3+0x12>
    1624:	b6 df       	rcall	.-148    	; 0x1592 <__fp_pscB>
    1626:	18 f0       	brcs	.+6      	; 0x162e <__mulsf3+0x12>
    1628:	95 23       	and	r25, r21
    162a:	09 f0       	breq	.+2      	; 0x162e <__mulsf3+0x12>
    162c:	a2 cf       	rjmp	.-188    	; 0x1572 <__fp_inf>
    162e:	a7 cf       	rjmp	.-178    	; 0x157e <__fp_nan>
    1630:	11 24       	eor	r1, r1
    1632:	ea cf       	rjmp	.-44     	; 0x1608 <__fp_szero>

00001634 <__mulsf3x>:
    1634:	c6 df       	rcall	.-116    	; 0x15c2 <__fp_split3>
    1636:	a0 f3       	brcs	.-24     	; 0x1620 <__mulsf3+0x4>

00001638 <__mulsf3_pse>:
    1638:	95 9f       	mul	r25, r21
    163a:	d1 f3       	breq	.-12     	; 0x1630 <__mulsf3+0x14>
    163c:	95 0f       	add	r25, r21
    163e:	50 e0       	ldi	r21, 0x00	; 0
    1640:	55 1f       	adc	r21, r21
    1642:	62 9f       	mul	r22, r18
    1644:	f0 01       	movw	r30, r0
    1646:	72 9f       	mul	r23, r18
    1648:	bb 27       	eor	r27, r27
    164a:	f0 0d       	add	r31, r0
    164c:	b1 1d       	adc	r27, r1
    164e:	63 9f       	mul	r22, r19
    1650:	aa 27       	eor	r26, r26
    1652:	f0 0d       	add	r31, r0
    1654:	b1 1d       	adc	r27, r1
    1656:	aa 1f       	adc	r26, r26
    1658:	64 9f       	mul	r22, r20
    165a:	66 27       	eor	r22, r22
    165c:	b0 0d       	add	r27, r0
    165e:	a1 1d       	adc	r26, r1
    1660:	66 1f       	adc	r22, r22
    1662:	82 9f       	mul	r24, r18
    1664:	22 27       	eor	r18, r18
    1666:	b0 0d       	add	r27, r0
    1668:	a1 1d       	adc	r26, r1
    166a:	62 1f       	adc	r22, r18
    166c:	73 9f       	mul	r23, r19
    166e:	b0 0d       	add	r27, r0
    1670:	a1 1d       	adc	r26, r1
    1672:	62 1f       	adc	r22, r18
    1674:	83 9f       	mul	r24, r19
    1676:	a0 0d       	add	r26, r0
    1678:	61 1d       	adc	r22, r1
    167a:	22 1f       	adc	r18, r18
    167c:	74 9f       	mul	r23, r20
    167e:	33 27       	eor	r19, r19
    1680:	a0 0d       	add	r26, r0
    1682:	61 1d       	adc	r22, r1
    1684:	23 1f       	adc	r18, r19
    1686:	84 9f       	mul	r24, r20
    1688:	60 0d       	add	r22, r0
    168a:	21 1d       	adc	r18, r1
    168c:	82 2f       	mov	r24, r18
    168e:	76 2f       	mov	r23, r22
    1690:	6a 2f       	mov	r22, r26
    1692:	11 24       	eor	r1, r1
    1694:	9f 57       	subi	r25, 0x7F	; 127
    1696:	50 40       	sbci	r21, 0x00	; 0
    1698:	8a f0       	brmi	.+34     	; 0x16bc <__mulsf3_pse+0x84>
    169a:	e1 f0       	breq	.+56     	; 0x16d4 <__mulsf3_pse+0x9c>
    169c:	88 23       	and	r24, r24
    169e:	4a f0       	brmi	.+18     	; 0x16b2 <__mulsf3_pse+0x7a>
    16a0:	ee 0f       	add	r30, r30
    16a2:	ff 1f       	adc	r31, r31
    16a4:	bb 1f       	adc	r27, r27
    16a6:	66 1f       	adc	r22, r22
    16a8:	77 1f       	adc	r23, r23
    16aa:	88 1f       	adc	r24, r24
    16ac:	91 50       	subi	r25, 0x01	; 1
    16ae:	50 40       	sbci	r21, 0x00	; 0
    16b0:	a9 f7       	brne	.-22     	; 0x169c <__mulsf3_pse+0x64>
    16b2:	9e 3f       	cpi	r25, 0xFE	; 254
    16b4:	51 05       	cpc	r21, r1
    16b6:	70 f0       	brcs	.+28     	; 0x16d4 <__mulsf3_pse+0x9c>
    16b8:	5c cf       	rjmp	.-328    	; 0x1572 <__fp_inf>
    16ba:	a6 cf       	rjmp	.-180    	; 0x1608 <__fp_szero>
    16bc:	5f 3f       	cpi	r21, 0xFF	; 255
    16be:	ec f3       	brlt	.-6      	; 0x16ba <__mulsf3_pse+0x82>
    16c0:	98 3e       	cpi	r25, 0xE8	; 232
    16c2:	dc f3       	brlt	.-10     	; 0x16ba <__mulsf3_pse+0x82>
    16c4:	86 95       	lsr	r24
    16c6:	77 95       	ror	r23
    16c8:	67 95       	ror	r22
    16ca:	b7 95       	ror	r27
    16cc:	f7 95       	ror	r31
    16ce:	e7 95       	ror	r30
    16d0:	9f 5f       	subi	r25, 0xFF	; 255
    16d2:	c1 f7       	brne	.-16     	; 0x16c4 <__mulsf3_pse+0x8c>
    16d4:	fe 2b       	or	r31, r30
    16d6:	88 0f       	add	r24, r24
    16d8:	91 1d       	adc	r25, r1
    16da:	96 95       	lsr	r25
    16dc:	87 95       	ror	r24
    16de:	97 f9       	bld	r25, 7
    16e0:	08 95       	ret

000016e2 <__ftoa_engine>:
    16e2:	28 30       	cpi	r18, 0x08	; 8
    16e4:	08 f0       	brcs	.+2      	; 0x16e8 <__ftoa_engine+0x6>
    16e6:	27 e0       	ldi	r18, 0x07	; 7
    16e8:	33 27       	eor	r19, r19
    16ea:	da 01       	movw	r26, r20
    16ec:	99 0f       	add	r25, r25
    16ee:	31 1d       	adc	r19, r1
    16f0:	87 fd       	sbrc	r24, 7
    16f2:	91 60       	ori	r25, 0x01	; 1
    16f4:	00 96       	adiw	r24, 0x00	; 0
    16f6:	61 05       	cpc	r22, r1
    16f8:	71 05       	cpc	r23, r1
    16fa:	39 f4       	brne	.+14     	; 0x170a <__ftoa_engine+0x28>
    16fc:	32 60       	ori	r19, 0x02	; 2
    16fe:	2e 5f       	subi	r18, 0xFE	; 254
    1700:	3d 93       	st	X+, r19
    1702:	30 e3       	ldi	r19, 0x30	; 48
    1704:	2a 95       	dec	r18
    1706:	e1 f7       	brne	.-8      	; 0x1700 <__ftoa_engine+0x1e>
    1708:	08 95       	ret
    170a:	9f 3f       	cpi	r25, 0xFF	; 255
    170c:	30 f0       	brcs	.+12     	; 0x171a <__ftoa_engine+0x38>
    170e:	80 38       	cpi	r24, 0x80	; 128
    1710:	71 05       	cpc	r23, r1
    1712:	61 05       	cpc	r22, r1
    1714:	09 f0       	breq	.+2      	; 0x1718 <__ftoa_engine+0x36>
    1716:	3c 5f       	subi	r19, 0xFC	; 252
    1718:	3c 5f       	subi	r19, 0xFC	; 252
    171a:	3d 93       	st	X+, r19
    171c:	91 30       	cpi	r25, 0x01	; 1
    171e:	08 f0       	brcs	.+2      	; 0x1722 <__ftoa_engine+0x40>
    1720:	80 68       	ori	r24, 0x80	; 128
    1722:	91 1d       	adc	r25, r1
    1724:	df 93       	push	r29
    1726:	cf 93       	push	r28
    1728:	1f 93       	push	r17
    172a:	0f 93       	push	r16
    172c:	ff 92       	push	r15
    172e:	ef 92       	push	r14
    1730:	19 2f       	mov	r17, r25
    1732:	98 7f       	andi	r25, 0xF8	; 248
    1734:	96 95       	lsr	r25
    1736:	e9 2f       	mov	r30, r25
    1738:	96 95       	lsr	r25
    173a:	96 95       	lsr	r25
    173c:	e9 0f       	add	r30, r25
    173e:	ff 27       	eor	r31, r31
    1740:	e2 51       	subi	r30, 0x12	; 18
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	99 27       	eor	r25, r25
    1746:	33 27       	eor	r19, r19
    1748:	ee 24       	eor	r14, r14
    174a:	ff 24       	eor	r15, r15
    174c:	a7 01       	movw	r20, r14
    174e:	e7 01       	movw	r28, r14
    1750:	05 90       	lpm	r0, Z+
    1752:	08 94       	sec
    1754:	07 94       	ror	r0
    1756:	28 f4       	brcc	.+10     	; 0x1762 <__ftoa_engine+0x80>
    1758:	36 0f       	add	r19, r22
    175a:	e7 1e       	adc	r14, r23
    175c:	f8 1e       	adc	r15, r24
    175e:	49 1f       	adc	r20, r25
    1760:	51 1d       	adc	r21, r1
    1762:	66 0f       	add	r22, r22
    1764:	77 1f       	adc	r23, r23
    1766:	88 1f       	adc	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	06 94       	lsr	r0
    176c:	a1 f7       	brne	.-24     	; 0x1756 <__ftoa_engine+0x74>
    176e:	05 90       	lpm	r0, Z+
    1770:	07 94       	ror	r0
    1772:	28 f4       	brcc	.+10     	; 0x177e <__ftoa_engine+0x9c>
    1774:	e7 0e       	add	r14, r23
    1776:	f8 1e       	adc	r15, r24
    1778:	49 1f       	adc	r20, r25
    177a:	56 1f       	adc	r21, r22
    177c:	c1 1d       	adc	r28, r1
    177e:	77 0f       	add	r23, r23
    1780:	88 1f       	adc	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	66 1f       	adc	r22, r22
    1786:	06 94       	lsr	r0
    1788:	a1 f7       	brne	.-24     	; 0x1772 <__ftoa_engine+0x90>
    178a:	05 90       	lpm	r0, Z+
    178c:	07 94       	ror	r0
    178e:	28 f4       	brcc	.+10     	; 0x179a <__ftoa_engine+0xb8>
    1790:	f8 0e       	add	r15, r24
    1792:	49 1f       	adc	r20, r25
    1794:	56 1f       	adc	r21, r22
    1796:	c7 1f       	adc	r28, r23
    1798:	d1 1d       	adc	r29, r1
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	66 1f       	adc	r22, r22
    17a0:	77 1f       	adc	r23, r23
    17a2:	06 94       	lsr	r0
    17a4:	a1 f7       	brne	.-24     	; 0x178e <__ftoa_engine+0xac>
    17a6:	05 90       	lpm	r0, Z+
    17a8:	07 94       	ror	r0
    17aa:	20 f4       	brcc	.+8      	; 0x17b4 <__ftoa_engine+0xd2>
    17ac:	49 0f       	add	r20, r25
    17ae:	56 1f       	adc	r21, r22
    17b0:	c7 1f       	adc	r28, r23
    17b2:	d8 1f       	adc	r29, r24
    17b4:	99 0f       	add	r25, r25
    17b6:	66 1f       	adc	r22, r22
    17b8:	77 1f       	adc	r23, r23
    17ba:	88 1f       	adc	r24, r24
    17bc:	06 94       	lsr	r0
    17be:	a9 f7       	brne	.-22     	; 0x17aa <__ftoa_engine+0xc8>
    17c0:	84 91       	lpm	r24, Z
    17c2:	10 95       	com	r17
    17c4:	17 70       	andi	r17, 0x07	; 7
    17c6:	41 f0       	breq	.+16     	; 0x17d8 <__ftoa_engine+0xf6>
    17c8:	d6 95       	lsr	r29
    17ca:	c7 95       	ror	r28
    17cc:	57 95       	ror	r21
    17ce:	47 95       	ror	r20
    17d0:	f7 94       	ror	r15
    17d2:	e7 94       	ror	r14
    17d4:	1a 95       	dec	r17
    17d6:	c1 f7       	brne	.-16     	; 0x17c8 <__ftoa_engine+0xe6>
    17d8:	e4 e9       	ldi	r30, 0x94	; 148
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	68 94       	set
    17de:	15 90       	lpm	r1, Z+
    17e0:	15 91       	lpm	r17, Z+
    17e2:	35 91       	lpm	r19, Z+
    17e4:	65 91       	lpm	r22, Z+
    17e6:	95 91       	lpm	r25, Z+
    17e8:	05 90       	lpm	r0, Z+
    17ea:	7f e2       	ldi	r23, 0x2F	; 47
    17ec:	73 95       	inc	r23
    17ee:	e1 18       	sub	r14, r1
    17f0:	f1 0a       	sbc	r15, r17
    17f2:	43 0b       	sbc	r20, r19
    17f4:	56 0b       	sbc	r21, r22
    17f6:	c9 0b       	sbc	r28, r25
    17f8:	d0 09       	sbc	r29, r0
    17fa:	c0 f7       	brcc	.-16     	; 0x17ec <__ftoa_engine+0x10a>
    17fc:	e1 0c       	add	r14, r1
    17fe:	f1 1e       	adc	r15, r17
    1800:	43 1f       	adc	r20, r19
    1802:	56 1f       	adc	r21, r22
    1804:	c9 1f       	adc	r28, r25
    1806:	d0 1d       	adc	r29, r0
    1808:	7e f4       	brtc	.+30     	; 0x1828 <__ftoa_engine+0x146>
    180a:	70 33       	cpi	r23, 0x30	; 48
    180c:	11 f4       	brne	.+4      	; 0x1812 <__ftoa_engine+0x130>
    180e:	8a 95       	dec	r24
    1810:	e6 cf       	rjmp	.-52     	; 0x17de <__ftoa_engine+0xfc>
    1812:	e8 94       	clt
    1814:	01 50       	subi	r16, 0x01	; 1
    1816:	30 f0       	brcs	.+12     	; 0x1824 <__ftoa_engine+0x142>
    1818:	08 0f       	add	r16, r24
    181a:	0a f4       	brpl	.+2      	; 0x181e <__ftoa_engine+0x13c>
    181c:	00 27       	eor	r16, r16
    181e:	02 17       	cp	r16, r18
    1820:	08 f4       	brcc	.+2      	; 0x1824 <__ftoa_engine+0x142>
    1822:	20 2f       	mov	r18, r16
    1824:	23 95       	inc	r18
    1826:	02 2f       	mov	r16, r18
    1828:	7a 33       	cpi	r23, 0x3A	; 58
    182a:	28 f0       	brcs	.+10     	; 0x1836 <__ftoa_engine+0x154>
    182c:	79 e3       	ldi	r23, 0x39	; 57
    182e:	7d 93       	st	X+, r23
    1830:	2a 95       	dec	r18
    1832:	e9 f7       	brne	.-6      	; 0x182e <__ftoa_engine+0x14c>
    1834:	10 c0       	rjmp	.+32     	; 0x1856 <__ftoa_engine+0x174>
    1836:	7d 93       	st	X+, r23
    1838:	2a 95       	dec	r18
    183a:	89 f6       	brne	.-94     	; 0x17de <__ftoa_engine+0xfc>
    183c:	06 94       	lsr	r0
    183e:	97 95       	ror	r25
    1840:	67 95       	ror	r22
    1842:	37 95       	ror	r19
    1844:	17 95       	ror	r17
    1846:	17 94       	ror	r1
    1848:	e1 18       	sub	r14, r1
    184a:	f1 0a       	sbc	r15, r17
    184c:	43 0b       	sbc	r20, r19
    184e:	56 0b       	sbc	r21, r22
    1850:	c9 0b       	sbc	r28, r25
    1852:	d0 09       	sbc	r29, r0
    1854:	98 f0       	brcs	.+38     	; 0x187c <__ftoa_engine+0x19a>
    1856:	23 95       	inc	r18
    1858:	7e 91       	ld	r23, -X
    185a:	73 95       	inc	r23
    185c:	7a 33       	cpi	r23, 0x3A	; 58
    185e:	08 f0       	brcs	.+2      	; 0x1862 <__ftoa_engine+0x180>
    1860:	70 e3       	ldi	r23, 0x30	; 48
    1862:	7c 93       	st	X, r23
    1864:	20 13       	cpse	r18, r16
    1866:	b8 f7       	brcc	.-18     	; 0x1856 <__ftoa_engine+0x174>
    1868:	7e 91       	ld	r23, -X
    186a:	70 61       	ori	r23, 0x10	; 16
    186c:	7d 93       	st	X+, r23
    186e:	30 f0       	brcs	.+12     	; 0x187c <__ftoa_engine+0x19a>
    1870:	83 95       	inc	r24
    1872:	71 e3       	ldi	r23, 0x31	; 49
    1874:	7d 93       	st	X+, r23
    1876:	70 e3       	ldi	r23, 0x30	; 48
    1878:	2a 95       	dec	r18
    187a:	e1 f7       	brne	.-8      	; 0x1874 <__ftoa_engine+0x192>
    187c:	11 24       	eor	r1, r1
    187e:	ef 90       	pop	r14
    1880:	ff 90       	pop	r15
    1882:	0f 91       	pop	r16
    1884:	1f 91       	pop	r17
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	99 27       	eor	r25, r25
    188c:	87 fd       	sbrc	r24, 7
    188e:	90 95       	com	r25
    1890:	08 95       	ret

00001892 <strnlen_P>:
    1892:	fc 01       	movw	r30, r24
    1894:	05 90       	lpm	r0, Z+
    1896:	61 50       	subi	r22, 0x01	; 1
    1898:	70 40       	sbci	r23, 0x00	; 0
    189a:	01 10       	cpse	r0, r1
    189c:	d8 f7       	brcc	.-10     	; 0x1894 <strnlen_P+0x2>
    189e:	80 95       	com	r24
    18a0:	90 95       	com	r25
    18a2:	8e 0f       	add	r24, r30
    18a4:	9f 1f       	adc	r25, r31
    18a6:	08 95       	ret

000018a8 <strnlen>:
    18a8:	fc 01       	movw	r30, r24
    18aa:	61 50       	subi	r22, 0x01	; 1
    18ac:	70 40       	sbci	r23, 0x00	; 0
    18ae:	01 90       	ld	r0, Z+
    18b0:	01 10       	cpse	r0, r1
    18b2:	d8 f7       	brcc	.-10     	; 0x18aa <strnlen+0x2>
    18b4:	80 95       	com	r24
    18b6:	90 95       	com	r25
    18b8:	8e 0f       	add	r24, r30
    18ba:	9f 1f       	adc	r25, r31
    18bc:	08 95       	ret

000018be <fputc>:
    18be:	0f 93       	push	r16
    18c0:	1f 93       	push	r17
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	8c 01       	movw	r16, r24
    18c8:	eb 01       	movw	r28, r22
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	81 ff       	sbrs	r24, 1
    18ce:	1b c0       	rjmp	.+54     	; 0x1906 <fputc+0x48>
    18d0:	82 ff       	sbrs	r24, 2
    18d2:	0d c0       	rjmp	.+26     	; 0x18ee <fputc+0x30>
    18d4:	2e 81       	ldd	r18, Y+6	; 0x06
    18d6:	3f 81       	ldd	r19, Y+7	; 0x07
    18d8:	8c 81       	ldd	r24, Y+4	; 0x04
    18da:	9d 81       	ldd	r25, Y+5	; 0x05
    18dc:	28 17       	cp	r18, r24
    18de:	39 07       	cpc	r19, r25
    18e0:	64 f4       	brge	.+24     	; 0x18fa <fputc+0x3c>
    18e2:	e8 81       	ld	r30, Y
    18e4:	f9 81       	ldd	r31, Y+1	; 0x01
    18e6:	01 93       	st	Z+, r16
    18e8:	f9 83       	std	Y+1, r31	; 0x01
    18ea:	e8 83       	st	Y, r30
    18ec:	06 c0       	rjmp	.+12     	; 0x18fa <fputc+0x3c>
    18ee:	e8 85       	ldd	r30, Y+8	; 0x08
    18f0:	f9 85       	ldd	r31, Y+9	; 0x09
    18f2:	80 2f       	mov	r24, r16
    18f4:	09 95       	icall
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	31 f4       	brne	.+12     	; 0x1906 <fputc+0x48>
    18fa:	8e 81       	ldd	r24, Y+6	; 0x06
    18fc:	9f 81       	ldd	r25, Y+7	; 0x07
    18fe:	01 96       	adiw	r24, 0x01	; 1
    1900:	9f 83       	std	Y+7, r25	; 0x07
    1902:	8e 83       	std	Y+6, r24	; 0x06
    1904:	02 c0       	rjmp	.+4      	; 0x190a <fputc+0x4c>
    1906:	0f ef       	ldi	r16, 0xFF	; 255
    1908:	1f ef       	ldi	r17, 0xFF	; 255
    190a:	c8 01       	movw	r24, r16
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	1f 91       	pop	r17
    1912:	0f 91       	pop	r16
    1914:	08 95       	ret

00001916 <sprintf>:
    1916:	0f 93       	push	r16
    1918:	1f 93       	push	r17
    191a:	cf 93       	push	r28
    191c:	df 93       	push	r29
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	2e 97       	sbiw	r28, 0x0e	; 14
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	de bf       	out	0x3e, r29	; 62
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	cd bf       	out	0x3d, r28	; 61
    192e:	0d 89       	ldd	r16, Y+21	; 0x15
    1930:	1e 89       	ldd	r17, Y+22	; 0x16
    1932:	86 e0       	ldi	r24, 0x06	; 6
    1934:	8c 83       	std	Y+4, r24	; 0x04
    1936:	1a 83       	std	Y+2, r17	; 0x02
    1938:	09 83       	std	Y+1, r16	; 0x01
    193a:	8f ef       	ldi	r24, 0xFF	; 255
    193c:	9f e7       	ldi	r25, 0x7F	; 127
    193e:	9e 83       	std	Y+6, r25	; 0x06
    1940:	8d 83       	std	Y+5, r24	; 0x05
    1942:	ae 01       	movw	r20, r28
    1944:	47 5e       	subi	r20, 0xE7	; 231
    1946:	5f 4f       	sbci	r21, 0xFF	; 255
    1948:	ce 01       	movw	r24, r28
    194a:	01 96       	adiw	r24, 0x01	; 1
    194c:	6f 89       	ldd	r22, Y+23	; 0x17
    194e:	78 8d       	ldd	r23, Y+24	; 0x18
    1950:	0e 94 de 05 	call	0xbbc	; 0xbbc <vfprintf>
    1954:	ef 81       	ldd	r30, Y+7	; 0x07
    1956:	f8 85       	ldd	r31, Y+8	; 0x08
    1958:	e0 0f       	add	r30, r16
    195a:	f1 1f       	adc	r31, r17
    195c:	10 82       	st	Z, r1
    195e:	2e 96       	adiw	r28, 0x0e	; 14
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	f8 94       	cli
    1964:	de bf       	out	0x3e, r29	; 62
    1966:	0f be       	out	0x3f, r0	; 63
    1968:	cd bf       	out	0x3d, r28	; 61
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	1f 91       	pop	r17
    1970:	0f 91       	pop	r16
    1972:	08 95       	ret

00001974 <__ultoa_invert>:
    1974:	fa 01       	movw	r30, r20
    1976:	aa 27       	eor	r26, r26
    1978:	28 30       	cpi	r18, 0x08	; 8
    197a:	51 f1       	breq	.+84     	; 0x19d0 <__ultoa_invert+0x5c>
    197c:	20 31       	cpi	r18, 0x10	; 16
    197e:	81 f1       	breq	.+96     	; 0x19e0 <__ultoa_invert+0x6c>
    1980:	e8 94       	clt
    1982:	6f 93       	push	r22
    1984:	6e 7f       	andi	r22, 0xFE	; 254
    1986:	6e 5f       	subi	r22, 0xFE	; 254
    1988:	7f 4f       	sbci	r23, 0xFF	; 255
    198a:	8f 4f       	sbci	r24, 0xFF	; 255
    198c:	9f 4f       	sbci	r25, 0xFF	; 255
    198e:	af 4f       	sbci	r26, 0xFF	; 255
    1990:	b1 e0       	ldi	r27, 0x01	; 1
    1992:	3e d0       	rcall	.+124    	; 0x1a10 <__ultoa_invert+0x9c>
    1994:	b4 e0       	ldi	r27, 0x04	; 4
    1996:	3c d0       	rcall	.+120    	; 0x1a10 <__ultoa_invert+0x9c>
    1998:	67 0f       	add	r22, r23
    199a:	78 1f       	adc	r23, r24
    199c:	89 1f       	adc	r24, r25
    199e:	9a 1f       	adc	r25, r26
    19a0:	a1 1d       	adc	r26, r1
    19a2:	68 0f       	add	r22, r24
    19a4:	79 1f       	adc	r23, r25
    19a6:	8a 1f       	adc	r24, r26
    19a8:	91 1d       	adc	r25, r1
    19aa:	a1 1d       	adc	r26, r1
    19ac:	6a 0f       	add	r22, r26
    19ae:	71 1d       	adc	r23, r1
    19b0:	81 1d       	adc	r24, r1
    19b2:	91 1d       	adc	r25, r1
    19b4:	a1 1d       	adc	r26, r1
    19b6:	20 d0       	rcall	.+64     	; 0x19f8 <__ultoa_invert+0x84>
    19b8:	09 f4       	brne	.+2      	; 0x19bc <__ultoa_invert+0x48>
    19ba:	68 94       	set
    19bc:	3f 91       	pop	r19
    19be:	2a e0       	ldi	r18, 0x0A	; 10
    19c0:	26 9f       	mul	r18, r22
    19c2:	11 24       	eor	r1, r1
    19c4:	30 19       	sub	r19, r0
    19c6:	30 5d       	subi	r19, 0xD0	; 208
    19c8:	31 93       	st	Z+, r19
    19ca:	de f6       	brtc	.-74     	; 0x1982 <__ultoa_invert+0xe>
    19cc:	cf 01       	movw	r24, r30
    19ce:	08 95       	ret
    19d0:	46 2f       	mov	r20, r22
    19d2:	47 70       	andi	r20, 0x07	; 7
    19d4:	40 5d       	subi	r20, 0xD0	; 208
    19d6:	41 93       	st	Z+, r20
    19d8:	b3 e0       	ldi	r27, 0x03	; 3
    19da:	0f d0       	rcall	.+30     	; 0x19fa <__ultoa_invert+0x86>
    19dc:	c9 f7       	brne	.-14     	; 0x19d0 <__ultoa_invert+0x5c>
    19de:	f6 cf       	rjmp	.-20     	; 0x19cc <__ultoa_invert+0x58>
    19e0:	46 2f       	mov	r20, r22
    19e2:	4f 70       	andi	r20, 0x0F	; 15
    19e4:	40 5d       	subi	r20, 0xD0	; 208
    19e6:	4a 33       	cpi	r20, 0x3A	; 58
    19e8:	18 f0       	brcs	.+6      	; 0x19f0 <__ultoa_invert+0x7c>
    19ea:	49 5d       	subi	r20, 0xD9	; 217
    19ec:	31 fd       	sbrc	r19, 1
    19ee:	40 52       	subi	r20, 0x20	; 32
    19f0:	41 93       	st	Z+, r20
    19f2:	02 d0       	rcall	.+4      	; 0x19f8 <__ultoa_invert+0x84>
    19f4:	a9 f7       	brne	.-22     	; 0x19e0 <__ultoa_invert+0x6c>
    19f6:	ea cf       	rjmp	.-44     	; 0x19cc <__ultoa_invert+0x58>
    19f8:	b4 e0       	ldi	r27, 0x04	; 4
    19fa:	a6 95       	lsr	r26
    19fc:	97 95       	ror	r25
    19fe:	87 95       	ror	r24
    1a00:	77 95       	ror	r23
    1a02:	67 95       	ror	r22
    1a04:	ba 95       	dec	r27
    1a06:	c9 f7       	brne	.-14     	; 0x19fa <__ultoa_invert+0x86>
    1a08:	00 97       	sbiw	r24, 0x00	; 0
    1a0a:	61 05       	cpc	r22, r1
    1a0c:	71 05       	cpc	r23, r1
    1a0e:	08 95       	ret
    1a10:	9b 01       	movw	r18, r22
    1a12:	ac 01       	movw	r20, r24
    1a14:	0a 2e       	mov	r0, r26
    1a16:	06 94       	lsr	r0
    1a18:	57 95       	ror	r21
    1a1a:	47 95       	ror	r20
    1a1c:	37 95       	ror	r19
    1a1e:	27 95       	ror	r18
    1a20:	ba 95       	dec	r27
    1a22:	c9 f7       	brne	.-14     	; 0x1a16 <__ultoa_invert+0xa2>
    1a24:	62 0f       	add	r22, r18
    1a26:	73 1f       	adc	r23, r19
    1a28:	84 1f       	adc	r24, r20
    1a2a:	95 1f       	adc	r25, r21
    1a2c:	a0 1d       	adc	r26, r0
    1a2e:	08 95       	ret

00001a30 <_exit>:
    1a30:	f8 94       	cli

00001a32 <__stop_program>:
    1a32:	ff cf       	rjmp	.-2      	; 0x1a32 <__stop_program>
