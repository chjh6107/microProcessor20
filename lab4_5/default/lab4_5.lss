
lab4_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001a8  0000023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000023c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000990  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000350  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000c1  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000026d  00000000  00000000  00000e21  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  00001090  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000081  00000000  00000000  0000110c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000de  00000000  00000000  0000118d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_10>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ea       	ldi	r30, 0xA8	; 168
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a2 30       	cpi	r26, 0x02	; 2
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  c8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <__vector_10>:
#include <avr/io.h>
#include <avr/interrupt.h>

int loop;

ISR(TIMER2_OVF_vect){
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	00 90 5b 00 	lds	r0, 0x005B
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	2f 93       	push	r18
  e2:	3f 93       	push	r19
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
  e8:	ef 93       	push	r30
  ea:	ff 93       	push	r31
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
	if(loop < 1000) loop++;
  f4:	80 91 00 01 	lds	r24, 0x0100
  f8:	90 91 01 01 	lds	r25, 0x0101
  fc:	23 e0       	ldi	r18, 0x03	; 3
  fe:	88 3e       	cpi	r24, 0xE8	; 232
 100:	92 07       	cpc	r25, r18
 102:	54 f4       	brge	.+20     	; 0x118 <__vector_10+0x48>
 104:	80 91 00 01 	lds	r24, 0x0100
 108:	90 91 01 01 	lds	r25, 0x0101
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	90 93 01 01 	sts	0x0101, r25
 112:	80 93 00 01 	sts	0x0100, r24
 116:	0e c0       	rjmp	.+28     	; 0x134 <__vector_10+0x64>
	else{
		loop = 0;						//loop가 한계에 다다르면 0으로 돌아옴
 118:	10 92 01 01 	sts	0x0101, r1
 11c:	10 92 00 01 	sts	0x0100, r1
		PORTE = ~PORTE & 0b00000100;	//점멸할 수 있도록 0, 1을
 120:	83 e2       	ldi	r24, 0x23	; 35
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	23 e2       	ldi	r18, 0x23	; 35
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	f9 01       	movw	r30, r18
 12a:	20 81       	ld	r18, Z
 12c:	20 95       	com	r18
 12e:	24 70       	andi	r18, 0x04	; 4
 130:	fc 01       	movw	r30, r24
 132:	20 83       	st	Z, r18
	}									//번갈아가면서 저장
	TCNT2 = 225;
 134:	84 e4       	ldi	r24, 0x44	; 68
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	21 ee       	ldi	r18, 0xE1	; 225
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
}
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	ff 91       	pop	r31
 144:	ef 91       	pop	r30
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	3f 91       	pop	r19
 14c:	2f 91       	pop	r18
 14e:	0f 90       	pop	r0
 150:	00 92 5b 00 	sts	0x005B, r0
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <main>:

int main(void){
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
	DDRE = 0x04; //PE2 출력
 166:	82 e2       	ldi	r24, 0x22	; 34
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	24 e0       	ldi	r18, 0x04	; 4
 16c:	fc 01       	movw	r30, r24
 16e:	20 83       	st	Z, r18
	TCCR2 = 0b00000100; // normal 모드, OC2 차단, 분주비 256
 170:	85 e4       	ldi	r24, 0x45	; 69
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	24 e0       	ldi	r18, 0x04	; 4
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18
	TCNT2 = 225;
 17a:	84 e4       	ldi	r24, 0x44	; 68
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	21 ee       	ldi	r18, 0xE1	; 225
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18
	TIMSK = 0b01000000;	//TOIE2=1, 오버플로우 인터럽트인에이블
 184:	87 e5       	ldi	r24, 0x57	; 87
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	20 e4       	ldi	r18, 0x40	; 64
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18
	SREG = 0x80;		//전역 인터럽트 인에이블
 18e:	8f e5       	ldi	r24, 0x5F	; 95
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	20 e8       	ldi	r18, 0x80	; 128
 194:	fc 01       	movw	r30, r24
 196:	20 83       	st	Z, r18
	PORTE = 0x04;
 198:	83 e2       	ldi	r24, 0x23	; 35
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	24 e0       	ldi	r18, 0x04	; 4
 19e:	fc 01       	movw	r30, r24
 1a0:	20 83       	st	Z, r18
	while(1);
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <main+0x44>

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>
